/*
 * generated by Xtext 2.10.0
 */
package edu.ustb.sei.mde.xmuxtext.ui.labeling

import com.google.inject.Inject
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider
import edu.ustb.sei.mde.xmu2.NamedElement
import edu.ustb.sei.mde.xmu2.expression.*
import edu.ustb.sei.mde.xmu2.expression.BooleanAndExpression
import edu.ustb.sei.mde.xmu2common.RelationalOperator
import edu.ustb.sei.mde.xmu2common.AdditiveOperator
import edu.ustb.sei.mde.xmu2common.UnaryOperator
import org.eclipse.emf.ecore.EObject
import edu.ustb.sei.mde.xmu2.TransformationModel
import edu.ustb.sei.mde.xmu2.EntryPoint
import edu.ustb.sei.mde.xmu2.statement.UpdateClause

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
class Xmu2LabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	new(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}
	
	def text(EObject e) {
		if(e instanceof TransformationModel) return 'Transformation '+ (e as TransformationModel).name
		else if(e instanceof EntryPoint) return 'Entry point '+e.rule.name
		else if(e instanceof BooleanOrExpression) return 'OR'
		else if(e instanceof BooleanAndExpression) return 'AND'
		else if(e instanceof RelationalExpression) {
			switch(e.operator) {
			case RelationalOperator::EQUAL: return '='
			case RelationalOperator::LESS: return '<'
			case RelationalOperator::LESS_EQUAL: return '<='
			case RelationalOperator::GREATER: return '>'
			case RelationalOperator::GREATER_EQUAL: return '>='
			}
		} else if(e instanceof UnaryExpression) {
			if(e.operator==UnaryOperator::NOT) return 'NOT'
			else return 'MINUS'
		} else if(e instanceof LoopPath) return e.operator.literal
		else if(e instanceof PositionPath) return e.type.literal
		else if(e instanceof UpdateClause) return e.type.literal
		else if(e instanceof VariableExpression) return 'var '+e.variable
		else if(e instanceof StringLiteralExpression) '"'+e.value+'"'
		else if(e instanceof IntegerLiteralExpression) e.value
		else if(e instanceof BooleanLiteralExpression) e.value
		else if(e instanceof edu.ustb.sei.mde.xmu2common.NamedElement) return e.eClass.name+' '+e.name
		else return e.eClass.name
	}

	// Labels and icons can be computed like this:
	
//	def text(Greeting ele) {
//		'A greeting to ' + ele.name
//	}
//
//	def image(Greeting ele) {
//		'Greeting.gif'
//	}
}
