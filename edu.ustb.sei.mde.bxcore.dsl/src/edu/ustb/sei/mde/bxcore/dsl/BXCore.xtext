grammar edu.ustb.sei.mde.bxcore.dsl.BXCore with org.eclipse.xtext.xbase.Xbase

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate bXCore "http://www.ustb.edu/sei/mde/bxcore/dsl/BXCore"

BXProgram :
	imports+=ImportSection*
	javaImports=XImportSection?
	definitions += Definition*
;

ImportSection :
	'import' metamodel=[ecore::EPackage|STRING] 'as' shortName=ValidID
;

Definition :
	TypeDefinition | BXFunctionDefinition | IndexDefinition
;

TypeLiteral :
	TupleTypeLiteral | PatternTypeLiteral
;

TupleTypeLiteral :
	UnorderedTupleTypeLiteral | OrderedTupleTypeLiteral | PredefinedTypeLiteral
;

UnorderedTupleTypeLiteral :
	source=[ImportSection|ValidID] ('(' elements+=TypeVar (',' elements+=TypeVar)* ')')
;

OrderedTupleTypeLiteral :
	source=[ImportSection|ValidID] ('[' elements+=TypeVar (',' elements+=TypeVar)* ']')
;

TypeVar :
	name=ValidID ':' type=TypeRef
;

PredefinedTypeLiteral :
	type=('empty')
;

PatternTypeLiteral :
	source=[ImportSection|ValidID] root=PatternNode
;

TypeDefinition:
	('type' name=ValidID '=' literal = TypeLiteral) | PatternDefinition
;

PatternDefinition:
	'pattern' name=ValidID '=' literal=PatternTypeLiteral
;

ContextTypeRef :
	({DefinedContextTypeRef} type=[TypeDefinition|ValidID]) 
	| TupleTypeLiteral
;

BXFunctionDefinition :
	'function' name=ValidID typeIndicator=TypeIndicator?  '=' statement = XmuCoreStatement
;

TypeRef :
	{EcoreTypeRef} type=[ecore::EClassifier|ValidID] |
	{FeatureTypeRef} type=[ecore::EClassifier|ValidID] (=> '::' feature=[ecore::EStructuralFeature|ValidID])
;

IndexDefinition :
	'index' name=ValidID '<' sourceType=ContextTypeRef ',' viewType=ContextTypeRef '>'
;

PatternNode :
	name=ValidID ':' type=[ecore::EClassifier|ValidID] ('{' (edges+=PatternEdge (',' edges+=PatternEdge)*)? '}')?
;

PatternEdge :
	name=ValidID ':' feature=[ecore::EStructuralFeature|ValidID] operator='=' value=PatternValueCondition
;

PatternValueCondition :
	PatternNode | PatternNodeRef
;

PatternNodeRef :
	node=[PatternNode|ValidID]
;

Pattern :
	PatternTypeLiteral | PatternDefinitionReference
;

PatternDefinitionReference :
	pattern=[PatternDefinition|ValidID]
;

XmuCoreStatement :
	XmuCoreFork |
	XmuCoreParallelComposition |
	XmuCoreCompositionChildStatement
;

XmuCoreCompositionChildStatement :
	XmuCoreMatchSource | XmuCoreMatchView |
	XmuCoreExpandSource | XmuCoreExpandView | XmuCoreGraphReplace |
	XmuCoreSwitch | XmuCoreAlign | XmuCoreFunctionCall | XmuCoreIndex
;

TypeIndicator :
	'<' sourceType=ContextTypeRef ',' viewType=ContextTypeRef '>'
;

XmuCoreMatchSource :
	'matchS' typeIndicator=TypeIndicator? pattern=Pattern body=XmuCoreStatement
;

XmuCoreMatchView :
	'matchV' typeIndicator=TypeIndicator? pattern=Pattern body=XmuCoreStatement
;

XmuCoreExpandSource :
	'expandS' typeIndicator=TypeIndicator? pattern=Pattern '(' mappings+=VarMapping (','  mappings+=VarMapping)* ')' '->' body=XmuCoreStatement
;

XmuCoreExpandView :
	'expandV' typeIndicator=TypeIndicator? pattern=Pattern '(' mappings+=VarMapping (','  mappings+=VarMapping)* ')' '->' body=XmuCoreStatement
;

VarMapping :
	from=ValidID '->' to=ValidID
;

XmuCoreGraphReplace :
	'replace' typeIndicator=TypeIndicator? source=Pattern view=Pattern '{' conversions+=Conversion+ '}'
;

XmuCoreParallelComposition :
	typeIndicator=TypeIndicator? '{' bodies+=XmuCoreCompositionChildStatement (=> '|' bodies+=XmuCoreCompositionChildStatement)+ '}' 
;

XmuCoreSwitch :
	'switch' typeIndicator=TypeIndicator? '['
		branches+=XmuCoreSwitchBranch+
		adaptions+=XmuCoreSwitchAdaption*
	']'
;

XmuCoreSwitchBranch :
	'case' condition=ContextAwareCondition '->' action=XmuCoreStatement 
;

XmuCoreSwitchAdaption:
	'adaption' condition=ContextAwareCondition '->' action=ContextAwareUnidirectionalAction
;

Conversion :
	bigul=BiGULStatement '(' source+=ValidID (',' source+=ValidID)* ')' '(' view+=ValidID (',' view+=ValidID)* ')'
;

XmuCoreFork :
	typeIndicator=TypeIndicator? '{' forks+=XmuCoreForkBranch (=> '|' forks+=XmuCoreForkBranch)+ '}'
;

XmuCoreForkBranch :
	'(' sourceMappings+=VarMapping (','  sourceMappings+=VarMapping)* ')'
	'(' viewMappings+=VarMapping (','  viewMappings+=VarMapping)* ')' '->'
	body=XmuCoreStatement
;

XmuCoreAlign :
	'align' typeIndicator=TypeIndicator? sourcePattern=Pattern viewPattern=Pattern 'with' alignment=ContextAwareCondition
		(('match' '->' match=XmuCoreStatement) & ('unmatchS' '->' unmatchS=ContextAwareUnidirectionalAction) & ('unmatchV' '->' unmatchV=ContextAwareUnidirectionalAction))
;

XmuCoreFunctionCall :
	target=[BXFunctionDefinition|ValidID] typeIndicator=TypeIndicator?  '(' sourceMappings+=VarMapping (','  sourceMappings+=VarMapping)* ')'
	'(' viewMappings+=VarMapping (','  viewMappings+=VarMapping)* ')'
;

XmuCoreIndex :
	'index' typeIndicator=TypeIndicator? parts+=IndexPart (',' parts+=IndexPart)* 'in' body=XmuCoreStatement
;

IndexPart :
	signature=[IndexDefinition|ValidID] '<' sourceKeys+=ValidID (',' sourceKeys+=ValidID)* '|' viewKeys+=ValidID (',' viewKeys+=ValidID)* '>'
;

ContextAwareCondition :
	condition=XExpression
;

ContextAwareUnidirectionalAction :
	action=XBlockExpression
;

BiGULStatement :
	BiGULReplace | BiGULSkip
;

BiGULReplace :
	{BiGULReplace} 'replace'
;

BiGULSkip :
	{BiGULSkip} 'skip'
;

@Override
ValidID :
	ID | 'replace' | 'skip' | 'index' | 'align' | 'match' | 'int' | 'String' |'boolean' | 'type'
;