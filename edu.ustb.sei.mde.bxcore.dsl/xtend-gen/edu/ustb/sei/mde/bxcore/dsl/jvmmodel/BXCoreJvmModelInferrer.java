/**
 * generated by Xtext 2.14.0
 */
package edu.ustb.sei.mde.bxcore.dsl.jvmmodel;

import com.google.inject.Inject;
import edu.ustb.sei.mde.bxcore.Align;
import edu.ustb.sei.mde.bxcore.ExpandSource;
import edu.ustb.sei.mde.bxcore.ExpandView;
import edu.ustb.sei.mde.bxcore.Fork;
import edu.ustb.sei.mde.bxcore.GraphReplace;
import edu.ustb.sei.mde.bxcore.IndexSignature;
import edu.ustb.sei.mde.bxcore.Indexing;
import edu.ustb.sei.mde.bxcore.Invocation;
import edu.ustb.sei.mde.bxcore.MatchSource;
import edu.ustb.sei.mde.bxcore.MatchView;
import edu.ustb.sei.mde.bxcore.ParallelComposition;
import edu.ustb.sei.mde.bxcore.SourceType;
import edu.ustb.sei.mde.bxcore.Switch;
import edu.ustb.sei.mde.bxcore.TraceSystem;
import edu.ustb.sei.mde.bxcore.ViewType;
import edu.ustb.sei.mde.bxcore.XmuCore;
import edu.ustb.sei.mde.bxcore.bigul.Replace;
import edu.ustb.sei.mde.bxcore.bigul.Skip;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.BXFunctionDefinition;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.BXProgram;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.BiGULReplace;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.BiGULSkip;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.BiGULStatement;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.ContextAwareCondition;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.ContextAwareUnidirectionalAction;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.ContextTypeRef;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.Conversion;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.DefinedContextTypeRef;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.Definition;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.ImportSection;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.IndexDefinition;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.IndexPart;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternDefinitionReference;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternEdge;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternNode;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternNodeRef;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternTypeLiteral;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternValueCondition;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.TupleTypeLiteral;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.TypeDefinition;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.TypeLiteral;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.VarMapping;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreAlign;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreCompositionChildStatement;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreExpandSource;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreExpandView;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreFork;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreForkBranch;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreFunctionCall;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreGraphReplace;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreIndex;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreMatchSource;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreMatchView;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreParallelComposition;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreStatement;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreSwitch;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreSwitchAdaption;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreSwitchBranch;
import edu.ustb.sei.mde.bxcore.dsl.structure.TupleType;
import edu.ustb.sei.mde.bxcore.exceptions.BidirectionalTransformationDefinitionException;
import edu.ustb.sei.mde.bxcore.exceptions.NothingReturnedException;
import edu.ustb.sei.mde.bxcore.structures.Context;
import edu.ustb.sei.mde.bxcore.structures.ContextType;
import edu.ustb.sei.mde.bxcore.util.EcoreModelUtil;
import edu.ustb.sei.mde.graph.pattern.Pattern;
import edu.ustb.sei.mde.graph.type.IStructuralFeatureEdge;
import edu.ustb.sei.mde.graph.type.ITypeNode;
import edu.ustb.sei.mde.graph.type.TypeGraph;
import edu.ustb.sei.mde.graph.type.TypeNode;
import edu.ustb.sei.mde.graph.typedGraph.TypedGraph;
import edu.ustb.sei.mde.structure.Tuple2;
import edu.ustb.sei.mde.structure.Tuple3;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;
import org.eclipse.core.resources.IWorkspaceRoot;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.jdt.core.IJavaModel;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jdt.core.IPackageFragmentRoot;
import org.eclipse.jdt.core.JavaCore;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtend2.lib.StringConcatenationClient;
import org.eclipse.xtext.common.types.JvmDeclaredType;
import org.eclipse.xtext.common.types.JvmField;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericType;
import org.eclipse.xtext.common.types.JvmMember;
import org.eclipse.xtext.common.types.JvmOperation;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.common.types.JvmVisibility;
import org.eclipse.xtext.xbase.compiler.JvmModelGenerator;
import org.eclipse.xtext.xbase.compiler.output.ITreeAppendable;
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer;
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor;
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.MapExtensions;
import org.eclipse.xtext.xbase.lib.Pair;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure2;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure3;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * <p>Infers a JVM model from the source model.</p>
 * 
 * <p>The JVM model should contain all elements that would appear in the Java code
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>
 */
@SuppressWarnings("all")
public class BXCoreJvmModelInferrer extends AbstractModelInferrer {
  /**
   * convenience API to build and initialize JVM types and their members.
   */
  @Inject
  @Extension
  private JvmTypesBuilder _jvmTypesBuilder;
  
  @Inject
  @Extension
  private JvmModelGenerator _jvmModelGenerator;
  
  /**
   * The dispatch method {@code infer} is called for each instance of the
   * given element's type that is contained in a resource.
   * 
   * @param element
   *            the model to create one or more
   *            {@link JvmDeclaredType declared
   *            types} from.
   * @param acceptor
   *            each created
   *            {@link JvmDeclaredType type}
   *            without a container should be passed to the acceptor in order
   *            get attached to the current resource. The acceptor's
   *            {@link IJvmDeclaredTypeAcceptor#accept(org.eclipse.xtext.common.types.JvmDeclaredType)
   *            accept(..)} method takes the constructed empty type for the
   *            pre-indexing phase. This one is further initialized in the
   *            indexing phase using the lambda you pass as the last argument.
   * @param isPreIndexingPhase
   *            whether the method is called in a pre-indexing phase, i.e.
   *            when the global index is not yet fully updated. You must not
   *            rely on linking using the index if isPreIndexingPhase is
   *            <code>true</code>.
   */
  protected void _infer(final BXProgram element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    final String sourceURI = this.toJavaClassName(element.eResource().getURI().trimFileExtension());
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      final Consumer<ImportSection> _function_1 = (ImportSection i) -> {
        this.generateImportSection(i, it);
      };
      element.getImports().forEach(_function_1);
      EList<JvmMember> _members = it.getMembers();
      final Procedure1<JvmOperation> _function_2 = (JvmOperation it_1) -> {
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(element, "bx", this._typeReferenceBuilder.typeRef(XmuCore.class));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        EList<JvmFormalParameter> _parameters_1 = it_1.getParameters();
        JvmFormalParameter _parameter_1 = this._jvmTypesBuilder.toParameter(element, "graph", this._typeReferenceBuilder.typeRef(TypedGraph.class));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_1, _parameter_1);
        EList<JvmFormalParameter> _parameters_2 = it_1.getParameters();
        JvmFormalParameter _parameter_2 = this._jvmTypesBuilder.toParameter(element, "inits", this._jvmTypesBuilder.addArrayTypeDimension(this._typeReferenceBuilder.typeRef(Tuple2.class, this._typeReferenceBuilder.typeRef(String.class), this._typeReferenceBuilder.typeRef(Object.class))));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_2, _parameter_2);
        EList<JvmTypeReference> _exceptions = it_1.getExceptions();
        JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(NothingReturnedException.class);
        this._jvmTypesBuilder.<JvmTypeReference>operator_add(_exceptions, _typeRef);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            String _qualifiedName = BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(Context.class).getQualifiedName();
            _builder.append(_qualifiedName);
            _builder.append(" sourceContext = bx.getSourceDef().createInstance();");
            _builder.newLineIfNotEmpty();
            _builder.append("for(");
            String _qualifiedName_1 = BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(Tuple2.class, BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(String.class), BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(Object.class)).getQualifiedName();
            _builder.append(_qualifiedName_1);
            _builder.append(" tuple : inits) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("sourceContext.setValue(tuple.first, tuple.second);");
            _builder.newLine();
            _builder.append("}");
            _builder.newLine();
            _builder.append("return bx.forward(");
            String _qualifiedName_2 = BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(SourceType.class).getQualifiedName();
            _builder.append(_qualifiedName_2);
            _builder.append(".makeSource(graph, sourceContext, new ");
            String _qualifiedName_3 = BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(TraceSystem.class).getQualifiedName();
            _builder.append(_qualifiedName_3);
            _builder.append("()));");
            _builder.newLineIfNotEmpty();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method = this._jvmTypesBuilder.toMethod(element, "execute", this._typeReferenceBuilder.typeRef(ViewType.class), _function_2);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members, _method);
      EList<JvmMember> _members_1 = it.getMembers();
      final Procedure1<JvmOperation> _function_3 = (JvmOperation it_1) -> {
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(element, "bx", this._typeReferenceBuilder.typeRef(XmuCore.class));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        EList<JvmFormalParameter> _parameters_1 = it_1.getParameters();
        JvmFormalParameter _parameter_1 = this._jvmTypesBuilder.toParameter(element, "source", this._typeReferenceBuilder.typeRef(TypedGraph.class));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_1, _parameter_1);
        EList<JvmFormalParameter> _parameters_2 = it_1.getParameters();
        JvmFormalParameter _parameter_2 = this._jvmTypesBuilder.toParameter(element, "sourceInits", this._jvmTypesBuilder.addArrayTypeDimension(this._typeReferenceBuilder.typeRef(Tuple2.class, this._typeReferenceBuilder.typeRef(String.class), this._typeReferenceBuilder.typeRef(Object.class))));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_2, _parameter_2);
        EList<JvmFormalParameter> _parameters_3 = it_1.getParameters();
        JvmFormalParameter _parameter_3 = this._jvmTypesBuilder.toParameter(element, "view", this._typeReferenceBuilder.typeRef(TypedGraph.class));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_3, _parameter_3);
        EList<JvmFormalParameter> _parameters_4 = it_1.getParameters();
        JvmFormalParameter _parameter_4 = this._jvmTypesBuilder.toParameter(element, "viewInits", this._jvmTypesBuilder.addArrayTypeDimension(this._typeReferenceBuilder.typeRef(Tuple2.class, this._typeReferenceBuilder.typeRef(String.class), this._typeReferenceBuilder.typeRef(Object.class))));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_4, _parameter_4);
        EList<JvmTypeReference> _exceptions = it_1.getExceptions();
        JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(NothingReturnedException.class);
        this._jvmTypesBuilder.<JvmTypeReference>operator_add(_exceptions, _typeRef);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            String _qualifiedName = BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(Context.class).getQualifiedName();
            _builder.append(_qualifiedName);
            _builder.append(" sourceContext = bx.getSourceDef().createInstance();");
            _builder.newLineIfNotEmpty();
            _builder.append("for(");
            String _qualifiedName_1 = BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(Tuple2.class, BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(String.class), BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(Object.class)).getQualifiedName();
            _builder.append(_qualifiedName_1);
            _builder.append(" tuple : sourceInits) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("sourceContext.setValue(tuple.first, tuple.second);");
            _builder.newLine();
            _builder.append("}");
            _builder.newLine();
            String _qualifiedName_2 = BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(Context.class).getQualifiedName();
            _builder.append(_qualifiedName_2);
            _builder.append(" viewContext = bx.getViewDef().createInstance();");
            _builder.newLineIfNotEmpty();
            _builder.append("for(");
            String _qualifiedName_3 = BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(Tuple2.class, BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(String.class), BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(Object.class)).getQualifiedName();
            _builder.append(_qualifiedName_3);
            _builder.append(" tuple : viewInits) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("viewContext.setValue(tuple.first, tuple.second);");
            _builder.newLine();
            _builder.append("}");
            _builder.newLine();
            _builder.newLine();
            _builder.append("return bx.backward(");
            String _qualifiedName_4 = BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(SourceType.class).getQualifiedName();
            _builder.append(_qualifiedName_4);
            _builder.append(".makeSource(source, sourceContext, new ");
            String _qualifiedName_5 = BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(TraceSystem.class).getQualifiedName();
            _builder.append(_qualifiedName_5);
            _builder.append("()), ");
            String _qualifiedName_6 = BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(ViewType.class).getQualifiedName();
            _builder.append(_qualifiedName_6);
            _builder.append(".makeView(view, viewContext));");
            _builder.newLineIfNotEmpty();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_1 = this._jvmTypesBuilder.toMethod(element, "execute", this._typeReferenceBuilder.typeRef(SourceType.class), _function_3);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, _method_1);
      final Function1<EObject, Boolean> _function_4 = (EObject e) -> {
        return Boolean.valueOf((e instanceof ContextAwareCondition));
      };
      final Function1<EObject, ContextAwareCondition> _function_5 = (EObject it_1) -> {
        return ((ContextAwareCondition) it_1);
      };
      final List<ContextAwareCondition> conditions = IteratorExtensions.<ContextAwareCondition>toList(IteratorExtensions.<EObject, ContextAwareCondition>map(IteratorExtensions.<EObject>filter(element.eAllContents(), _function_4), _function_5));
      final Procedure2<ContextAwareCondition, Integer> _function_6 = (ContextAwareCondition cond, Integer id) -> {
        this.generateCondition(cond, id, it);
      };
      IterableExtensions.<ContextAwareCondition>forEach(conditions, _function_6);
      final Function1<EObject, Boolean> _function_7 = (EObject e) -> {
        return Boolean.valueOf((e instanceof ContextAwareUnidirectionalAction));
      };
      final Function1<EObject, ContextAwareUnidirectionalAction> _function_8 = (EObject it_1) -> {
        return ((ContextAwareUnidirectionalAction) it_1);
      };
      final List<ContextAwareUnidirectionalAction> actions = IteratorExtensions.<ContextAwareUnidirectionalAction>toList(IteratorExtensions.<EObject, ContextAwareUnidirectionalAction>map(IteratorExtensions.<EObject>filter(element.eAllContents(), _function_7), _function_8));
      final Procedure2<ContextAwareUnidirectionalAction, Integer> _function_9 = (ContextAwareUnidirectionalAction act, Integer id) -> {
        this.generateAction(act, id, it);
      };
      IterableExtensions.<ContextAwareUnidirectionalAction>forEach(actions, _function_9);
      final Function1<EObject, Boolean> _function_10 = (EObject it_1) -> {
        return Boolean.valueOf((it_1 instanceof XmuCoreStatement));
      };
      final Function1<EObject, XmuCoreStatement> _function_11 = (EObject it_1) -> {
        return ((XmuCoreStatement) it_1);
      };
      final List<Pair<Integer, XmuCoreStatement>> statements = IteratorExtensions.<Pair<Integer, XmuCoreStatement>>toList(IteratorExtensions.<XmuCoreStatement>indexed(IteratorExtensions.<EObject, XmuCoreStatement>map(IteratorExtensions.<EObject>filter(element.eAllContents(), _function_10), _function_11)));
      final HashMap<EObject, Tuple2<TupleType, Integer>> typeLiteralMap = this.groupTypeLiterals(element);
      final Consumer<Tuple2<TupleType, Integer>> _function_12 = (Tuple2<TupleType, Integer> pair) -> {
        this.generateTypeLiteral(it, pair.first, (pair.second).intValue(), element);
      };
      IterableExtensions.<Tuple2<TupleType, Integer>>toSet(typeLiteralMap.values()).forEach(_function_12);
      final Function1<EObject, Boolean> _function_13 = (EObject it_1) -> {
        return Boolean.valueOf((it_1 instanceof PatternTypeLiteral));
      };
      final Function1<EObject, PatternTypeLiteral> _function_14 = (EObject it_1) -> {
        return ((PatternTypeLiteral) it_1);
      };
      final List<Pair<Integer, PatternTypeLiteral>> patternLiterals = IteratorExtensions.<Pair<Integer, PatternTypeLiteral>>toList(IteratorExtensions.<PatternTypeLiteral>indexed(IteratorExtensions.<EObject, PatternTypeLiteral>map(IteratorExtensions.<EObject>filter(element.eAllContents(), _function_13), _function_14)));
      final Consumer<Pair<Integer, PatternTypeLiteral>> _function_15 = (Pair<Integer, PatternTypeLiteral> p) -> {
        this.generatePatternLiteral(it, p.getValue(), p.getKey(), typeLiteralMap, element);
      };
      patternLiterals.forEach(_function_15);
      final Consumer<Definition> _function_16 = (Definition def) -> {
        if ((def instanceof TypeDefinition)) {
          this.generateTypeDefinition(it, ((TypeDefinition)def), typeLiteralMap, patternLiterals, element);
        } else {
          if ((def instanceof IndexDefinition)) {
            EList<JvmMember> _members_2 = it.getMembers();
            String _name = ((IndexDefinition)def).getName();
            String _plus = ("index_" + _name);
            final Procedure1<JvmField> _function_17 = (JvmField it_1) -> {
              it_1.setVisibility(JvmVisibility.PRIVATE);
            };
            JvmField _field = this._jvmTypesBuilder.toField(def, _plus, this._typeReferenceBuilder.typeRef(IndexSignature.class), _function_17);
            this._jvmTypesBuilder.<JvmField>operator_add(_members_2, _field);
            EList<JvmMember> _members_3 = it.getMembers();
            String _firstUpper = StringExtensions.toFirstUpper(((IndexDefinition)def).getName());
            String _plus_1 = ("getIndex_" + _firstUpper);
            final Procedure1<JvmOperation> _function_18 = (JvmOperation it_1) -> {
              it_1.setVisibility(JvmVisibility.PUBLIC);
              StringConcatenationClient _client = new StringConcatenationClient() {
                @Override
                protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
                  _builder.append("if(index_");
                  String _name = ((IndexDefinition)def).getName();
                  _builder.append(_name);
                  _builder.append("==null) {");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("index_");
                  String _name_1 = ((IndexDefinition)def).getName();
                  _builder.append(_name_1, "\t");
                  _builder.append(" = new ");
                  String _qualifiedName = BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(IndexSignature.class).getQualifiedName();
                  _builder.append(_qualifiedName, "\t");
                  _builder.append("(\"");
                  String _name_2 = ((IndexDefinition) def).getName();
                  _builder.append(_name_2, "\t");
                  _builder.append("\", ");
                  CharSequence _typeAccessor = BXCoreJvmModelInferrer.this.typeAccessor(((IndexDefinition) def).getSourceType(), typeLiteralMap);
                  _builder.append(_typeAccessor, "\t");
                  _builder.append(", ");
                  CharSequence _typeAccessor_1 = BXCoreJvmModelInferrer.this.typeAccessor(((IndexDefinition) def).getViewType(), typeLiteralMap);
                  _builder.append(_typeAccessor_1, "\t");
                  _builder.append(");");
                  _builder.newLineIfNotEmpty();
                  _builder.append("}");
                  _builder.newLine();
                  _builder.append("return index_");
                  String _name_3 = ((IndexDefinition)def).getName();
                  _builder.append(_name_3);
                  _builder.append(";");
                  _builder.newLineIfNotEmpty();
                }
              };
              this._jvmTypesBuilder.setBody(it_1, _client);
            };
            JvmOperation _method_2 = this._jvmTypesBuilder.toMethod(def, _plus_1, this._typeReferenceBuilder.typeRef(IndexSignature.class), _function_18);
            this._jvmTypesBuilder.<JvmOperation>operator_add(_members_3, _method_2);
          } else {
            if ((def instanceof BXFunctionDefinition)) {
              EList<JvmMember> _members_4 = it.getMembers();
              String _name_1 = ((BXFunctionDefinition)def).getName();
              String _plus_2 = ("xmu_" + _name_1);
              final Procedure1<JvmField> _function_19 = (JvmField it_1) -> {
                it_1.setVisibility(JvmVisibility.PRIVATE);
              };
              JvmField _field_1 = this._jvmTypesBuilder.toField(def, _plus_2, this._typeReferenceBuilder.typeRef(XmuCore.class), _function_19);
              this._jvmTypesBuilder.<JvmField>operator_add(_members_4, _field_1);
              EList<JvmMember> _members_5 = it.getMembers();
              String _firstUpper_1 = StringExtensions.toFirstUpper(((BXFunctionDefinition)def).getName());
              String _plus_3 = ("getXmu_" + _firstUpper_1);
              final Procedure1<JvmOperation> _function_20 = (JvmOperation it_1) -> {
                it_1.setVisibility(JvmVisibility.PUBLIC);
                EList<JvmTypeReference> _exceptions = it_1.getExceptions();
                JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(BidirectionalTransformationDefinitionException.class);
                this._jvmTypesBuilder.<JvmTypeReference>operator_add(_exceptions, _typeRef);
                final Procedure1<ITreeAppendable> _function_21 = (ITreeAppendable appendable) -> {
                  StringConcatenation _builder = new StringConcatenation();
                  _builder.append("if(xmu_");
                  String _name_2 = ((BXFunctionDefinition)def).getName();
                  _builder.append(_name_2);
                  _builder.append("==null) {");
                  ITreeAppendable _newLine = appendable.append(_builder).newLine();
                  StringConcatenation _builder_1 = new StringConcatenation();
                  _builder_1.append("xmu_");
                  String _name_3 = ((BXFunctionDefinition)def).getName();
                  _builder_1.append(_name_3);
                  _builder_1.append(" = ");
                  ITreeAppendable _newLine_1 = this.generateXmuCode(_newLine.append(_builder_1), ((BXFunctionDefinition) def).getStatement(), statements, typeLiteralMap, patternLiterals, conditions, actions, element).append(";").newLine().append("}").newLine();
                  StringConcatenation _builder_2 = new StringConcatenation();
                  _builder_2.append("return xmu_");
                  String _name_4 = ((BXFunctionDefinition)def).getName();
                  _builder_2.append(_name_4);
                  _builder_2.append(";");
                  _newLine_1.append(_builder_2);
                };
                this._jvmTypesBuilder.setBody(it_1, _function_21);
              };
              JvmOperation _method_3 = this._jvmTypesBuilder.toMethod(def, _plus_3, this._typeReferenceBuilder.typeRef(XmuCore.class), _function_20);
              this._jvmTypesBuilder.<JvmOperation>operator_add(_members_5, _method_3);
            }
          }
        }
      };
      element.getDefinitions().forEach(_function_16);
    };
    acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(element, sourceURI, _function));
  }
  
  protected boolean generatePatternLiteral(final JvmGenericType owner, final PatternTypeLiteral literal, final Integer id, final Map<EObject, Tuple2<TupleType, Integer>> typeLiteralMap, final BXProgram program) {
    boolean _xblockexpression = false;
    {
      EList<JvmMember> _members = owner.getMembers();
      final Procedure1<JvmField> _function = (JvmField it) -> {
        it.setVisibility(JvmVisibility.PRIVATE);
      };
      JvmField _field = this._jvmTypesBuilder.toField(literal, ("pattern_" + id), this._typeReferenceBuilder.typeRef(Pattern.class), _function);
      this._jvmTypesBuilder.<JvmField>operator_add(_members, _field);
      final Function1<EObject, Boolean> _function_1 = (EObject it) -> {
        return Boolean.valueOf((it instanceof PatternNode));
      };
      final Function1<EObject, PatternNode> _function_2 = (EObject it) -> {
        return ((PatternNode) it);
      };
      final List<PatternNode> nodes = IteratorExtensions.<PatternNode>toList(IteratorExtensions.<EObject, PatternNode>map(IteratorExtensions.<EObject>filter(literal.eAllContents(), _function_1), _function_2));
      final Function1<EObject, Boolean> _function_3 = (EObject it) -> {
        return Boolean.valueOf((it instanceof PatternEdge));
      };
      final Function1<EObject, PatternEdge> _function_4 = (EObject it) -> {
        return ((PatternEdge) it);
      };
      final List<PatternEdge> edges = IteratorExtensions.<PatternEdge>toList(IteratorExtensions.<EObject, PatternEdge>map(IteratorExtensions.<EObject>filter(literal.eAllContents(), _function_3), _function_4));
      final ImportSection typeGraph = literal.getSource();
      final Integer patternTypeId = typeLiteralMap.get(literal).second;
      EList<JvmMember> _members_1 = owner.getMembers();
      final Procedure1<JvmOperation> _function_5 = (JvmOperation it) -> {
        it.setVisibility(JvmVisibility.PUBLIC);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("if(pattern_");
            _builder.append(id);
            _builder.append("==null) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            String _qualifiedName = BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(TypeGraph.class).getQualifiedName();
            _builder.append(_qualifiedName, "\t");
            _builder.append(" typeGraph = getTypeGraph_");
            String _firstUpper = StringExtensions.toFirstUpper(typeGraph.getShortName());
            _builder.append(_firstUpper, "\t");
            _builder.append("();");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("pattern_");
            _builder.append(id, "\t");
            _builder.append(" = new ");
            String _qualifiedName_1 = BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(Pattern.class).getQualifiedName();
            _builder.append(_qualifiedName_1, "\t");
            _builder.append("(typeGraph);");
            _builder.newLineIfNotEmpty();
            {
              for(final PatternNode node : nodes) {
                _builder.append("\t");
                String _qualifiedName_2 = BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(ITypeNode.class).getQualifiedName();
                _builder.append(_qualifiedName_2, "\t");
                _builder.append(" ");
                String _name = node.getName();
                _builder.append(_name, "\t");
                _builder.append("_type = typeGraph.");
                {
                  EClassifier _type = node.getType();
                  if ((_type instanceof EClass)) {
                    _builder.append("getTypeNode");
                  } else {
                    _builder.append("getDataTypeNode");
                  }
                }
                _builder.append("(\"");
                String _name_1 = node.getType().getName();
                _builder.append(_name_1, "\t");
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("pattern_");
                _builder.append(id, "\t");
                _builder.append(".appendPatternNode(\"");
                String _name_2 = node.getName();
                _builder.append(_name_2, "\t");
                _builder.append("\", ");
                String _name_3 = node.getName();
                _builder.append(_name_3, "\t");
                _builder.append("_type);");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              for(final PatternEdge edge : edges) {
                _builder.append("\t");
                PatternNode _xifexpression = null;
                PatternValueCondition _value = edge.getValue();
                if ((_value instanceof PatternNode)) {
                  PatternValueCondition _value_1 = edge.getValue();
                  _xifexpression = ((PatternNode) _value_1);
                } else {
                  PatternNode _xifexpression_1 = null;
                  PatternValueCondition _value_2 = edge.getValue();
                  if ((_value_2 instanceof PatternNodeRef)) {
                    PatternValueCondition _value_3 = edge.getValue();
                    _xifexpression_1 = ((PatternNodeRef) _value_3).getNode();
                  } else {
                    _xifexpression_1 = null;
                  }
                  _xifexpression = _xifexpression_1;
                }
                final PatternNode tarNode = _xifexpression;
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                String _xifexpression_2 = null;
                String _name_4 = edge.getName();
                boolean _tripleNotEquals = (_name_4 != null);
                if (_tripleNotEquals) {
                  _xifexpression_2 = edge.getName();
                } else {
                  EObject _eContainer = edge.eContainer();
                  String _name_5 = ((PatternNode) _eContainer).getName();
                  String _plus = (_name_5 + "_");
                  String _name_6 = edge.getFeature().getName();
                  String _plus_1 = (_plus + _name_6);
                  String _plus_2 = (_plus_1 + "_");
                  String _xifexpression_3 = null;
                  if ((tarNode != null)) {
                    _xifexpression_3 = tarNode.getName();
                  } else {
                    _xifexpression_3 = "?";
                  }
                  _xifexpression_2 = (_plus_2 + _xifexpression_3);
                }
                final String edgeName = _xifexpression_2;
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                String _qualifiedName_3 = BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(IStructuralFeatureEdge.class).getQualifiedName();
                _builder.append(_qualifiedName_3, "\t");
                _builder.append(" ");
                _builder.append(edgeName, "\t");
                _builder.append("_type = typeGraph.");
                {
                  EStructuralFeature _feature = edge.getFeature();
                  if ((_feature instanceof EReference)) {
                    _builder.append("getTypeEdge");
                  } else {
                    _builder.append("getPropertyEdge");
                  }
                }
                _builder.append("((");
                String _qualifiedName_4 = BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(TypeNode.class).getQualifiedName();
                _builder.append(_qualifiedName_4, "\t");
                _builder.append(") ");
                EObject _eContainer_1 = edge.eContainer();
                String _name_7 = ((PatternNode) _eContainer_1).getName();
                _builder.append(_name_7, "\t");
                _builder.append("_type,\"");
                String _name_8 = edge.getFeature().getName();
                _builder.append(_name_8, "\t");
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("pattern_");
                _builder.append(id, "\t");
                _builder.append(".appendPatternEdge(\"");
                _builder.append(edgeName, "\t");
                _builder.append("\", \"");
                EObject _eContainer_2 = edge.eContainer();
                String _name_9 = ((PatternNode) _eContainer_2).getName();
                _builder.append(_name_9, "\t");
                _builder.append("\", \"");
                String _name_10 = tarNode.getName();
                _builder.append(_name_10, "\t");
                _builder.append("\", ");
                _builder.append(edgeName, "\t");
                _builder.append("_type);");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("pattern_");
            _builder.append(id, "\t");
            _builder.append(".setType(getType_");
            _builder.append(patternTypeId, "\t");
            _builder.append("());");
            _builder.newLineIfNotEmpty();
            _builder.append("}");
            _builder.newLine();
            _builder.append("return pattern_");
            _builder.append(id);
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        };
        this._jvmTypesBuilder.setBody(it, _client);
      };
      JvmOperation _method = this._jvmTypesBuilder.toMethod(literal, ("getPattern_" + id), this._typeReferenceBuilder.typeRef(Pattern.class), _function_5);
      _xblockexpression = this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, _method);
    }
    return _xblockexpression;
  }
  
  protected void generateAction(final ContextAwareUnidirectionalAction act, final Integer id, final JvmGenericType type) {
    EList<JvmMember> _members = type.getMembers();
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      EList<JvmTypeReference> _superTypes = it.getSuperTypes();
      JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(BiFunction.class, this._typeReferenceBuilder.typeRef(SourceType.class), this._typeReferenceBuilder.typeRef(ViewType.class), this._typeReferenceBuilder.typeRef(SourceType.class));
      this._jvmTypesBuilder.<JvmTypeReference>operator_add(_superTypes, _typeRef);
      EList<JvmMember> _members_1 = it.getMembers();
      final Procedure1<JvmOperation> _function_1 = (JvmOperation it_1) -> {
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(act, "source", this._typeReferenceBuilder.typeRef(SourceType.class));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        EList<JvmFormalParameter> _parameters_1 = it_1.getParameters();
        JvmFormalParameter _parameter_1 = this._jvmTypesBuilder.toParameter(act, "view", this._typeReferenceBuilder.typeRef(ViewType.class));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_1, _parameter_1);
        this._jvmTypesBuilder.setBody(it_1, act.getAction());
      };
      JvmOperation _method = this._jvmTypesBuilder.toMethod(act, "apply", this._typeReferenceBuilder.typeRef(SourceType.class), _function_1);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, _method);
    };
    JvmGenericType _class = this._jvmTypesBuilder.toClass(act, ("UnidirectionalAction" + id), _function);
    this._jvmTypesBuilder.<JvmGenericType>operator_add(_members, _class);
  }
  
  protected void generateCondition(final ContextAwareCondition cond, final Integer id, final JvmGenericType type) {
    EList<JvmMember> _members = type.getMembers();
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      EObject _eContainer = cond.eContainer();
      if ((_eContainer instanceof XmuCoreAlign)) {
        EList<JvmTypeReference> _superTypes = it.getSuperTypes();
        JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(BiFunction.class, this._typeReferenceBuilder.typeRef(Context.class), this._typeReferenceBuilder.typeRef(Context.class), this._typeReferenceBuilder.typeRef(Boolean.class));
        this._jvmTypesBuilder.<JvmTypeReference>operator_add(_superTypes, _typeRef);
        EList<JvmMember> _members_1 = it.getMembers();
        final Procedure1<JvmOperation> _function_1 = (JvmOperation it_1) -> {
          EList<JvmFormalParameter> _parameters = it_1.getParameters();
          JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(cond, "source", this._typeReferenceBuilder.typeRef(Context.class));
          this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
          EList<JvmFormalParameter> _parameters_1 = it_1.getParameters();
          JvmFormalParameter _parameter_1 = this._jvmTypesBuilder.toParameter(cond, "view", this._typeReferenceBuilder.typeRef(Context.class));
          this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_1, _parameter_1);
          this._jvmTypesBuilder.setBody(it_1, cond.getCondition());
        };
        JvmOperation _method = this._jvmTypesBuilder.toMethod(cond, "apply", this._typeReferenceBuilder.typeRef(Boolean.class), _function_1);
        this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, _method);
      } else {
        EList<JvmTypeReference> _superTypes_1 = it.getSuperTypes();
        JvmTypeReference _typeRef_1 = this._typeReferenceBuilder.typeRef(BiFunction.class, this._typeReferenceBuilder.typeRef(SourceType.class), this._typeReferenceBuilder.typeRef(ViewType.class), this._typeReferenceBuilder.typeRef(Boolean.class));
        this._jvmTypesBuilder.<JvmTypeReference>operator_add(_superTypes_1, _typeRef_1);
        EList<JvmMember> _members_2 = it.getMembers();
        final Procedure1<JvmOperation> _function_2 = (JvmOperation it_1) -> {
          EList<JvmFormalParameter> _parameters = it_1.getParameters();
          JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(cond, "source", this._typeReferenceBuilder.typeRef(SourceType.class));
          this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
          EList<JvmFormalParameter> _parameters_1 = it_1.getParameters();
          JvmFormalParameter _parameter_1 = this._jvmTypesBuilder.toParameter(cond, "view", this._typeReferenceBuilder.typeRef(ViewType.class));
          this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_1, _parameter_1);
          this._jvmTypesBuilder.setBody(it_1, cond.getCondition());
        };
        JvmOperation _method_1 = this._jvmTypesBuilder.toMethod(cond, "apply", this._typeReferenceBuilder.typeRef(Boolean.class), _function_2);
        this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, _method_1);
      }
    };
    JvmGenericType _class = this._jvmTypesBuilder.toClass(cond, ("Condition" + id), _function);
    this._jvmTypesBuilder.<JvmGenericType>operator_add(_members, _class);
  }
  
  protected void generateImportSection(final ImportSection i, final JvmGenericType type) {
    EList<JvmMember> _members = type.getMembers();
    String _shortName = i.getShortName();
    String _plus = ("typeGraph_" + _shortName);
    final Procedure1<JvmField> _function = (JvmField it) -> {
      it.setVisibility(JvmVisibility.PRIVATE);
    };
    JvmField _field = this._jvmTypesBuilder.toField(i, _plus, this._typeReferenceBuilder.typeRef(TypeGraph.class), _function);
    this._jvmTypesBuilder.<JvmField>operator_add(_members, _field);
    EList<JvmMember> _members_1 = type.getMembers();
    String _firstUpper = StringExtensions.toFirstUpper(i.getShortName());
    String _plus_1 = ("getTypeGraph_" + _firstUpper);
    final Procedure1<JvmOperation> _function_1 = (JvmOperation it) -> {
      it.setVisibility(JvmVisibility.PUBLIC);
      final Function1<EObject, Boolean> _function_2 = (EObject o) -> {
        return Boolean.valueOf(((o instanceof EClass) || (o instanceof EReference)));
      };
      final Function1<EObject, EClass> _function_3 = (EObject o) -> {
        EClass _xifexpression = null;
        if ((o instanceof EClass)) {
          _xifexpression = ((EClass) o);
        } else {
          _xifexpression = ((EReference) o).getEReferenceType();
        }
        return _xifexpression;
      };
      final Set<EClass> eClasses = IteratorExtensions.<EClass>toSet(IteratorExtensions.<EObject, EClass>map(IteratorExtensions.<EObject>filter(i.getMetamodel().eAllContents(), _function_2), _function_3));
      final Function1<EObject, Boolean> _function_4 = (EObject o) -> {
        return Boolean.valueOf(((o instanceof EDataType) || (o instanceof EAttribute)));
      };
      final Function1<EObject, EDataType> _function_5 = (EObject o) -> {
        EDataType _xifexpression = null;
        if ((o instanceof EDataType)) {
          _xifexpression = ((EDataType) o);
        } else {
          _xifexpression = ((EAttribute) o).getEAttributeType();
        }
        return _xifexpression;
      };
      final Set<EDataType> eDataTypes = IteratorExtensions.<EDataType>toSet(IteratorExtensions.<EObject, EDataType>map(IteratorExtensions.<EObject>filter(i.getMetamodel().eAllContents(), _function_4), _function_5));
      final Function1<EObject, Boolean> _function_6 = (EObject o) -> {
        return Boolean.valueOf((o instanceof EReference));
      };
      final Function1<EObject, EReference> _function_7 = (EObject it_1) -> {
        return ((EReference) it_1);
      };
      final Set<EReference> eReferences = IteratorExtensions.<EReference>toSet(IteratorExtensions.<EObject, EReference>map(IteratorExtensions.<EObject>filter(i.getMetamodel().eAllContents(), _function_6), _function_7));
      final Function1<EObject, Boolean> _function_8 = (EObject o) -> {
        return Boolean.valueOf((o instanceof EAttribute));
      };
      final Function1<EObject, EAttribute> _function_9 = (EObject it_1) -> {
        return ((EAttribute) it_1);
      };
      final Set<EAttribute> eAttributes = IteratorExtensions.<EAttribute>toSet(IteratorExtensions.<EObject, EAttribute>map(IteratorExtensions.<EObject>filter(i.getMetamodel().eAllContents(), _function_8), _function_9));
      final ArrayList<EClass> ordered = CollectionLiterals.<EClass>newArrayList();
      for (final EClass o : eClasses) {
        this.insertInOrder(ordered, o, eClasses);
      }
      StringConcatenationClient _client = new StringConcatenationClient() {
        @Override
        protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
          _builder.append("if(typeGraph_");
          String _shortName = i.getShortName();
          _builder.append(_shortName);
          _builder.append("==null) {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("typeGraph_");
          String _shortName_1 = i.getShortName();
          _builder.append(_shortName_1, "\t");
          _builder.append(" = new ");
          String _qualifiedName = BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(TypeGraph.class).getQualifiedName();
          _builder.append(_qualifiedName, "\t");
          _builder.append("();");
          _builder.newLineIfNotEmpty();
          {
            for(final EClass t : ordered) {
              _builder.append("\t");
              _builder.append("typeGraph_");
              String _shortName_2 = i.getShortName();
              _builder.append(_shortName_2, "\t");
              _builder.append(".declare(\"");
              {
                boolean _isAbstract = t.isAbstract();
                if (_isAbstract) {
                  _builder.append("@");
                }
              }
              String _name = t.getName();
              _builder.append(_name, "\t");
              {
                EList<EClass> _eSuperTypes = t.getESuperTypes();
                for(final EClass s : _eSuperTypes) {
                  {
                    boolean _contains = eClasses.contains(s);
                    if (_contains) {
                      _builder.append(",");
                      String _name_1 = s.getName();
                      _builder.append(_name_1, "\t");
                    }
                  }
                }
              }
              _builder.append("\");");
              _builder.newLineIfNotEmpty();
            }
          }
          {
            for(final EDataType d : eDataTypes) {
              {
                if ((d instanceof EEnum)) {
                  _builder.append("\t");
                  _builder.append("typeGraph_");
                  String _shortName_3 = i.getShortName();
                  _builder.append(_shortName_3, "\t");
                  _builder.append(".declare(\"");
                  String _name_2 = ((EEnum)d).getName();
                  _builder.append(_name_2, "\t");
                  _builder.append(":java.lang.String\");");
                  _builder.newLineIfNotEmpty();
                } else {
                  _builder.append("\t");
                  _builder.append("typeGraph_");
                  String _shortName_4 = i.getShortName();
                  _builder.append(_shortName_4, "\t");
                  _builder.append(".declare(\"");
                  String _name_3 = d.getName();
                  _builder.append(_name_3, "\t");
                  _builder.append(":");
                  String _qualifiedName_1 = BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(d.getInstanceClass()).getQualifiedName();
                  _builder.append(_qualifiedName_1, "\t");
                  _builder.append("\");");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
          {
            for(final EAttribute a : eAttributes) {
              _builder.append("\t");
              _builder.append("typeGraph_");
              String _shortName_5 = i.getShortName();
              _builder.append(_shortName_5, "\t");
              _builder.append(".declare(\"");
              String _name_4 = a.getName();
              _builder.append(_name_4, "\t");
              _builder.append(":");
              EObject _eContainer = a.eContainer();
              String _name_5 = ((EClass) _eContainer).getName();
              _builder.append(_name_5, "\t");
              _builder.append("->");
              String _name_6 = a.getEAttributeType().getName();
              _builder.append(_name_6, "\t");
              {
                boolean _isMany = a.isMany();
                if (_isMany) {
                  {
                    boolean _isUnique = a.isUnique();
                    if (_isUnique) {
                      _builder.append("*");
                    } else {
                      _builder.append("#");
                    }
                  }
                }
              }
              _builder.append("\");");
              _builder.newLineIfNotEmpty();
            }
          }
          {
            for(final EReference a_1 : eReferences) {
              _builder.append("\t");
              _builder.append("typeGraph_");
              String _shortName_6 = i.getShortName();
              _builder.append(_shortName_6, "\t");
              _builder.append(".declare(\"");
              {
                boolean _isContainment = a_1.isContainment();
                if (_isContainment) {
                  _builder.append("@");
                }
              }
              String _name_7 = a_1.getName();
              _builder.append(_name_7, "\t");
              _builder.append(":");
              EObject _eContainer_1 = a_1.eContainer();
              String _name_8 = ((EClass) _eContainer_1).getName();
              _builder.append(_name_8, "\t");
              _builder.append("->");
              String _name_9 = a_1.getEReferenceType().getName();
              _builder.append(_name_9, "\t");
              {
                boolean _isMany_1 = a_1.isMany();
                if (_isMany_1) {
                  {
                    boolean _isUnique_1 = a_1.isUnique();
                    if (_isUnique_1) {
                      _builder.append("*");
                    } else {
                      _builder.append("#");
                    }
                  }
                }
              }
              _builder.append("\");");
              _builder.newLineIfNotEmpty();
            }
          }
          _builder.append("}");
          _builder.newLine();
          _builder.append("return typeGraph_");
          String _shortName_7 = i.getShortName();
          _builder.append(_shortName_7);
          _builder.append(";");
          _builder.newLineIfNotEmpty();
        }
      };
      this._jvmTypesBuilder.setBody(it, _client);
    };
    JvmOperation _method = this._jvmTypesBuilder.toMethod(i, _plus_1, this._typeReferenceBuilder.typeRef(TypeGraph.class), _function_1);
    this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, _method);
    EList<JvmMember> _members_2 = type.getMembers();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("load");
    String _firstUpper_1 = StringExtensions.toFirstUpper(i.getShortName());
    _builder.append(_firstUpper_1);
    _builder.append("Model");
    final Procedure1<JvmOperation> _function_2 = (JvmOperation it) -> {
      EList<JvmFormalParameter> _parameters = it.getParameters();
      JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(i, "modelUri", this._typeReferenceBuilder.typeRef(URI.class));
      this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
      EList<JvmFormalParameter> _parameters_1 = it.getParameters();
      JvmFormalParameter _parameter_1 = this._jvmTypesBuilder.toParameter(i, "metamodelUri", this._typeReferenceBuilder.typeRef(URI.class));
      this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_1, _parameter_1);
      StringConcatenationClient _client = new StringConcatenationClient() {
        @Override
        protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
          String _qualifiedName = BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(EPackage.class).getQualifiedName();
          _builder.append(_qualifiedName);
          _builder.append(" pack = ");
          String _qualifiedName_1 = BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(EcoreModelUtil.class).getQualifiedName();
          _builder.append(_qualifiedName_1);
          _builder.append(".loadPacakge(metamodelUri);");
          _builder.newLineIfNotEmpty();
          String _qualifiedName_2 = BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(EObject.class).getQualifiedName();
          _builder.append(_qualifiedName_2);
          _builder.append(" root = ");
          String _qualifiedName_3 = BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(EcoreModelUtil.class).getQualifiedName();
          _builder.append(_qualifiedName_3);
          _builder.append(".load(modelUri);");
          _builder.newLineIfNotEmpty();
          String _qualifiedName_4 = BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(TypedGraph.class).getQualifiedName();
          _builder.append(_qualifiedName_4);
          _builder.append(" graph = ");
          String _qualifiedName_5 = BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(EcoreModelUtil.class).getQualifiedName();
          _builder.append(_qualifiedName_5);
          _builder.append(".load(root, getTypeGraph_");
          String _firstUpper = StringExtensions.toFirstUpper(i.getShortName());
          _builder.append(_firstUpper);
          _builder.append("());");
          _builder.newLineIfNotEmpty();
          _builder.append("return graph;");
          _builder.newLine();
        }
      };
      this._jvmTypesBuilder.setBody(it, _client);
    };
    JvmOperation _method_1 = this._jvmTypesBuilder.toMethod(i, _builder.toString(), this._typeReferenceBuilder.typeRef(TypedGraph.class), _function_2);
    this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, _method_1);
  }
  
  protected String toJavaClassName(final URI uri) {
    try {
      String _xblockexpression = null;
      {
        final IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();
        final IJavaModel java = JavaCore.create(root);
        final IJavaProject[] projects = java.getJavaProjects();
        final ArrayList<String> srcFolders = new ArrayList<String>();
        final Consumer<IJavaProject> _function = (IJavaProject p) -> {
          try {
            final Consumer<IPackageFragmentRoot> _function_1 = (IPackageFragmentRoot r) -> {
              String _xifexpression = null;
              String _scheme = uri.scheme();
              boolean _tripleEquals = (_scheme == null);
              if (_tripleEquals) {
                _xifexpression = "/";
              } else {
                String _scheme_1 = uri.scheme();
                String _plus = (_scheme_1 + ":/");
                String _segment = uri.segment(0);
                String _plus_1 = (_plus + _segment);
                _xifexpression = (_plus_1 + "/");
              }
              String _elementName = p.getElementName();
              String _plus_2 = (_xifexpression + _elementName);
              String _plus_3 = (_plus_2 + "/");
              String _elementName_1 = r.getElementName();
              String _plus_4 = (_plus_3 + _elementName_1);
              final String path = (_plus_4 + "/");
              srcFolders.add(path);
            };
            ((List<IPackageFragmentRoot>)Conversions.doWrapArray(p.getAllPackageFragmentRoots())).forEach(_function_1);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ((List<IJavaProject>)Conversions.doWrapArray(projects)).forEach(_function);
        final String filePath = uri.toString();
        final Function1<String, Boolean> _function_1 = (String f) -> {
          return Boolean.valueOf(filePath.startsWith(f));
        };
        final String matched = IterableExtensions.<String>findFirst(srcFolders, _function_1);
        String _xifexpression = null;
        if ((matched == null)) {
          return uri.lastSegment();
        } else {
          _xifexpression = filePath.substring(matched.length()).replace("/", ".");
        }
        _xblockexpression = _xifexpression;
      }
      return _xblockexpression;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public void insertInOrder(final ArrayList<EClass> objects, final EClass o, final Set<EClass> classes) {
    boolean _contains = objects.contains(o);
    if (_contains) {
      return;
    } else {
      boolean _contains_1 = classes.contains(o);
      boolean _not = (!_contains_1);
      if (_not) {
        return;
      }
      EList<EClass> _eSuperTypes = o.getESuperTypes();
      for (final EClass c : _eSuperTypes) {
        this.insertInOrder(objects, c, classes);
      }
      objects.add(o);
    }
  }
  
  public ITreeAppendable generateXmuCode(final ITreeAppendable appendable, final XmuCoreStatement statement, final List<Pair<Integer, XmuCoreStatement>> indexedStatements, final Map<EObject, Tuple2<TupleType, Integer>> typeLiteralMap, final List<Pair<Integer, PatternTypeLiteral>> patternLiterals, final List<ContextAwareCondition> conditions, final List<ContextAwareUnidirectionalAction> actions, final BXProgram program) {
    ITreeAppendable _xblockexpression = null;
    {
      final Function1<Pair<Integer, XmuCoreStatement>, Boolean> _function = (Pair<Integer, XmuCoreStatement> it) -> {
        XmuCoreStatement _value = it.getValue();
        return Boolean.valueOf((_value == statement));
      };
      Integer _key = IterableExtensions.<Pair<Integer, XmuCoreStatement>>findFirst(indexedStatements, _function).getKey();
      final String key = ("xmu" + _key);
      ITreeAppendable _switchResult = null;
      boolean _matched = false;
      if (statement instanceof XmuCoreMatchSource) {
        _matched=true;
        final CharSequence srcType = this.typeAccessor(((XmuCoreMatchSource) statement).getSourceType(), typeLiteralMap);
        final edu.ustb.sei.mde.bxcore.dsl.bXCore.Pattern pattern = ((XmuCoreMatchSource) statement).getPattern();
        final XmuCoreStatement body = ((XmuCoreMatchSource) statement).getBody();
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("new ");
        String _qualifiedName = this._typeReferenceBuilder.typeRef(MatchSource.class).getQualifiedName();
        _builder.append(_qualifiedName);
        _builder.append("(\"");
        _builder.append(key);
        _builder.append("\", ");
        _builder.append(srcType);
        _builder.append(", ");
        CharSequence _patternAccessor = this.patternAccessor(pattern, patternLiterals);
        _builder.append(_patternAccessor);
        _builder.append(",");
        return this.generateXmuCode(appendable.append(_builder).newLine().increaseIndentation(), body, indexedStatements, typeLiteralMap, patternLiterals, conditions, actions, program).newLine().decreaseIndentation().append(")");
      }
      if (!_matched) {
        if (statement instanceof XmuCoreMatchView) {
          _matched=true;
          final CharSequence viwType = this.typeAccessor(((XmuCoreMatchView) statement).getViewType(), typeLiteralMap);
          final edu.ustb.sei.mde.bxcore.dsl.bXCore.Pattern pattern = ((XmuCoreMatchView) statement).getPattern();
          final XmuCoreStatement body = ((XmuCoreMatchView) statement).getBody();
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("new ");
          String _qualifiedName = this._typeReferenceBuilder.typeRef(MatchView.class).getQualifiedName();
          _builder.append(_qualifiedName);
          _builder.append("(\"");
          _builder.append(key);
          _builder.append("\", ");
          _builder.append(viwType);
          _builder.append(", ");
          CharSequence _patternAccessor = this.patternAccessor(pattern, patternLiterals);
          _builder.append(_patternAccessor);
          _builder.append(",");
          return this.generateXmuCode(appendable.append(_builder).newLine().increaseIndentation(), body, indexedStatements, typeLiteralMap, patternLiterals, conditions, actions, program).newLine().decreaseIndentation().append(")");
        }
      }
      if (!_matched) {
        if (statement instanceof XmuCoreExpandSource) {
          _matched=true;
          final edu.ustb.sei.mde.bxcore.dsl.bXCore.Pattern pattern = ((XmuCoreExpandSource) statement).getPattern();
          final EList<VarMapping> valMappings = ((XmuCoreExpandSource) statement).getMappings();
          final XmuCoreStatement body = ((XmuCoreExpandSource) statement).getBody();
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("new ");
          String _qualifiedName = this._typeReferenceBuilder.typeRef(ExpandSource.class).getQualifiedName();
          _builder.append(_qualifiedName);
          _builder.append("(\"");
          _builder.append(key);
          _builder.append("\", ");
          CharSequence _patternAccessor = this.patternAccessor(pattern, patternLiterals);
          _builder.append(_patternAccessor);
          _builder.append(", ");
          ITreeAppendable _generateXmuCode = this.generateXmuCode(appendable.append(_builder).newLine().increaseIndentation(), body, indexedStatements, typeLiteralMap, patternLiterals, conditions, actions, program);
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append(",");
          ITreeAppendable _newLine = _generateXmuCode.append(_builder_1).newLine();
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("new ");
          String _qualifiedName_1 = this._typeReferenceBuilder.typeRef(Tuple2.class).getQualifiedName();
          _builder_2.append(_qualifiedName_1);
          _builder_2.append("[] {");
          {
            boolean _hasElements = false;
            for(final VarMapping mapping : valMappings) {
              if (!_hasElements) {
                _hasElements = true;
              } else {
                _builder_2.appendImmediate(",", "");
              }
              String _qualifiedName_2 = this._typeReferenceBuilder.typeRef(Tuple2.class).getQualifiedName();
              _builder_2.append(_qualifiedName_2);
              _builder_2.append(".make(\"");
              String _from = mapping.getFrom();
              _builder_2.append(_from);
              _builder_2.append("\", \"");
              String _to = mapping.getTo();
              _builder_2.append(_to);
              _builder_2.append("\")");
            }
          }
          _builder_2.append("}");
          return _newLine.append(_builder_2).newLine().decreaseIndentation().append(")");
        }
      }
      if (!_matched) {
        if (statement instanceof XmuCoreExpandView) {
          _matched=true;
          final edu.ustb.sei.mde.bxcore.dsl.bXCore.Pattern pattern = ((XmuCoreExpandView) statement).getPattern();
          final EList<VarMapping> valMappings = ((XmuCoreExpandView) statement).getMappings();
          final XmuCoreStatement body = ((XmuCoreExpandView) statement).getBody();
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("new ");
          String _qualifiedName = this._typeReferenceBuilder.typeRef(ExpandView.class).getQualifiedName();
          _builder.append(_qualifiedName);
          _builder.append("(\"");
          _builder.append(key);
          _builder.append("\", ");
          CharSequence _patternAccessor = this.patternAccessor(pattern, patternLiterals);
          _builder.append(_patternAccessor);
          _builder.append(", ");
          ITreeAppendable _generateXmuCode = this.generateXmuCode(appendable.append(_builder).newLine().increaseIndentation(), body, indexedStatements, typeLiteralMap, patternLiterals, conditions, actions, program);
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append(",");
          ITreeAppendable _newLine = _generateXmuCode.append(_builder_1).newLine();
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("new ");
          String _qualifiedName_1 = this._typeReferenceBuilder.typeRef(Tuple2.class).getQualifiedName();
          _builder_2.append(_qualifiedName_1);
          _builder_2.append("[] {");
          {
            boolean _hasElements = false;
            for(final VarMapping mapping : valMappings) {
              if (!_hasElements) {
                _hasElements = true;
              } else {
                _builder_2.appendImmediate(",", "");
              }
              String _qualifiedName_2 = this._typeReferenceBuilder.typeRef(Tuple2.class).getQualifiedName();
              _builder_2.append(_qualifiedName_2);
              _builder_2.append(".make(\"");
              String _from = mapping.getFrom();
              _builder_2.append(_from);
              _builder_2.append("\", \"");
              String _to = mapping.getTo();
              _builder_2.append(_to);
              _builder_2.append("\")");
            }
          }
          _builder_2.append("}");
          return _newLine.append(_builder_2).newLine().decreaseIndentation().append(")");
        }
      }
      if (!_matched) {
        if (statement instanceof XmuCoreParallelComposition) {
          _matched=true;
          final CharSequence srcType = this.typeAccessor(((XmuCoreParallelComposition) statement).getSourceType(), typeLiteralMap);
          final CharSequence viwType = this.typeAccessor(((XmuCoreParallelComposition) statement).getViewType(), typeLiteralMap);
          final EList<XmuCoreCompositionChildStatement> bodies = ((XmuCoreParallelComposition) statement).getBodies();
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("new ");
          String _qualifiedName = this._typeReferenceBuilder.typeRef(ParallelComposition.class).getQualifiedName();
          _builder.append(_qualifiedName);
          _builder.append("(\"");
          _builder.append(key);
          _builder.append("\", ");
          _builder.append(srcType);
          _builder.append(", ");
          _builder.append(viwType);
          _builder.append(", new ");
          String _qualifiedName_1 = this._typeReferenceBuilder.typeRef(XmuCore.class).getQualifiedName();
          _builder.append(_qualifiedName_1);
          _builder.append("[] {");
          ITreeAppendable scope = appendable.append(_builder).newLine().increaseIndentation();
          for (final XmuCoreCompositionChildStatement b : bodies) {
            ITreeAppendable _xifexpression = null;
            int _indexOf = bodies.indexOf(b);
            boolean _tripleNotEquals = (_indexOf != 0);
            if (_tripleNotEquals) {
              _xifexpression = scope.append(",").newLine();
            } else {
              _xifexpression = scope;
            }
            scope = this.generateXmuCode(_xifexpression, b, indexedStatements, typeLiteralMap, patternLiterals, conditions, actions, program);
          }
          return scope.newLine().decreaseIndentation().append("})");
        }
      }
      if (!_matched) {
        if (statement instanceof XmuCoreFork) {
          _matched=true;
          final CharSequence srcType = this.typeAccessor(((XmuCoreFork) statement).getSourceType(), typeLiteralMap);
          final CharSequence viwType = this.typeAccessor(((XmuCoreFork) statement).getViewType(), typeLiteralMap);
          final EList<XmuCoreForkBranch> forks = ((XmuCoreFork) statement).getForks();
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("new ");
          String _qualifiedName = this._typeReferenceBuilder.typeRef(Fork.class).getQualifiedName();
          _builder.append(_qualifiedName);
          _builder.append("(\"");
          _builder.append(key);
          _builder.append("\", ");
          _builder.append(srcType);
          _builder.append(", ");
          _builder.append(viwType);
          _builder.append(", new ");
          String _qualifiedName_1 = this._typeReferenceBuilder.typeRef(Tuple3.class).getQualifiedName();
          _builder.append(_qualifiedName_1);
          _builder.append("[] {");
          ITreeAppendable scope = appendable.append(_builder).newLine().increaseIndentation();
          for (final XmuCoreForkBranch f : forks) {
            ITreeAppendable _xifexpression = null;
            int _indexOf = forks.indexOf(f);
            boolean _tripleNotEquals = (_indexOf != 0);
            if (_tripleNotEquals) {
              _xifexpression = scope.append(",").newLine();
            } else {
              _xifexpression = scope;
            }
            StringConcatenation _builder_1 = new StringConcatenation();
            String _qualifiedName_2 = this._typeReferenceBuilder.typeRef(Tuple3.class).getQualifiedName();
            _builder_1.append(_qualifiedName_2);
            _builder_1.append(".make(");
            ITreeAppendable _append = _xifexpression.append(_builder_1);
            StringConcatenation _builder_2 = new StringConcatenation();
            _builder_2.append("new ");
            String _qualifiedName_3 = this._typeReferenceBuilder.typeRef(Tuple2.class).getQualifiedName();
            _builder_2.append(_qualifiedName_3);
            _builder_2.append("[] {");
            {
              EList<VarMapping> _sourceMappings = f.getSourceMappings();
              boolean _hasElements = false;
              for(final VarMapping m : _sourceMappings) {
                if (!_hasElements) {
                  _hasElements = true;
                } else {
                  _builder_2.appendImmediate(",", "");
                }
                String _qualifiedName_4 = this._typeReferenceBuilder.typeRef(Tuple2.class).getQualifiedName();
                _builder_2.append(_qualifiedName_4);
                _builder_2.append(".make(\"");
                String _from = m.getFrom();
                _builder_2.append(_from);
                _builder_2.append("\",\"");
                String _to = m.getTo();
                _builder_2.append(_to);
                _builder_2.append("\")");
              }
            }
            _builder_2.append("}, ");
            ITreeAppendable _append_1 = _append.append(_builder_2);
            StringConcatenation _builder_3 = new StringConcatenation();
            _builder_3.append("new ");
            String _qualifiedName_5 = this._typeReferenceBuilder.typeRef(Tuple2.class).getQualifiedName();
            _builder_3.append(_qualifiedName_5);
            _builder_3.append("[] {");
            {
              EList<VarMapping> _viewMappings = f.getViewMappings();
              boolean _hasElements_1 = false;
              for(final VarMapping m_1 : _viewMappings) {
                if (!_hasElements_1) {
                  _hasElements_1 = true;
                } else {
                  _builder_3.appendImmediate(",", "");
                }
                String _qualifiedName_6 = this._typeReferenceBuilder.typeRef(Tuple2.class).getQualifiedName();
                _builder_3.append(_qualifiedName_6);
                _builder_3.append(".make(\"");
                String _from_1 = m_1.getFrom();
                _builder_3.append(_from_1);
                _builder_3.append("\",\"");
                String _to_1 = m_1.getTo();
                _builder_3.append(_to_1);
                _builder_3.append("\")");
              }
            }
            _builder_3.append("}, ");
            scope = this.generateXmuCode(_append_1.append(_builder_3), f.getBody(), indexedStatements, typeLiteralMap, patternLiterals, conditions, actions, program).append(")");
          }
          return scope.newLine().decreaseIndentation().append("})");
        }
      }
      if (!_matched) {
        if (statement instanceof XmuCoreSwitch) {
          _matched=true;
          final CharSequence srcType = this.typeAccessor(((XmuCoreSwitch) statement).getSourceType(), typeLiteralMap);
          final CharSequence viwType = this.typeAccessor(((XmuCoreSwitch) statement).getViewType(), typeLiteralMap);
          final EList<XmuCoreSwitchBranch> branches = ((XmuCoreSwitch) statement).getBranches();
          final EList<XmuCoreSwitchAdaption> adaptions = ((XmuCoreSwitch) statement).getAdaptions();
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("new ");
          String _qualifiedName = this._typeReferenceBuilder.typeRef(Switch.class).getQualifiedName();
          _builder.append(_qualifiedName);
          _builder.append("(\"");
          _builder.append(key);
          _builder.append("\", ");
          _builder.append(srcType);
          _builder.append(", ");
          _builder.append(viwType);
          _builder.append(", ");
          ITreeAppendable scope = appendable.append(_builder).newLine().increaseIndentation();
          StringConcatenation _builder_1 = new StringConcatenation();
          String _qualifiedName_1 = this._typeReferenceBuilder.typeRef(Arrays.class).getQualifiedName();
          _builder_1.append(_qualifiedName_1);
          _builder_1.append(".asList(");
          scope = scope.append(_builder_1).newLine().increaseIndentation();
          for (final XmuCoreSwitchBranch b : branches) {
            {
              XmuCoreSwitchBranch _get = branches.get(0);
              boolean _tripleNotEquals = (_get != b);
              if (_tripleNotEquals) {
                scope = scope.append(", ");
              }
              StringConcatenation _builder_2 = new StringConcatenation();
              String _qualifiedName_2 = this._typeReferenceBuilder.typeRef(Tuple3.class).getQualifiedName();
              _builder_2.append(_qualifiedName_2);
              _builder_2.append(".make(new Condition");
              int _indexOf = conditions.indexOf(b.getCondition());
              _builder_2.append(_indexOf);
              _builder_2.append("(), ");
              ITreeAppendable _generateXmuCode = this.generateXmuCode(scope.append(_builder_2).newLine().increaseIndentation(), b.getAction(), indexedStatements, typeLiteralMap, patternLiterals, conditions, actions, program);
              StringConcatenation _builder_3 = new StringConcatenation();
              _builder_3.append(", (");
              String _qualifiedName_3 = this._typeReferenceBuilder.typeRef(Function.class, this._typeReferenceBuilder.typeRef(SourceType.class), this._typeReferenceBuilder.typeRef(Boolean.class)).getQualifiedName();
              _builder_3.append(_qualifiedName_3);
              _builder_3.append(") null)");
              scope = _generateXmuCode.append(_builder_3).newLine().decreaseIndentation();
            }
          }
          ITreeAppendable _decreaseIndentation = scope.append("),").newLine().decreaseIndentation();
          StringConcatenation _builder_2 = new StringConcatenation();
          String _qualifiedName_2 = this._typeReferenceBuilder.typeRef(Arrays.class).getQualifiedName();
          _builder_2.append(_qualifiedName_2);
          _builder_2.append(".asList(");
          scope = _decreaseIndentation.append(_builder_2);
          for (final XmuCoreSwitchAdaption a : adaptions) {
            {
              XmuCoreSwitchAdaption _get = adaptions.get(0);
              boolean _tripleNotEquals = (_get != a);
              if (_tripleNotEquals) {
                scope = scope.append(", ");
              }
              StringConcatenation _builder_3 = new StringConcatenation();
              String _qualifiedName_3 = this._typeReferenceBuilder.typeRef(Tuple2.class).getQualifiedName();
              _builder_3.append(_qualifiedName_3);
              _builder_3.append(".make(new Condition");
              int _indexOf = conditions.indexOf(a.getCondition());
              _builder_3.append(_indexOf);
              _builder_3.append("(), ");
              ITreeAppendable _increaseIndentation = scope.append(_builder_3).newLine().increaseIndentation();
              StringConcatenation _builder_4 = new StringConcatenation();
              _builder_4.append("new UnidirectionalAction");
              int _indexOf_1 = actions.indexOf(a.getAction());
              _builder_4.append(_indexOf_1);
              _builder_4.append("())");
              scope = _increaseIndentation.append(_builder_4).newLine().decreaseIndentation();
            }
          }
          scope = scope.append("))").newLine().decreaseIndentation();
          return scope;
        }
      }
      if (!_matched) {
        if (statement instanceof XmuCoreGraphReplace) {
          _matched=true;
          ITreeAppendable _xblockexpression_1 = null;
          {
            final CharSequence srcPat = this.patternAccessor(((XmuCoreGraphReplace) statement).getSource(), patternLiterals);
            final CharSequence viwPat = this.patternAccessor(((XmuCoreGraphReplace) statement).getView(), patternLiterals);
            final EList<Conversion> conversions = ((XmuCoreGraphReplace) statement).getConversions();
            StringConcatenation _builder = new StringConcatenation();
            _builder.append("new ");
            String _qualifiedName = this._typeReferenceBuilder.typeRef(GraphReplace.class).getQualifiedName();
            _builder.append(_qualifiedName);
            _builder.append("(\"");
            _builder.append(key);
            _builder.append("\", ");
            _builder.append(srcPat);
            _builder.append(", ");
            _builder.append(viwPat);
            _builder.append(", new ");
            String _qualifiedName_1 = this._typeReferenceBuilder.typeRef(Tuple3.class).getQualifiedName();
            _builder.append(_qualifiedName_1);
            _builder.append("[]{");
            {
              boolean _hasElements = false;
              for(final Conversion conv : conversions) {
                if (!_hasElements) {
                  _hasElements = true;
                } else {
                  _builder.appendImmediate(",", "");
                }
                String _qualifiedName_2 = this._typeReferenceBuilder.typeRef(Tuple3.class).getQualifiedName();
                _builder.append(_qualifiedName_2);
                _builder.append(".make(new String[]{");
                {
                  EList<String> _source = conv.getSource();
                  boolean _hasElements_1 = false;
                  for(final String sk : _source) {
                    if (!_hasElements_1) {
                      _hasElements_1 = true;
                    } else {
                      _builder.appendImmediate(",", "");
                    }
                    _builder.append("\"");
                    _builder.append(sk);
                    _builder.append("\"");
                  }
                }
                _builder.append("}, new String[]{");
                {
                  EList<String> _view = conv.getView();
                  boolean _hasElements_2 = false;
                  for(final String vk : _view) {
                    if (!_hasElements_2) {
                      _hasElements_2 = true;
                    } else {
                      _builder.appendImmediate(",", "");
                    }
                    _builder.append("\"");
                    _builder.append(vk);
                    _builder.append("\"");
                  }
                }
                _builder.append("}, ");
                CharSequence _generateBiGuLCode = this.generateBiGuLCode(conv.getBigul());
                _builder.append(_generateBiGuLCode);
                _builder.append(")");
              }
            }
            _builder.append("})");
            _xblockexpression_1 = appendable.append(_builder).newLine();
          }
          _switchResult = _xblockexpression_1;
        }
      }
      if (!_matched) {
        if (statement instanceof XmuCoreAlign) {
          _matched=true;
          ITreeAppendable _xblockexpression_1 = null;
          {
            final CharSequence srcType = this.typeAccessor(((XmuCoreAlign) statement).getSourceType(), typeLiteralMap);
            final CharSequence viwType = this.typeAccessor(((XmuCoreAlign) statement).getViewType(), typeLiteralMap);
            final CharSequence srcPat = this.patternAccessor(((XmuCoreAlign) statement).getSourcePattern(), patternLiterals);
            final CharSequence viwPat = this.patternAccessor(((XmuCoreAlign) statement).getViewPattern(), patternLiterals);
            final ContextAwareCondition cond = ((XmuCoreAlign) statement).getAlignment();
            final XmuCoreStatement match = ((XmuCoreAlign) statement).getMatch();
            final ContextAwareUnidirectionalAction unmatchS = ((XmuCoreAlign) statement).getUnmatchS();
            final ContextAwareUnidirectionalAction unmatchV = ((XmuCoreAlign) statement).getUnmatchV();
            StringConcatenation _builder = new StringConcatenation();
            _builder.append("new ");
            String _qualifiedName = this._typeReferenceBuilder.typeRef(Align.class).getQualifiedName();
            _builder.append(_qualifiedName);
            _builder.append("(\"");
            _builder.append(key);
            _builder.append("\", ");
            _builder.append(srcType);
            _builder.append(", ");
            _builder.append(viwType);
            _builder.append(", ");
            _builder.append(srcPat);
            _builder.append(", ");
            _builder.append(viwPat);
            _builder.append(", new Condition");
            int _indexOf = conditions.indexOf(cond);
            _builder.append(_indexOf);
            _builder.append("(), ");
            ITreeAppendable _generateXmuCode = this.generateXmuCode(appendable.append(_builder).newLine().increaseIndentation(), match, indexedStatements, typeLiteralMap, patternLiterals, conditions, actions, program);
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append(", new UnidirectionalAction");
            int _indexOf_1 = actions.indexOf(unmatchS);
            _builder_1.append(_indexOf_1);
            _builder_1.append("(), new UnidirectionalAction");
            int _indexOf_2 = actions.indexOf(unmatchV);
            _builder_1.append(_indexOf_2);
            _builder_1.append("())");
            _xblockexpression_1 = _generateXmuCode.append(_builder_1);
          }
          _switchResult = _xblockexpression_1;
        }
      }
      if (!_matched) {
        if (statement instanceof XmuCoreFunctionCall) {
          _matched=true;
          ITreeAppendable _xblockexpression_1 = null;
          {
            final CharSequence st = this.typeAccessor(((XmuCoreFunctionCall) statement).getTarget().getSourceType(), typeLiteralMap);
            final CharSequence vt = this.typeAccessor(((XmuCoreFunctionCall) statement).getTarget().getViewType(), typeLiteralMap);
            final EList<VarMapping> sk = ((XmuCoreFunctionCall) statement).getSourceMappings();
            final EList<VarMapping> vk = ((XmuCoreFunctionCall) statement).getViewMappings();
            StringConcatenation _builder = new StringConcatenation();
            _builder.append("new ");
            String _qualifiedName = this._typeReferenceBuilder.typeRef(Invocation.class).getQualifiedName();
            _builder.append(_qualifiedName);
            _builder.append("(\"");
            _builder.append(key);
            _builder.append("\", ");
            _builder.append(st);
            _builder.append(", ");
            _builder.append(vt);
            _builder.append(", new ");
            String _qualifiedName_1 = this._typeReferenceBuilder.typeRef(Tuple2.class).getQualifiedName();
            _builder.append(_qualifiedName_1);
            _builder.append("[]{");
            {
              boolean _hasElements = false;
              for(final VarMapping m : sk) {
                if (!_hasElements) {
                  _hasElements = true;
                } else {
                  _builder.appendImmediate(",", "");
                }
                String _qualifiedName_2 = this._typeReferenceBuilder.typeRef(Tuple2.class).getQualifiedName();
                _builder.append(_qualifiedName_2);
                _builder.append(".make(\"");
                String _from = m.getFrom();
                _builder.append(_from);
                _builder.append("\",\"");
                String _to = m.getTo();
                _builder.append(_to);
                _builder.append("\")");
              }
            }
            _builder.append("}, new ");
            String _qualifiedName_3 = this._typeReferenceBuilder.typeRef(Tuple2.class).getQualifiedName();
            _builder.append(_qualifiedName_3);
            _builder.append("[]{");
            {
              boolean _hasElements_1 = false;
              for(final VarMapping m_1 : vk) {
                if (!_hasElements_1) {
                  _hasElements_1 = true;
                } else {
                  _builder.appendImmediate(",", "");
                }
                String _qualifiedName_4 = this._typeReferenceBuilder.typeRef(Tuple2.class).getQualifiedName();
                _builder.append(_qualifiedName_4);
                _builder.append(".make(\"");
                String _from_1 = m_1.getFrom();
                _builder.append(_from_1);
                _builder.append("\",\"");
                String _to_1 = m_1.getTo();
                _builder.append(_to_1);
                _builder.append("\")");
              }
            }
            _builder.append("},()->{try {return getXmu_");
            String _firstUpper = StringExtensions.toFirstUpper(((XmuCoreFunctionCall) statement).getTarget().getName());
            _builder.append(_firstUpper);
            _builder.append("();} catch(Exception e){return null;}})");
            _xblockexpression_1 = appendable.append(_builder);
          }
          _switchResult = _xblockexpression_1;
        }
      }
      if (!_matched) {
        if (statement instanceof XmuCoreIndex) {
          _matched=true;
          final EList<IndexPart> parts = ((XmuCoreIndex) statement).getParts();
          final XmuCoreStatement body = ((XmuCoreIndex) statement).getBody();
          StringConcatenation _builder = new StringConcatenation();
          {
            for(final IndexPart part : parts) {
              _builder.append("new ");
              String _qualifiedName = this._typeReferenceBuilder.typeRef(Indexing.class).getQualifiedName();
              _builder.append(_qualifiedName);
              _builder.append("(getIndex_");
              String _firstUpper = StringExtensions.toFirstUpper(part.getSignature().getName());
              _builder.append(_firstUpper);
              _builder.append("(), new String[]{");
              {
                EList<String> _sourceKeys = part.getSourceKeys();
                boolean _hasElements = false;
                for(final String sk : _sourceKeys) {
                  if (!_hasElements) {
                    _hasElements = true;
                  } else {
                    _builder.appendImmediate(",", "");
                  }
                  _builder.append("\"");
                  _builder.append(sk);
                  _builder.append("\"");
                }
              }
              _builder.append("}, new String[]{");
              {
                EList<String> _viewKeys = part.getViewKeys();
                boolean _hasElements_1 = false;
                for(final String vk : _viewKeys) {
                  if (!_hasElements_1) {
                    _hasElements_1 = true;
                  } else {
                    _builder.appendImmediate(",", "");
                  }
                  _builder.append("\"");
                  _builder.append(vk);
                  _builder.append("\"");
                }
              }
              _builder.append("}, ");
            }
          }
          ITreeAppendable scope = appendable.append(_builder);
          scope = this.generateXmuCode(scope, body, indexedStatements, typeLiteralMap, patternLiterals, conditions, actions, program);
          StringConcatenation _builder_1 = new StringConcatenation();
          {
            for(final IndexPart part_1 : parts) {
              _builder_1.append(")");
            }
          }
          return scope.append(_builder_1);
        }
      }
      if (!_matched) {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("/* undefined */");
        _switchResult = appendable.append(_builder);
      }
      _xblockexpression = _switchResult;
    }
    return _xblockexpression;
  }
  
  public CharSequence generateBiGuLCode(final BiGULStatement statement) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (statement instanceof BiGULReplace) {
      _matched=true;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("new ");
      String _qualifiedName = this._typeReferenceBuilder.typeRef(Replace.class, this._jvmTypesBuilder.addArrayTypeDimension(this._typeReferenceBuilder.typeRef(Object.class))).getQualifiedName();
      _builder.append(_qualifiedName);
      _builder.append("()");
      _switchResult = _builder;
    }
    if (!_matched) {
      if (statement instanceof BiGULSkip) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("new ");
        String _qualifiedName = this._typeReferenceBuilder.typeRef(Skip.class, this._jvmTypesBuilder.addArrayTypeDimension(this._typeReferenceBuilder.typeRef(Object.class))).getQualifiedName();
        _builder.append(_qualifiedName);
        _builder.append("()");
        _switchResult = _builder;
      }
    }
    return _switchResult;
  }
  
  protected CharSequence patternAccessor(final edu.ustb.sei.mde.bxcore.dsl.bXCore.Pattern pattern, final List<Pair<Integer, PatternTypeLiteral>> pairs) {
    String _xifexpression = null;
    if ((pattern instanceof PatternTypeLiteral)) {
      final Function1<Pair<Integer, PatternTypeLiteral>, Boolean> _function = (Pair<Integer, PatternTypeLiteral> p) -> {
        PatternTypeLiteral _value = p.getValue();
        return Boolean.valueOf((_value == pattern));
      };
      Integer _key = IterableExtensions.<Pair<Integer, PatternTypeLiteral>>findFirst(pairs, _function).getKey();
      String _plus = ("getPattern_" + _key);
      _xifexpression = (_plus + "()");
    } else {
      String _name = ((PatternDefinitionReference) pattern).getPattern().getName();
      _xifexpression = (_name + "()");
    }
    return _xifexpression;
  }
  
  protected CharSequence typeAccessor(final Pattern pat, final Map<EObject, Pair<TupleType, Integer>> typeLiteralMap) {
    CharSequence _xifexpression = null;
    if ((pat instanceof PatternTypeLiteral)) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("getType_");
      Integer _value = typeLiteralMap.get(pat).getValue();
      _builder.append(_value);
      _builder.append("()");
      _xifexpression = _builder;
    } else {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("getType_");
      String _firstUpper = StringExtensions.toFirstUpper(((PatternDefinitionReference) pat).getPattern().getName());
      _builder_1.append(_firstUpper);
      _builder_1.append("()");
      _xifexpression = _builder_1;
    }
    return _xifexpression;
  }
  
  protected CharSequence typeAccessor(final ContextTypeRef type, final Map<EObject, Tuple2<TupleType, Integer>> typeLiteralMap) {
    CharSequence _xifexpression = null;
    if ((type instanceof DefinedContextTypeRef)) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("getType_");
      String _firstUpper = StringExtensions.toFirstUpper(((DefinedContextTypeRef)type).getType().getName());
      _builder.append(_firstUpper);
      _builder.append("()");
      _xifexpression = _builder;
    } else {
      CharSequence _xifexpression_1 = null;
      if ((type instanceof TupleTypeLiteral)) {
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("getType_");
        _builder_1.append(typeLiteralMap.get(type).second);
        _builder_1.append("()");
        _xifexpression_1 = _builder_1;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  protected boolean generateTypeLiteral(final JvmGenericType owner, final TupleType tuple, final int id, final BXProgram program) {
    boolean _xblockexpression = false;
    {
      EList<JvmMember> _members = owner.getMembers();
      final Procedure1<JvmField> _function = (JvmField it) -> {
        it.setVisibility(JvmVisibility.PRIVATE);
      };
      JvmField _field = this._jvmTypesBuilder.toField(program, ("type_" + Integer.valueOf(id)), this._typeReferenceBuilder.typeRef(ContextType.class), _function);
      this._jvmTypesBuilder.<JvmField>operator_add(_members, _field);
      final ImportSection typeGraph = tuple.importSection;
      EList<JvmMember> _members_1 = owner.getMembers();
      final Procedure1<JvmOperation> _function_1 = (JvmOperation it) -> {
        it.setVisibility(JvmVisibility.PUBLIC);
        final List<Tuple2<String, Object>> elements = tuple.tuples;
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("if(type_");
            _builder.append(id);
            _builder.append("==null) {");
            _builder.newLineIfNotEmpty();
            {
              boolean _isEmpty = elements.isEmpty();
              if (_isEmpty) {
                _builder.append("\t");
                _builder.append("type_");
                _builder.append(id, "\t");
                _builder.append(" = ");
                String _qualifiedName = BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(ContextType.class).getQualifiedName();
                _builder.append(_qualifiedName, "\t");
                _builder.append(".EMPTY_TYPE;");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("\t");
                String _qualifiedName_1 = BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(TypeGraph.class).getQualifiedName();
                _builder.append(_qualifiedName_1, "\t");
                _builder.append(" typeGraph = getTypeGraph_");
                String _firstUpper = StringExtensions.toFirstUpper(typeGraph.getShortName());
                _builder.append(_firstUpper, "\t");
                _builder.append("();");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("type_");
                _builder.append(id, "\t");
                _builder.append(" = new ");
                String _qualifiedName_2 = BXCoreJvmModelInferrer.this._typeReferenceBuilder.typeRef(ContextType.class).getQualifiedName();
                _builder.append(_qualifiedName_2, "\t");
                _builder.append("();");
                _builder.newLineIfNotEmpty();
                {
                  for(final Tuple2<String, Object> v : elements) {
                    _builder.append("\t");
                    _builder.append("Object ");
                    _builder.append(v.first, "\t");
                    _builder.append("_type = typeGraph.");
                    {
                      if ((v.second instanceof EClassifier)) {
                        {
                          if ((v.second instanceof EClass)) {
                            _builder.append("getTypeNode");
                          } else {
                            _builder.append("getDataTypeNode");
                          }
                        }
                        _builder.append("(\"");
                        String _name = ((EClassifier) v.second).getName();
                        _builder.append(_name, "\t");
                        _builder.append("\")");
                      } else {
                        if ((v.second instanceof EStructuralFeature)) {
                          {
                            if ((v.second instanceof EReference)) {
                              _builder.append("getTypeEdge");
                            } else {
                              _builder.append("getPropertyEdge");
                            }
                          }
                          _builder.append("(typeGraph.getTypeNode(\"");
                          String _name_1 = ((EStructuralFeature) v.second).getEContainingClass().getName();
                          _builder.append(_name_1, "\t");
                          _builder.append("\"),\"");
                          String _name_2 = ((EStructuralFeature) v.second).getName();
                          _builder.append(_name_2, "\t");
                          _builder.append("\")");
                        } else {
                          _builder.append("/* ERROR ");
                          _builder.append(v.second, "\t");
                          _builder.append(" */");
                        }
                      }
                    }
                    _builder.append(";");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("type_");
                    _builder.append(id, "\t");
                    _builder.append(".addField(\"");
                    _builder.append(v.first, "\t");
                    _builder.append("\", ");
                    _builder.append(v.first, "\t");
                    _builder.append("_type);");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
            _builder.append("}");
            _builder.newLine();
            _builder.append("return type_");
            _builder.append(id);
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        };
        this._jvmTypesBuilder.setBody(it, _client);
      };
      JvmOperation _method = this._jvmTypesBuilder.toMethod(program, ("getType_" + Integer.valueOf(id)), this._typeReferenceBuilder.typeRef(ContextType.class), _function_1);
      _xblockexpression = this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, _method);
    }
    return _xblockexpression;
  }
  
  protected void generateTypeDefinition(final JvmGenericType owner, final TypeDefinition typeDef, final Map<EObject, Tuple2<TupleType, Integer>> typeLiteralMap, final List<Pair<Integer, PatternTypeLiteral>> patternLiterals, final BXProgram program) {
    final TypeLiteral literal = typeDef.getLiteral();
    EList<JvmMember> _members = owner.getMembers();
    String _firstUpper = StringExtensions.toFirstUpper(typeDef.getName());
    String _plus = ("getType_" + _firstUpper);
    final Procedure1<JvmOperation> _function = (JvmOperation it) -> {
      it.setVisibility(JvmVisibility.PUBLIC);
      StringConcatenationClient _client = new StringConcatenationClient() {
        @Override
        protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
          _builder.append("return getType_");
          _builder.append(typeLiteralMap.get(literal).second);
          _builder.append("();");
        }
      };
      this._jvmTypesBuilder.setBody(it, _client);
    };
    JvmOperation _method = this._jvmTypesBuilder.toMethod(typeDef, _plus, this._typeReferenceBuilder.typeRef(ContextType.class), _function);
    this._jvmTypesBuilder.<JvmOperation>operator_add(_members, _method);
    TypeLiteral _literal = typeDef.getLiteral();
    if ((_literal instanceof PatternTypeLiteral)) {
      EList<JvmMember> _members_1 = owner.getMembers();
      final Procedure1<JvmOperation> _function_1 = (JvmOperation it) -> {
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("return getPattern_");
            final Function1<Pair<Integer, PatternTypeLiteral>, Boolean> _function = (Pair<Integer, PatternTypeLiteral> it_1) -> {
              PatternTypeLiteral _value = it_1.getValue();
              TypeLiteral _literal = typeDef.getLiteral();
              return Boolean.valueOf((_value == _literal));
            };
            Integer _key = IterableExtensions.<Pair<Integer, PatternTypeLiteral>>findFirst(patternLiterals, _function).getKey();
            _builder.append(_key);
            _builder.append("();");
          }
        };
        this._jvmTypesBuilder.setBody(it, _client);
      };
      JvmOperation _method_1 = this._jvmTypesBuilder.toMethod(typeDef, typeDef.getName(), this._typeReferenceBuilder.typeRef(Pattern.class), _function_1);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, _method_1);
    }
  }
  
  protected HashMap<EObject, Tuple2<TupleType, Integer>> groupTypeLiterals(final BXProgram program) {
    final Function1<EObject, Boolean> _function = (EObject e) -> {
      return Boolean.valueOf((e instanceof TypeLiteral));
    };
    final Function1<EObject, Pair<EObject, TupleType>> _function_1 = (EObject it) -> {
      TupleType _make = TupleType.make(((TypeLiteral) it));
      return Pair.<EObject, TupleType>of(it, _make);
    };
    final List<Pair<EObject, TupleType>> literals = IteratorExtensions.<Pair<EObject, TupleType>>toList(IteratorExtensions.<EObject, Pair<EObject, TupleType>>map(IteratorExtensions.<EObject>filter(program.eAllContents(), _function), _function_1));
    final Function1<Pair<EObject, TupleType>, TupleType> _function_2 = (Pair<EObject, TupleType> it) -> {
      return it.getValue();
    };
    final Map<TupleType, List<Pair<EObject, TupleType>>> groups = IterableExtensions.<TupleType, Pair<EObject, TupleType>>groupBy(literals, _function_2);
    final HashMap<EObject, Tuple2<TupleType, Integer>> result = new HashMap<EObject, Tuple2<TupleType, Integer>>();
    final Procedure3<TupleType, List<Pair<EObject, TupleType>>, Integer> _function_3 = (TupleType k, List<Pair<EObject, TupleType>> v, Integer id) -> {
      final Tuple2<TupleType, Integer> pair = Tuple2.<TupleType, Integer>make(k, id);
      final Consumer<Pair<EObject, TupleType>> _function_4 = (Pair<EObject, TupleType> p) -> {
        result.put(p.getKey(), pair);
      };
      v.forEach(_function_4);
    };
    MapExtensions.<TupleType, List<Pair<EObject, TupleType>>>forEach(groups, _function_3);
    return result;
  }
  
  public void infer(final EObject element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    if (element instanceof BXProgram) {
      _infer((BXProgram)element, acceptor, isPreIndexingPhase);
      return;
    } else if (element != null) {
      _infer(element, acceptor, isPreIndexingPhase);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(element, acceptor, isPreIndexingPhase).toString());
    }
  }
}
