/**
 * generated by Xtext 2.14.0
 */
package edu.ustb.sei.mde.bxcore.dsl.scoping;

import edu.ustb.sei.mde.bxcore.dsl.bXCore.BXCorePackage;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.BXFunctionDefinition;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.BXProgram;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.Definition;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.ExpressionConversion;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.FeatureTypeRef;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.ImportSection;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.OrderedTupleTypeLiteral;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternDefinition;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternNode;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternTypeLiteral;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.TypeDefinition;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.UnorderedTupleTypeLiteral;
import edu.ustb.sei.mde.bxcore.dsl.scoping.AbstractBXCoreScopeProvider;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.SimpleScope;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class BXCoreScopeProvider extends AbstractBXCoreScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    IScope _xblockexpression = null;
    {
      if ((((reference == BXCorePackage.Literals.UNORDERED_TUPLE_TYPE_LITERAL__SOURCE) || 
        (reference == BXCorePackage.Literals.ORDERED_TUPLE_TYPE_LITERAL__SOURCE)) || 
        (reference == BXCorePackage.Literals.PATTERN_TYPE_LITERAL__SOURCE))) {
        final Function1<ImportSection, IEObjectDescription> _function = (ImportSection it) -> {
          return EObjectDescription.create(it.getShortName(), it);
        };
        List<IEObjectDescription> _list = IterableExtensions.<IEObjectDescription>toList(ListExtensions.<ImportSection, IEObjectDescription>map(this.getRoot(context).getImports(), _function));
        return new SimpleScope(_list);
      } else {
        if ((reference == BXCorePackage.Literals.TYPE_REF__TYPE)) {
          final ImportSection importSection = this.getImportSection(context);
          return this.collectTypes(importSection);
        } else {
          if ((reference == BXCorePackage.Literals.FEATURE_TYPE_REF__FEATURE)) {
            EClassifier _type = ((FeatureTypeRef) context).getType();
            final EClass type = ((EClass) _type);
            if ((type == null)) {
              return SimpleScope.NULLSCOPE;
            } else {
              boolean _eIsProxy = type.eIsProxy();
              boolean _not = (!_eIsProxy);
              if (_not) {
                final ArrayList<IEObjectDescription> objects = new ArrayList<IEObjectDescription>();
                final Consumer<EStructuralFeature> _function_1 = (EStructuralFeature i) -> {
                  objects.add(EObjectDescription.create(i.getName(), i));
                };
                type.getEAllStructuralFeatures().forEach(_function_1);
                return new SimpleScope(objects);
              }
            }
          } else {
            if ((reference == BXCorePackage.Literals.PATTERN_NODE__TYPE)) {
              final ImportSection importSection_1 = this.getImportSection(context);
              return this.collectTypes(importSection_1);
            } else {
              if ((reference == BXCorePackage.Literals.PATTERN_EDGE__FEATURE)) {
                final PatternNode node = this.getPatternNode(context);
                EClassifier _type_1 = node.getType();
                if ((_type_1 instanceof EClass)) {
                  EClassifier _type_2 = node.getType();
                  final Function1<EStructuralFeature, IEObjectDescription> _function_2 = (EStructuralFeature f) -> {
                    return EObjectDescription.create(f.getName(), f);
                  };
                  List<IEObjectDescription> _list_1 = IterableExtensions.<IEObjectDescription>toList(ListExtensions.<EStructuralFeature, IEObjectDescription>map(((EClass) _type_2).getEAllStructuralFeatures(), _function_2));
                  return new SimpleScope(_list_1);
                }
              } else {
                if ((reference == BXCorePackage.Literals.PATTERN_NODE_REF__NODE)) {
                  final PatternDefinition pattern = this.getPattern(context);
                  final ArrayList<IEObjectDescription> objects_1 = new ArrayList<IEObjectDescription>();
                  final Procedure1<EObject> _function_3 = (EObject e) -> {
                    if ((e instanceof PatternNode)) {
                      IEObjectDescription _create = EObjectDescription.create(((PatternNode)e).getName(), e);
                      objects_1.add(_create);
                    }
                  };
                  IteratorExtensions.<EObject>forEach(pattern.eAllContents(), _function_3);
                  return new SimpleScope(objects_1);
                } else {
                  if ((reference == BXCorePackage.Literals.DEFINED_CONTEXT_TYPE_REF__TYPE)) {
                    final BXFunctionDefinition function = this.getFunction(context.eContainer());
                    final BXProgram program = this.getProgram(context);
                    final Function1<Definition, Boolean> _function_4 = (Definition it) -> {
                      return Boolean.valueOf((it instanceof TypeDefinition));
                    };
                    final Iterable<Definition> types = IterableExtensions.<Definition>filter(program.getDefinitions(), _function_4);
                    final Function1<Definition, Boolean> _function_5 = (Definition it) -> {
                      return Boolean.valueOf((it instanceof PatternDefinition));
                    };
                    final Iterable<Definition> namedPatterns = IterableExtensions.<Definition>filter(program.getDefinitions(), _function_5);
                    Iterator<EObject> _xifexpression = null;
                    if ((function == null)) {
                      _xifexpression = null;
                    } else {
                      final Function1<EObject, Boolean> _function_6 = (EObject it) -> {
                        return Boolean.valueOf((it instanceof PatternDefinition));
                      };
                      _xifexpression = IteratorExtensions.<EObject>filter(function.eAllContents(), _function_6);
                    }
                    final Iterator<EObject> patterns = _xifexpression;
                    final ArrayList<IEObjectDescription> objects_2 = new ArrayList<IEObjectDescription>();
                    final Consumer<Definition> _function_7 = (Definition t) -> {
                      IEObjectDescription _create = EObjectDescription.create(t.getName(), t);
                      objects_2.add(_create);
                    };
                    types.forEach(_function_7);
                    final Consumer<Definition> _function_8 = (Definition p) -> {
                      IEObjectDescription _create = EObjectDescription.create(((PatternDefinition) p).getName(), p);
                      objects_2.add(_create);
                    };
                    namedPatterns.forEach(_function_8);
                    if ((patterns != null)) {
                      final Procedure1<EObject> _function_9 = (EObject p) -> {
                        IEObjectDescription _create = EObjectDescription.create(((PatternDefinition) p).getName(), p);
                        objects_2.add(_create);
                      };
                      IteratorExtensions.<EObject>forEach(patterns, _function_9);
                    }
                    return new SimpleScope(objects_2);
                  } else {
                    if ((reference == BXCorePackage.Literals.EXPRESSION_CONVERSION__METAMODEL)) {
                      final Function1<ImportSection, IEObjectDescription> _function_10 = (ImportSection it) -> {
                        return EObjectDescription.create(it.getShortName(), it);
                      };
                      List<IEObjectDescription> _map = ListExtensions.<ImportSection, IEObjectDescription>map(this.getProgram(context).getImports(), _function_10);
                      return new SimpleScope(_map);
                    } else {
                      if ((reference == BXCorePackage.Literals.EXPRESSION_CONVERSION__TYPE)) {
                        final EPackage pkg = ((ExpressionConversion) context).getMetamodel().getMetamodel();
                        final Function1<EObject, Boolean> _function_11 = (EObject it) -> {
                          return Boolean.valueOf((it instanceof EClass));
                        };
                        final Function1<EObject, IEObjectDescription> _function_12 = (EObject it) -> {
                          return EObjectDescription.create(((EClass) it).getName(), ((EClass) it));
                        };
                        final List<IEObjectDescription> classes = IteratorExtensions.<IEObjectDescription>toList(IteratorExtensions.<EObject, IEObjectDescription>map(IteratorExtensions.<EObject>filter(pkg.eAllContents(), _function_11), _function_12));
                        return new SimpleScope(classes);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      _xblockexpression = super.getScope(context, reference);
    }
    return _xblockexpression;
  }
  
  protected IScope collectTypes(final ImportSection importSection) {
    IScope _xblockexpression = null;
    {
      final ArrayList<IEObjectDescription> objects = new ArrayList<IEObjectDescription>();
      IScope _xifexpression = null;
      if ((importSection == null)) {
        _xifexpression = SimpleScope.NULLSCOPE;
      } else {
        SimpleScope _xblockexpression_1 = null;
        {
          final HashSet<EClassifier> visited = new HashSet<EClassifier>();
          final TreeIterator<EObject> itr = importSection.getMetamodel().eAllContents();
          final Procedure1<EObject> _function = (EObject c) -> {
            if ((c instanceof EClassifier)) {
              objects.add(EObjectDescription.create(((EClassifier)c).getName(), c));
              visited.add(((EClassifier)c));
            }
          };
          IteratorExtensions.<EObject>forEach(itr, _function);
          final TreeIterator<EObject> itr2 = importSection.getMetamodel().eAllContents();
          final Procedure1<EObject> _function_1 = (EObject c) -> {
            if ((c instanceof EClass)) {
              final Consumer<EStructuralFeature> _function_2 = (EStructuralFeature f) -> {
                final EClassifier t = f.getEType();
                boolean _contains = visited.contains(t);
                boolean _tripleEquals = (Boolean.valueOf(_contains) == Boolean.valueOf(false));
                if (_tripleEquals) {
                  objects.add(EObjectDescription.create(t.getName(), t));
                  visited.add(t);
                }
              };
              ((EClass)c).getEAllStructuralFeatures().forEach(_function_2);
            }
          };
          IteratorExtensions.<EObject>forEach(itr2, _function_1);
          _xblockexpression_1 = new SimpleScope(objects);
        }
        _xifexpression = _xblockexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public ImportSection getImportSection(final EObject object) {
    ImportSection _xifexpression = null;
    if ((object == null)) {
      _xifexpression = null;
    } else {
      ImportSection _xifexpression_1 = null;
      if ((object instanceof OrderedTupleTypeLiteral)) {
        _xifexpression_1 = ((OrderedTupleTypeLiteral)object).getSource();
      } else {
        ImportSection _xifexpression_2 = null;
        if ((object instanceof UnorderedTupleTypeLiteral)) {
          _xifexpression_2 = ((UnorderedTupleTypeLiteral)object).getSource();
        } else {
          ImportSection _xifexpression_3 = null;
          if ((object instanceof PatternTypeLiteral)) {
            _xifexpression_3 = ((PatternTypeLiteral)object).getSource();
          } else {
            _xifexpression_3 = this.getImportSection(object.eContainer());
          }
          _xifexpression_2 = _xifexpression_3;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public BXProgram getProgram(final EObject object) {
    BXProgram _xifexpression = null;
    if ((object == null)) {
      return null;
    } else {
      BXProgram _xifexpression_1 = null;
      if ((object instanceof BXProgram)) {
        _xifexpression_1 = ((BXProgram) object);
      } else {
        _xifexpression_1 = this.getProgram(object.eContainer());
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public BXFunctionDefinition getFunction(final EObject object) {
    BXFunctionDefinition _xifexpression = null;
    if ((object == null)) {
      return null;
    } else {
      BXFunctionDefinition _xifexpression_1 = null;
      if ((object instanceof BXFunctionDefinition)) {
        _xifexpression_1 = ((BXFunctionDefinition) object);
      } else {
        _xifexpression_1 = this.getFunction(object.eContainer());
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public BXProgram getRoot(final EObject object) {
    EObject _rootContainer = EcoreUtil.getRootContainer(object);
    return ((BXProgram) _rootContainer);
  }
  
  public PatternNode getPatternNode(final EObject object) {
    PatternNode _xifexpression = null;
    if ((object == null)) {
      return null;
    } else {
      PatternNode _xifexpression_1 = null;
      if ((object instanceof PatternNode)) {
        _xifexpression_1 = ((PatternNode) object);
      } else {
        _xifexpression_1 = this.getPatternNode(object.eContainer());
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public PatternDefinition getPattern(final EObject object) {
    PatternDefinition _xifexpression = null;
    if ((object == null)) {
      return null;
    } else {
      PatternDefinition _xifexpression_1 = null;
      if ((object instanceof PatternDefinition)) {
        _xifexpression_1 = ((PatternDefinition) object);
      } else {
        _xifexpression_1 = this.getPattern(object.eContainer());
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
}
