/**
 * generated by Xtext 2.14.0
 */
package edu.ustb.sei.mde.bxcore.dsl.scoping;

import com.google.common.base.Predicate;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.AbstractPatternEdge;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.AnnotatedType;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.BXCorePackage;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.BXFunctionDefinition;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.BXProgram;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.DashedPathType;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.DashedPathTypeSegment;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.Definition;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.ExpressionConversion;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.FeatureTypeRef;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.ImportSection;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.OrderedTupleTypeLiteral;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.Pattern;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternDefinition;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternNode;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternPathEdge;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternTypeLiteral;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.TypeDefinition;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.TypeVar;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.UnorderedTupleTypeLiteral;
import edu.ustb.sei.mde.bxcore.dsl.scoping.AbstractBXCoreScopeProvider;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.FilteringScope;
import org.eclipse.xtext.scoping.impl.SimpleScope;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class BXCoreScopeProvider extends AbstractBXCoreScopeProvider {
  public IScope featureScope(final EClass type) {
    if ((type == null)) {
      return SimpleScope.NULLSCOPE;
    } else {
      boolean _eIsProxy = type.eIsProxy();
      boolean _not = (!_eIsProxy);
      if (_not) {
        final ArrayList<IEObjectDescription> objects = new ArrayList<IEObjectDescription>();
        final Consumer<EStructuralFeature> _function = (EStructuralFeature i) -> {
          objects.add(EObjectDescription.create(i.getName(), i));
        };
        type.getEAllStructuralFeatures().forEach(_function);
        return new SimpleScope(objects);
      } else {
        return SimpleScope.NULLSCOPE;
      }
    }
  }
  
  public SimpleScope featureScope(final List<EStructuralFeature> prevFeatures) {
    final ArrayList<IEObjectDescription> objects = new ArrayList<IEObjectDescription>();
    final Consumer<EStructuralFeature> _function = (EStructuralFeature e) -> {
      final EClassifier type = e.getEType();
      if ((type instanceof EClass)) {
        final Consumer<EStructuralFeature> _function_1 = (EStructuralFeature i) -> {
          objects.add(EObjectDescription.create(i.getName(), i));
        };
        ((EClass)type).getEAllStructuralFeatures().forEach(_function_1);
      }
    };
    prevFeatures.forEach(_function);
    return new SimpleScope(objects);
  }
  
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    IScope _xblockexpression = null;
    {
      try {
        if ((((reference == BXCorePackage.Literals.UNORDERED_TUPLE_TYPE_LITERAL__SOURCE) || 
          (reference == BXCorePackage.Literals.ORDERED_TUPLE_TYPE_LITERAL__SOURCE)) || 
          (reference == BXCorePackage.Literals.PATTERN_TYPE_LITERAL__SOURCE))) {
          final Function1<ImportSection, IEObjectDescription> _function = (ImportSection it) -> {
            return EObjectDescription.create(it.getShortName(), it);
          };
          List<IEObjectDescription> _list = IterableExtensions.<IEObjectDescription>toList(ListExtensions.<ImportSection, IEObjectDescription>map(this.getRoot(context).getImports(), _function));
          return new SimpleScope(_list);
        } else {
          if ((reference == BXCorePackage.Literals.TYPE_REF__TYPE)) {
            final ImportSection importSection = this.getImportSection(context);
            return this.collectTypes(importSection.getMetamodel());
          } else {
            if ((reference == BXCorePackage.Literals.FEATURE_TYPE_REF__FEATURE)) {
              EClassifier _type = ((FeatureTypeRef) context).getType();
              final EClass type = ((EClass) _type);
              return this.featureScope(type);
            } else {
              if ((reference == BXCorePackage.Literals.PATTERN_NODE__TYPE)) {
                final ImportSection importSection_1 = this.getImportSection(context);
                return this.collectTypes(importSection_1.getMetamodel());
              } else {
                if ((reference == BXCorePackage.Literals.PATTERN_EDGE__FEATURE)) {
                  final PatternNode node = this.getPatternNode(context);
                  EClassifier _type_1 = node.getType();
                  if ((_type_1 instanceof EClass)) {
                    EClassifier _type_2 = node.getType();
                    return this.featureScope(((EClass) _type_2));
                  } else {
                    return IScope.NULLSCOPE;
                  }
                } else {
                  if ((reference == BXCorePackage.Literals.PATTERN_NODE_REF__NODE)) {
                    final Pattern pattern = this.getPattern(context);
                    final ArrayList<IEObjectDescription> objects = new ArrayList<IEObjectDescription>();
                    final Procedure1<EObject> _function_1 = (EObject e) -> {
                      if ((e instanceof PatternNode)) {
                        IEObjectDescription _create = EObjectDescription.create(((PatternNode)e).getName(), e);
                        objects.add(_create);
                      }
                    };
                    IteratorExtensions.<EObject>forEach(pattern.eAllContents(), _function_1);
                    return new SimpleScope(objects);
                  } else {
                    if ((reference == BXCorePackage.Literals.DEFINED_CONTEXT_TYPE_REF__TYPE)) {
                      final BXFunctionDefinition function = this.getFunction(context.eContainer());
                      final BXProgram program = this.getProgram(context);
                      final Function1<Definition, Boolean> _function_2 = (Definition it) -> {
                        return Boolean.valueOf((it instanceof TypeDefinition));
                      };
                      final Iterable<Definition> types = IterableExtensions.<Definition>filter(program.getDefinitions(), _function_2);
                      final Function1<Definition, Boolean> _function_3 = (Definition it) -> {
                        return Boolean.valueOf((it instanceof PatternDefinition));
                      };
                      final Iterable<Definition> namedPatterns = IterableExtensions.<Definition>filter(program.getDefinitions(), _function_3);
                      Iterator<EObject> _xifexpression = null;
                      if ((function == null)) {
                        _xifexpression = null;
                      } else {
                        final Function1<EObject, Boolean> _function_4 = (EObject it) -> {
                          return Boolean.valueOf((it instanceof PatternDefinition));
                        };
                        _xifexpression = IteratorExtensions.<EObject>filter(function.eAllContents(), _function_4);
                      }
                      final Iterator<EObject> patterns = _xifexpression;
                      final ArrayList<IEObjectDescription> objects_1 = new ArrayList<IEObjectDescription>();
                      final Consumer<Definition> _function_5 = (Definition t) -> {
                        IEObjectDescription _create = EObjectDescription.create(t.getName(), t);
                        objects_1.add(_create);
                      };
                      types.forEach(_function_5);
                      final Consumer<Definition> _function_6 = (Definition p) -> {
                        IEObjectDescription _create = EObjectDescription.create(((PatternDefinition) p).getName(), p);
                        objects_1.add(_create);
                      };
                      namedPatterns.forEach(_function_6);
                      if ((patterns != null)) {
                        final Procedure1<EObject> _function_7 = (EObject p) -> {
                          IEObjectDescription _create = EObjectDescription.create(((PatternDefinition) p).getName(), p);
                          objects_1.add(_create);
                        };
                        IteratorExtensions.<EObject>forEach(patterns, _function_7);
                      }
                      return new SimpleScope(objects_1);
                    } else {
                      if (((reference == BXCorePackage.Literals.EXPRESSION_CONVERSION__METAMODEL) || 
                        (reference == BXCorePackage.Literals.ANNOTATED_TYPE__METAMODEL))) {
                        final Function1<ImportSection, IEObjectDescription> _function_8 = (ImportSection it) -> {
                          return EObjectDescription.create(it.getShortName(), it);
                        };
                        List<IEObjectDescription> _map = ListExtensions.<ImportSection, IEObjectDescription>map(this.getProgram(context).getImports(), _function_8);
                        return new SimpleScope(_map);
                      } else {
                        if ((reference == BXCorePackage.Literals.EXPRESSION_CONVERSION__TYPE)) {
                          final EPackage pkg = ((ExpressionConversion) context).getMetamodel().getMetamodel();
                          IScope _collectTypes = this.collectTypes(pkg);
                          final Predicate<IEObjectDescription> _function_9 = (IEObjectDescription d) -> {
                            EObject _eObjectOrProxy = d.getEObjectOrProxy();
                            return (_eObjectOrProxy instanceof EClass);
                          };
                          return new FilteringScope(_collectTypes, _function_9);
                        } else {
                          if ((reference == BXCorePackage.Literals.ANNOTATED_TYPE__TYPE)) {
                            final EPackage pkg_1 = ((AnnotatedType) context).getMetamodel().getMetamodel();
                            IScope _collectTypes_1 = this.collectTypes(pkg_1);
                            final Predicate<IEObjectDescription> _function_10 = (IEObjectDescription d) -> {
                              EObject _eObjectOrProxy = d.getEObjectOrProxy();
                              return (_eObjectOrProxy instanceof EClass);
                            };
                            return new FilteringScope(_collectTypes_1, _function_10);
                          } else {
                            if ((reference == BXCorePackage.Literals.ANNOTATED_TYPE__FEATURE)) {
                              final EClass type_1 = ((AnnotatedType) context).getType();
                              return this.featureScope(type_1);
                            } else {
                              if ((reference == BXCorePackage.Literals.DASHED_PATH_TYPE_SEGMENT__TYPES)) {
                                final EObject dashedPathType = context.eContainer();
                                final EObject typeContainer = dashedPathType.eContainer();
                                if ((typeContainer instanceof PatternPathEdge)) {
                                  final PatternNode node_1 = this.getPatternNode(typeContainer);
                                  EClassifier _type_3 = node_1.getType();
                                  if ((_type_3 instanceof EClass)) {
                                    EClassifier _type_4 = node_1.getType();
                                    return this.featureScope(((EClass) _type_4));
                                  } else {
                                    return IScope.NULLSCOPE;
                                  }
                                } else {
                                  if ((typeContainer instanceof DashedPathType)) {
                                    final DashedPathTypeSegment prevSeg = ((DashedPathType) typeContainer).getSegment();
                                    return this.featureScope(prevSeg.getTypes());
                                  }
                                }
                              } else {
                                if ((reference == BXCorePackage.Literals.PATTERN_TYPE_LITERAL__ORDER_BY)) {
                                  final Pattern pattern_1 = this.getPattern(context);
                                  if ((pattern_1 == null)) {
                                    return IScope.NULLSCOPE;
                                  } else {
                                    final ArrayList<IEObjectDescription> objects_2 = new ArrayList<IEObjectDescription>();
                                    final Function1<EObject, Boolean> _function_11 = (EObject it) -> {
                                      return Boolean.valueOf((it instanceof AbstractPatternEdge));
                                    };
                                    final Procedure1<EObject> _function_12 = (EObject p) -> {
                                      IEObjectDescription _create = EObjectDescription.create(((AbstractPatternEdge) p).getName(), p);
                                      objects_2.add(_create);
                                    };
                                    IteratorExtensions.<EObject>forEach(IteratorExtensions.<EObject>filter(pattern_1.eAllContents(), _function_11), _function_12);
                                    return new SimpleScope(objects_2);
                                  }
                                } else {
                                  if ((reference == BXCorePackage.Literals.PATTERN_TYPE_LITERAL__PIVOT)) {
                                    final Pattern pattern_2 = this.getPattern(context);
                                    if (((pattern_2 == null) || (!(pattern_2 instanceof PatternTypeLiteral)))) {
                                      return IScope.NULLSCOPE;
                                    } else {
                                      final ArrayList<IEObjectDescription> objects_3 = new ArrayList<IEObjectDescription>();
                                      final Consumer<TypeVar> _function_13 = (TypeVar p) -> {
                                        IEObjectDescription _create = EObjectDescription.create(p.getName(), p);
                                        objects_3.add(_create);
                                      };
                                      ((PatternTypeLiteral) pattern_2).getAdditional().forEach(_function_13);
                                      return new SimpleScope(objects_3);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } catch (final Throwable _t) {
        if (_t instanceof Exception) {
        } else {
          throw Exceptions.sneakyThrow(_t);
        }
      }
      _xblockexpression = super.getScope(context, reference);
    }
    return _xblockexpression;
  }
  
  protected IScope collectTypes(final EPackage metamodel) {
    IScope _xblockexpression = null;
    {
      final ArrayList<IEObjectDescription> objects = new ArrayList<IEObjectDescription>();
      IScope _xifexpression = null;
      if ((metamodel == null)) {
        _xifexpression = SimpleScope.NULLSCOPE;
      } else {
        SimpleScope _xblockexpression_1 = null;
        {
          final HashSet<EClassifier> visited = new HashSet<EClassifier>();
          final TreeIterator<EObject> itr = metamodel.eAllContents();
          final Procedure1<EObject> _function = (EObject c) -> {
            if ((c instanceof EClassifier)) {
              objects.add(EObjectDescription.create(((EClassifier)c).getName(), c));
              visited.add(((EClassifier)c));
            }
          };
          IteratorExtensions.<EObject>forEach(itr, _function);
          final TreeIterator<EObject> itr2 = metamodel.eAllContents();
          final Procedure1<EObject> _function_1 = (EObject c) -> {
            if ((c instanceof EClass)) {
              final Consumer<EStructuralFeature> _function_2 = (EStructuralFeature f) -> {
                final EClassifier t = f.getEType();
                boolean _contains = visited.contains(t);
                boolean _tripleEquals = (Boolean.valueOf(_contains) == Boolean.valueOf(false));
                if (_tripleEquals) {
                  objects.add(EObjectDescription.create(t.getName(), t));
                  visited.add(t);
                }
              };
              ((EClass)c).getEAllStructuralFeatures().forEach(_function_2);
            }
          };
          IteratorExtensions.<EObject>forEach(itr2, _function_1);
          _xblockexpression_1 = new SimpleScope(objects);
        }
        _xifexpression = _xblockexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public ImportSection getImportSection(final EObject object) {
    ImportSection _xifexpression = null;
    if ((object == null)) {
      _xifexpression = null;
    } else {
      ImportSection _xifexpression_1 = null;
      if ((object instanceof OrderedTupleTypeLiteral)) {
        _xifexpression_1 = ((OrderedTupleTypeLiteral)object).getSource();
      } else {
        ImportSection _xifexpression_2 = null;
        if ((object instanceof UnorderedTupleTypeLiteral)) {
          _xifexpression_2 = ((UnorderedTupleTypeLiteral)object).getSource();
        } else {
          ImportSection _xifexpression_3 = null;
          if ((object instanceof PatternTypeLiteral)) {
            _xifexpression_3 = ((PatternTypeLiteral)object).getSource();
          } else {
            _xifexpression_3 = this.getImportSection(object.eContainer());
          }
          _xifexpression_2 = _xifexpression_3;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public BXProgram getProgram(final EObject object) {
    BXProgram _xifexpression = null;
    if ((object == null)) {
      return null;
    } else {
      BXProgram _xifexpression_1 = null;
      if ((object instanceof BXProgram)) {
        _xifexpression_1 = ((BXProgram) object);
      } else {
        _xifexpression_1 = this.getProgram(object.eContainer());
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public BXFunctionDefinition getFunction(final EObject object) {
    BXFunctionDefinition _xifexpression = null;
    if ((object == null)) {
      return null;
    } else {
      BXFunctionDefinition _xifexpression_1 = null;
      if ((object instanceof BXFunctionDefinition)) {
        _xifexpression_1 = ((BXFunctionDefinition) object);
      } else {
        _xifexpression_1 = this.getFunction(object.eContainer());
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public BXProgram getRoot(final EObject object) {
    EObject _rootContainer = EcoreUtil.getRootContainer(object);
    return ((BXProgram) _rootContainer);
  }
  
  public PatternNode getPatternNode(final EObject object) {
    PatternNode _xifexpression = null;
    if ((object == null)) {
      return null;
    } else {
      PatternNode _xifexpression_1 = null;
      if ((object instanceof PatternNode)) {
        _xifexpression_1 = ((PatternNode) object);
      } else {
        _xifexpression_1 = this.getPatternNode(object.eContainer());
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public Pattern getPattern(final EObject object) {
    Pattern _xifexpression = null;
    if ((object == null)) {
      return null;
    } else {
      Pattern _xifexpression_1 = null;
      if ((object instanceof Pattern)) {
        _xifexpression_1 = ((Pattern) object);
      } else {
        _xifexpression_1 = this.getPattern(object.eContainer());
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
}
