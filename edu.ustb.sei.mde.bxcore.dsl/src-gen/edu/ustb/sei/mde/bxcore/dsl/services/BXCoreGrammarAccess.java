/*
 * generated by Xtext 2.14.0
 */
package edu.ustb.sei.mde.bxcore.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class BXCoreGrammarAccess extends AbstractGrammarElementFinder {
	
	public class BXProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.BXProgram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportSectionParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cJavaImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cJavaImportsXImportSectionParserRuleCall_1_0 = (RuleCall)cJavaImportsAssignment_1.eContents().get(0);
		private final Assignment cDefinitionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefinitionsDefinitionParserRuleCall_2_0 = (RuleCall)cDefinitionsAssignment_2.eContents().get(0);
		
		//BXProgram:
		//	imports+=ImportSection*
		//	javaImports=XImportSection?
		//	definitions+=Definition*;
		@Override public ParserRule getRule() { return rule; }
		
		//imports+=ImportSection* javaImports=XImportSection? definitions+=Definition*
		public Group getGroup() { return cGroup; }
		
		//imports+=ImportSection*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//ImportSection
		public RuleCall getImportsImportSectionParserRuleCall_0_0() { return cImportsImportSectionParserRuleCall_0_0; }
		
		//javaImports=XImportSection?
		public Assignment getJavaImportsAssignment_1() { return cJavaImportsAssignment_1; }
		
		//XImportSection
		public RuleCall getJavaImportsXImportSectionParserRuleCall_1_0() { return cJavaImportsXImportSectionParserRuleCall_1_0; }
		
		//definitions+=Definition*
		public Assignment getDefinitionsAssignment_2() { return cDefinitionsAssignment_2; }
		
		//Definition
		public RuleCall getDefinitionsDefinitionParserRuleCall_2_0() { return cDefinitionsDefinitionParserRuleCall_2_0; }
	}
	public class ImportSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.ImportSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMetamodelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMetamodelEPackageCrossReference_1_0 = (CrossReference)cMetamodelAssignment_1.eContents().get(0);
		private final RuleCall cMetamodelEPackageSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cMetamodelEPackageCrossReference_1_0.eContents().get(1);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cShortNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cShortNameValidIDParserRuleCall_3_0 = (RuleCall)cShortNameAssignment_3.eContents().get(0);
		
		//ImportSection:
		//	'import' metamodel=[ecore::EPackage|STRING] 'as' shortName=ValidID;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' metamodel=[ecore::EPackage|STRING] 'as' shortName=ValidID
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//metamodel=[ecore::EPackage|STRING]
		public Assignment getMetamodelAssignment_1() { return cMetamodelAssignment_1; }
		
		//[ecore::EPackage|STRING]
		public CrossReference getMetamodelEPackageCrossReference_1_0() { return cMetamodelEPackageCrossReference_1_0; }
		
		//STRING
		public RuleCall getMetamodelEPackageSTRINGTerminalRuleCall_1_0_1() { return cMetamodelEPackageSTRINGTerminalRuleCall_1_0_1; }
		
		//'as'
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }
		
		//shortName=ValidID
		public Assignment getShortNameAssignment_3() { return cShortNameAssignment_3; }
		
		//ValidID
		public RuleCall getShortNameValidIDParserRuleCall_3_0() { return cShortNameValidIDParserRuleCall_3_0; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.Definition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPatternDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBXFunctionDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIndexDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Definition:
		//	TypeDefinition | PatternDefinition | BXFunctionDefinition | IndexDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeDefinition | PatternDefinition | BXFunctionDefinition | IndexDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TypeDefinition
		public RuleCall getTypeDefinitionParserRuleCall_0() { return cTypeDefinitionParserRuleCall_0; }
		
		//PatternDefinition
		public RuleCall getPatternDefinitionParserRuleCall_1() { return cPatternDefinitionParserRuleCall_1; }
		
		//BXFunctionDefinition
		public RuleCall getBXFunctionDefinitionParserRuleCall_2() { return cBXFunctionDefinitionParserRuleCall_2; }
		
		//IndexDefinition
		public RuleCall getIndexDefinitionParserRuleCall_3() { return cIndexDefinitionParserRuleCall_3; }
	}
	public class BXFunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.BXFunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSourceTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSourceTypeContextTypeRefParserRuleCall_3_0 = (RuleCall)cSourceTypeAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cViewTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cViewTypeContextTypeRefParserRuleCall_5_0 = (RuleCall)cViewTypeAssignment_5.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cStatementAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStatementXmuCoreStatementParserRuleCall_8_0 = (RuleCall)cStatementAssignment_8.eContents().get(0);
		
		//BXFunctionDefinition:
		//	'function' name=ValidID '<' sourceType=ContextTypeRef ',' viewType=ContextTypeRef '>' '=' statement=XmuCoreStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' name=ValidID '<' sourceType=ContextTypeRef ',' viewType=ContextTypeRef '>' '=' statement=XmuCoreStatement
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//sourceType=ContextTypeRef
		public Assignment getSourceTypeAssignment_3() { return cSourceTypeAssignment_3; }
		
		//ContextTypeRef
		public RuleCall getSourceTypeContextTypeRefParserRuleCall_3_0() { return cSourceTypeContextTypeRefParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//viewType=ContextTypeRef
		public Assignment getViewTypeAssignment_5() { return cViewTypeAssignment_5; }
		
		//ContextTypeRef
		public RuleCall getViewTypeContextTypeRefParserRuleCall_5_0() { return cViewTypeContextTypeRefParserRuleCall_5_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_6() { return cGreaterThanSignKeyword_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//statement=XmuCoreStatement
		public Assignment getStatementAssignment_8() { return cStatementAssignment_8; }
		
		//XmuCoreStatement
		public RuleCall getStatementXmuCoreStatementParserRuleCall_8_0() { return cStatementXmuCoreStatementParserRuleCall_8_0; }
	}
	public class TypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.TypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cTypeVarsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cTypeVarsTypeVarParserRuleCall_4_0_0 = (RuleCall)cTypeVarsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cTypeVarsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cTypeVarsTypeVarParserRuleCall_4_1_1_0 = (RuleCall)cTypeVarsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TypeDefinition:
		//	'type' name=ValidID '=' '(' (typeVars+=TypeVar (',' typeVars+=TypeVar)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'type' name=ValidID '=' '(' (typeVars+=TypeVar (',' typeVars+=TypeVar)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(typeVars+=TypeVar (',' typeVars+=TypeVar)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//typeVars+=TypeVar
		public Assignment getTypeVarsAssignment_4_0() { return cTypeVarsAssignment_4_0; }
		
		//TypeVar
		public RuleCall getTypeVarsTypeVarParserRuleCall_4_0_0() { return cTypeVarsTypeVarParserRuleCall_4_0_0; }
		
		//(',' typeVars+=TypeVar)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//typeVars+=TypeVar
		public Assignment getTypeVarsAssignment_4_1_1() { return cTypeVarsAssignment_4_1_1; }
		
		//TypeVar
		public RuleCall getTypeVarsTypeVarParserRuleCall_4_1_1_0() { return cTypeVarsTypeVarParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class TypeVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.TypeVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeRefParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//TypeVar:
		//	name=ValidID ':' type=TypeRef;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ValidID ':' type=TypeRef
		public Group getGroup() { return cGroup; }
		
		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=TypeRef
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_2_0() { return cTypeTypeRefParserRuleCall_2_0; }
	}
	public class TypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.TypeRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cEcoreTypeRefAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cTypeEClassifierCrossReference_0_1_0 = (CrossReference)cTypeAssignment_0_1.eContents().get(0);
		private final RuleCall cTypeEClassifierQualifiedValidIDParserRuleCall_0_1_0_1 = (RuleCall)cTypeEClassifierCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPrimitiveTypeRefAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cTypeAlternatives_1_1_0 = (Alternatives)cTypeAssignment_1_1.eContents().get(0);
		private final Keyword cTypeIntKeyword_1_1_0_0 = (Keyword)cTypeAlternatives_1_1_0.eContents().get(0);
		private final Keyword cTypeBooleanKeyword_1_1_0_1 = (Keyword)cTypeAlternatives_1_1_0.eContents().get(1);
		private final Keyword cTypeStringKeyword_1_1_0_2 = (Keyword)cTypeAlternatives_1_1_0.eContents().get(2);
		
		//TypeRef:
		//	{EcoreTypeRef} type=[ecore::EClassifier|QualifiedValidID] | {PrimitiveTypeRef} type=('int' | 'boolean' | 'String');
		@Override public ParserRule getRule() { return rule; }
		
		//{EcoreTypeRef} type=[ecore::EClassifier|QualifiedValidID] | {PrimitiveTypeRef} type=('int' | 'boolean' | 'String')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{EcoreTypeRef} type=[ecore::EClassifier|QualifiedValidID]
		public Group getGroup_0() { return cGroup_0; }
		
		//{EcoreTypeRef}
		public Action getEcoreTypeRefAction_0_0() { return cEcoreTypeRefAction_0_0; }
		
		//type=[ecore::EClassifier|QualifiedValidID]
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }
		
		//[ecore::EClassifier|QualifiedValidID]
		public CrossReference getTypeEClassifierCrossReference_0_1_0() { return cTypeEClassifierCrossReference_0_1_0; }
		
		//QualifiedValidID
		public RuleCall getTypeEClassifierQualifiedValidIDParserRuleCall_0_1_0_1() { return cTypeEClassifierQualifiedValidIDParserRuleCall_0_1_0_1; }
		
		//{PrimitiveTypeRef} type=('int' | 'boolean' | 'String')
		public Group getGroup_1() { return cGroup_1; }
		
		//{PrimitiveTypeRef}
		public Action getPrimitiveTypeRefAction_1_0() { return cPrimitiveTypeRefAction_1_0; }
		
		//type=('int' | 'boolean' | 'String')
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//('int' | 'boolean' | 'String')
		public Alternatives getTypeAlternatives_1_1_0() { return cTypeAlternatives_1_1_0; }
		
		//'int'
		public Keyword getTypeIntKeyword_1_1_0_0() { return cTypeIntKeyword_1_1_0_0; }
		
		//'boolean'
		public Keyword getTypeBooleanKeyword_1_1_0_1() { return cTypeBooleanKeyword_1_1_0_1; }
		
		//'String'
		public Keyword getTypeStringKeyword_1_1_0_2() { return cTypeStringKeyword_1_1_0_2; }
	}
	public class PatternDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.PatternDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPatternKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRootAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRootPatternNodeParserRuleCall_3_0 = (RuleCall)cRootAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeValidIDParserRuleCall_4_1_0 = (RuleCall)cTypeAssignment_4_1.eContents().get(0);
		
		//PatternDefinition:
		//	'pattern' name=ValidID '=' root=PatternNode ('as' type=ValidID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'pattern' name=ValidID '=' root=PatternNode ('as' type=ValidID)?
		public Group getGroup() { return cGroup; }
		
		//'pattern'
		public Keyword getPatternKeyword_0() { return cPatternKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//root=PatternNode
		public Assignment getRootAssignment_3() { return cRootAssignment_3; }
		
		//PatternNode
		public RuleCall getRootPatternNodeParserRuleCall_3_0() { return cRootPatternNodeParserRuleCall_3_0; }
		
		//('as' type=ValidID)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'as'
		public Keyword getAsKeyword_4_0() { return cAsKeyword_4_0; }
		
		//type=ValidID
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }
		
		//ValidID
		public RuleCall getTypeValidIDParserRuleCall_4_1_0() { return cTypeValidIDParserRuleCall_4_1_0; }
	}
	public class IndexDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.IndexDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIndexKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSourceTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSourceTypeContextTypeRefParserRuleCall_3_0 = (RuleCall)cSourceTypeAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cViewTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cViewTypeContextTypeRefParserRuleCall_5_0 = (RuleCall)cViewTypeAssignment_5.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IndexDefinition:
		//	'index' name=ValidID '<' sourceType=ContextTypeRef ',' viewType=ContextTypeRef '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'index' name=ValidID '<' sourceType=ContextTypeRef ',' viewType=ContextTypeRef '>'
		public Group getGroup() { return cGroup; }
		
		//'index'
		public Keyword getIndexKeyword_0() { return cIndexKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//sourceType=ContextTypeRef
		public Assignment getSourceTypeAssignment_3() { return cSourceTypeAssignment_3; }
		
		//ContextTypeRef
		public RuleCall getSourceTypeContextTypeRefParserRuleCall_3_0() { return cSourceTypeContextTypeRefParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//viewType=ContextTypeRef
		public Assignment getViewTypeAssignment_5() { return cViewTypeAssignment_5; }
		
		//ContextTypeRef
		public RuleCall getViewTypeContextTypeRefParserRuleCall_5_0() { return cViewTypeContextTypeRefParserRuleCall_5_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_6() { return cGreaterThanSignKeyword_6; }
	}
	public class AnonymousPatternDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.AnonymousPatternDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRootAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRootPatternNodeParserRuleCall_0_0 = (RuleCall)cRootAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeValidIDParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		//AnonymousPatternDefinition PatternDefinition:
		//	root=PatternNode ('as' type=ValidID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//root=PatternNode ('as' type=ValidID)?
		public Group getGroup() { return cGroup; }
		
		//root=PatternNode
		public Assignment getRootAssignment_0() { return cRootAssignment_0; }
		
		//PatternNode
		public RuleCall getRootPatternNodeParserRuleCall_0_0() { return cRootPatternNodeParserRuleCall_0_0; }
		
		//('as' type=ValidID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'as'
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }
		
		//type=ValidID
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//ValidID
		public RuleCall getTypeValidIDParserRuleCall_1_1_0() { return cTypeValidIDParserRuleCall_1_1_0; }
	}
	public class PatternNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.PatternNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeRefParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cEdgesAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cEdgesPatternEdgeParserRuleCall_3_1_0_0 = (RuleCall)cEdgesAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cEdgesAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cEdgesPatternEdgeParserRuleCall_3_1_1_1_0 = (RuleCall)cEdgesAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//PatternNode:
		//	name=ValidID ':' type=TypeRef ('{' (edges+=PatternEdge (',' edges+=PatternEdge)*)? '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ValidID ':' type=TypeRef ('{' (edges+=PatternEdge (',' edges+=PatternEdge)*)? '}')?
		public Group getGroup() { return cGroup; }
		
		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=TypeRef
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_2_0() { return cTypeTypeRefParserRuleCall_2_0; }
		
		//('{' (edges+=PatternEdge (',' edges+=PatternEdge)*)? '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//(edges+=PatternEdge (',' edges+=PatternEdge)*)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//edges+=PatternEdge
		public Assignment getEdgesAssignment_3_1_0() { return cEdgesAssignment_3_1_0; }
		
		//PatternEdge
		public RuleCall getEdgesPatternEdgeParserRuleCall_3_1_0_0() { return cEdgesPatternEdgeParserRuleCall_3_1_0_0; }
		
		//(',' edges+=PatternEdge)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }
		
		//edges+=PatternEdge
		public Assignment getEdgesAssignment_3_1_1_1() { return cEdgesAssignment_3_1_1_1; }
		
		//PatternEdge
		public RuleCall getEdgesPatternEdgeParserRuleCall_3_1_1_1_0() { return cEdgesPatternEdgeParserRuleCall_3_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class PatternEdgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.PatternEdge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFeatureEStructuralFeatureCrossReference_1_0 = (CrossReference)cFeatureAssignment_1.eContents().get(0);
		private final RuleCall cFeatureEStructuralFeatureValidIDParserRuleCall_1_0_1 = (RuleCall)cFeatureEStructuralFeatureCrossReference_1_0.eContents().get(1);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOperatorEqualsSignKeyword_2_0 = (Keyword)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuePatternValueConditionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//PatternEdge:
		//	(name=ValidID ':')? feature=[ecore::EStructuralFeature|ValidID] operator='=' value=PatternValueCondition;
		@Override public ParserRule getRule() { return rule; }
		
		//(name=ValidID ':')? feature=[ecore::EStructuralFeature|ValidID] operator='=' value=PatternValueCondition
		public Group getGroup() { return cGroup; }
		
		//(name=ValidID ':')?
		public Group getGroup_0() { return cGroup_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0_0() { return cNameValidIDParserRuleCall_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//feature=[ecore::EStructuralFeature|ValidID]
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }
		
		//[ecore::EStructuralFeature|ValidID]
		public CrossReference getFeatureEStructuralFeatureCrossReference_1_0() { return cFeatureEStructuralFeatureCrossReference_1_0; }
		
		//ValidID
		public RuleCall getFeatureEStructuralFeatureValidIDParserRuleCall_1_0_1() { return cFeatureEStructuralFeatureValidIDParserRuleCall_1_0_1; }
		
		//operator='='
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//'='
		public Keyword getOperatorEqualsSignKeyword_2_0() { return cOperatorEqualsSignKeyword_2_0; }
		
		//value=PatternValueCondition
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//PatternValueCondition
		public RuleCall getValuePatternValueConditionParserRuleCall_3_0() { return cValuePatternValueConditionParserRuleCall_3_0; }
	}
	public class PatternValueConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.PatternValueCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPatternNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPatternNodeRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PatternValueCondition:
		//	PatternNode | PatternNodeRef;
		@Override public ParserRule getRule() { return rule; }
		
		//PatternNode | PatternNodeRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PatternNode
		public RuleCall getPatternNodeParserRuleCall_0() { return cPatternNodeParserRuleCall_0; }
		
		//PatternNodeRef
		public RuleCall getPatternNodeRefParserRuleCall_1() { return cPatternNodeRefParserRuleCall_1; }
	}
	public class PatternNodeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.PatternNodeRef");
		private final Assignment cNodeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cNodePatternNodeCrossReference_0 = (CrossReference)cNodeAssignment.eContents().get(0);
		private final RuleCall cNodePatternNodeValidIDParserRuleCall_0_1 = (RuleCall)cNodePatternNodeCrossReference_0.eContents().get(1);
		
		//PatternNodeRef:
		//	node=[PatternNode|ValidID];
		@Override public ParserRule getRule() { return rule; }
		
		//node=[PatternNode|ValidID]
		public Assignment getNodeAssignment() { return cNodeAssignment; }
		
		//[PatternNode|ValidID]
		public CrossReference getNodePatternNodeCrossReference_0() { return cNodePatternNodeCrossReference_0; }
		
		//ValidID
		public RuleCall getNodePatternNodeValidIDParserRuleCall_0_1() { return cNodePatternNodeValidIDParserRuleCall_0_1; }
	}
	public class PatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.Pattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnonymousPatternDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPatternDefinitionReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Pattern:
		//	AnonymousPatternDefinition | PatternDefinitionReference;
		@Override public ParserRule getRule() { return rule; }
		
		//AnonymousPatternDefinition | PatternDefinitionReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AnonymousPatternDefinition
		public RuleCall getAnonymousPatternDefinitionParserRuleCall_0() { return cAnonymousPatternDefinitionParserRuleCall_0; }
		
		//PatternDefinitionReference
		public RuleCall getPatternDefinitionReferenceParserRuleCall_1() { return cPatternDefinitionReferenceParserRuleCall_1; }
	}
	public class ContextTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.ContextType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnonymousPatternDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ContextType:
		//	AnonymousPatternDefinition | TypeDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//AnonymousPatternDefinition | TypeDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AnonymousPatternDefinition
		public RuleCall getAnonymousPatternDefinitionParserRuleCall_0() { return cAnonymousPatternDefinitionParserRuleCall_0; }
		
		//TypeDefinition
		public RuleCall getTypeDefinitionParserRuleCall_1() { return cTypeDefinitionParserRuleCall_1; }
	}
	public class ContextTypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.ContextTypeRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cDefinedContextTypeRefAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cTypeContextTypeCrossReference_0_1_0 = (CrossReference)cTypeAssignment_0_1.eContents().get(0);
		private final RuleCall cTypeContextTypeValidIDParserRuleCall_0_1_0_1 = (RuleCall)cTypeContextTypeCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cEmptyContextTypeRefAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEmptyKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//ContextTypeRef:
		//	{DefinedContextTypeRef} type=[ContextType|ValidID] | {EmptyContextTypeRef} 'empty';
		@Override public ParserRule getRule() { return rule; }
		
		//{DefinedContextTypeRef} type=[ContextType|ValidID] | {EmptyContextTypeRef} 'empty'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{DefinedContextTypeRef} type=[ContextType|ValidID]
		public Group getGroup_0() { return cGroup_0; }
		
		//{DefinedContextTypeRef}
		public Action getDefinedContextTypeRefAction_0_0() { return cDefinedContextTypeRefAction_0_0; }
		
		//type=[ContextType|ValidID]
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }
		
		//[ContextType|ValidID]
		public CrossReference getTypeContextTypeCrossReference_0_1_0() { return cTypeContextTypeCrossReference_0_1_0; }
		
		//ValidID
		public RuleCall getTypeContextTypeValidIDParserRuleCall_0_1_0_1() { return cTypeContextTypeValidIDParserRuleCall_0_1_0_1; }
		
		//{EmptyContextTypeRef} 'empty'
		public Group getGroup_1() { return cGroup_1; }
		
		//{EmptyContextTypeRef}
		public Action getEmptyContextTypeRefAction_1_0() { return cEmptyContextTypeRefAction_1_0; }
		
		//'empty'
		public Keyword getEmptyKeyword_1_1() { return cEmptyKeyword_1_1; }
	}
	public class PatternDefinitionReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.PatternDefinitionReference");
		private final Assignment cPatternAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cPatternPatternDefinitionCrossReference_0 = (CrossReference)cPatternAssignment.eContents().get(0);
		private final RuleCall cPatternPatternDefinitionValidIDParserRuleCall_0_1 = (RuleCall)cPatternPatternDefinitionCrossReference_0.eContents().get(1);
		
		//PatternDefinitionReference:
		//	pattern=[PatternDefinition|ValidID];
		@Override public ParserRule getRule() { return rule; }
		
		//pattern=[PatternDefinition|ValidID]
		public Assignment getPatternAssignment() { return cPatternAssignment; }
		
		//[PatternDefinition|ValidID]
		public CrossReference getPatternPatternDefinitionCrossReference_0() { return cPatternPatternDefinitionCrossReference_0; }
		
		//ValidID
		public RuleCall getPatternPatternDefinitionValidIDParserRuleCall_0_1() { return cPatternPatternDefinitionValidIDParserRuleCall_0_1; }
	}
	public class XmuCoreStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXmuCoreForkParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXmuCoreParallelCompositionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXmuCoreCompositionChildStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//XmuCoreStatement:
		//	XmuCoreFork | XmuCoreParallelComposition | XmuCoreCompositionChildStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//XmuCoreFork | XmuCoreParallelComposition | XmuCoreCompositionChildStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//XmuCoreFork
		public RuleCall getXmuCoreForkParserRuleCall_0() { return cXmuCoreForkParserRuleCall_0; }
		
		//XmuCoreParallelComposition
		public RuleCall getXmuCoreParallelCompositionParserRuleCall_1() { return cXmuCoreParallelCompositionParserRuleCall_1; }
		
		//XmuCoreCompositionChildStatement
		public RuleCall getXmuCoreCompositionChildStatementParserRuleCall_2() { return cXmuCoreCompositionChildStatementParserRuleCall_2; }
	}
	public class XmuCoreCompositionChildStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreCompositionChildStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXmuCoreMatchSourceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXmuCoreMatchViewParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXmuCoreExpandSourceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXmuCoreExpandViewParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXmuCoreGraphReplaceParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXmuCoreSwitchParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXmuCoreAlignParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cXmuCoreFunctionCallParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//XmuCoreCompositionChildStatement:
		//	XmuCoreMatchSource | XmuCoreMatchView | XmuCoreExpandSource | XmuCoreExpandView | XmuCoreGraphReplace | XmuCoreSwitch
		//	| XmuCoreAlign | XmuCoreFunctionCall;
		@Override public ParserRule getRule() { return rule; }
		
		//XmuCoreMatchSource | XmuCoreMatchView | XmuCoreExpandSource | XmuCoreExpandView | XmuCoreGraphReplace | XmuCoreSwitch |
		//XmuCoreAlign | XmuCoreFunctionCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//XmuCoreMatchSource
		public RuleCall getXmuCoreMatchSourceParserRuleCall_0() { return cXmuCoreMatchSourceParserRuleCall_0; }
		
		//XmuCoreMatchView
		public RuleCall getXmuCoreMatchViewParserRuleCall_1() { return cXmuCoreMatchViewParserRuleCall_1; }
		
		//XmuCoreExpandSource
		public RuleCall getXmuCoreExpandSourceParserRuleCall_2() { return cXmuCoreExpandSourceParserRuleCall_2; }
		
		//XmuCoreExpandView
		public RuleCall getXmuCoreExpandViewParserRuleCall_3() { return cXmuCoreExpandViewParserRuleCall_3; }
		
		//XmuCoreGraphReplace
		public RuleCall getXmuCoreGraphReplaceParserRuleCall_4() { return cXmuCoreGraphReplaceParserRuleCall_4; }
		
		//XmuCoreSwitch
		public RuleCall getXmuCoreSwitchParserRuleCall_5() { return cXmuCoreSwitchParserRuleCall_5; }
		
		//XmuCoreAlign
		public RuleCall getXmuCoreAlignParserRuleCall_6() { return cXmuCoreAlignParserRuleCall_6; }
		
		//XmuCoreFunctionCall
		public RuleCall getXmuCoreFunctionCallParserRuleCall_7() { return cXmuCoreFunctionCallParserRuleCall_7; }
	}
	public class XmuCoreMatchSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreMatchSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMatchSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSourceTypeContextTypeRefParserRuleCall_2_0 = (RuleCall)cSourceTypeAssignment_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPatternAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPatternPatternParserRuleCall_4_0 = (RuleCall)cPatternAssignment_4.eContents().get(0);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyXmuCoreStatementParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		
		//XmuCoreMatchSource:
		//	'matchS' '<' sourceType=ContextTypeRef '>' pattern=Pattern body=XmuCoreStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//'matchS' '<' sourceType=ContextTypeRef '>' pattern=Pattern body=XmuCoreStatement
		public Group getGroup() { return cGroup; }
		
		//'matchS'
		public Keyword getMatchSKeyword_0() { return cMatchSKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//sourceType=ContextTypeRef
		public Assignment getSourceTypeAssignment_2() { return cSourceTypeAssignment_2; }
		
		//ContextTypeRef
		public RuleCall getSourceTypeContextTypeRefParserRuleCall_2_0() { return cSourceTypeContextTypeRefParserRuleCall_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
		
		//pattern=Pattern
		public Assignment getPatternAssignment_4() { return cPatternAssignment_4; }
		
		//Pattern
		public RuleCall getPatternPatternParserRuleCall_4_0() { return cPatternPatternParserRuleCall_4_0; }
		
		//body=XmuCoreStatement
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }
		
		//XmuCoreStatement
		public RuleCall getBodyXmuCoreStatementParserRuleCall_5_0() { return cBodyXmuCoreStatementParserRuleCall_5_0; }
	}
	public class XmuCoreMatchViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreMatchView");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMatchVKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cViewTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cViewTypeContextTypeRefParserRuleCall_2_0 = (RuleCall)cViewTypeAssignment_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPatternAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPatternPatternParserRuleCall_4_0 = (RuleCall)cPatternAssignment_4.eContents().get(0);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyXmuCoreStatementParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		
		//XmuCoreMatchView:
		//	'matchV' '<' viewType=ContextTypeRef '>' pattern=Pattern body=XmuCoreStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//'matchV' '<' viewType=ContextTypeRef '>' pattern=Pattern body=XmuCoreStatement
		public Group getGroup() { return cGroup; }
		
		//'matchV'
		public Keyword getMatchVKeyword_0() { return cMatchVKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//viewType=ContextTypeRef
		public Assignment getViewTypeAssignment_2() { return cViewTypeAssignment_2; }
		
		//ContextTypeRef
		public RuleCall getViewTypeContextTypeRefParserRuleCall_2_0() { return cViewTypeContextTypeRefParserRuleCall_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
		
		//pattern=Pattern
		public Assignment getPatternAssignment_4() { return cPatternAssignment_4; }
		
		//Pattern
		public RuleCall getPatternPatternParserRuleCall_4_0() { return cPatternPatternParserRuleCall_4_0; }
		
		//body=XmuCoreStatement
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }
		
		//XmuCoreStatement
		public RuleCall getBodyXmuCoreStatementParserRuleCall_5_0() { return cBodyXmuCoreStatementParserRuleCall_5_0; }
	}
	public class XmuCoreExpandSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreExpandSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExpandSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPatternAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPatternPatternParserRuleCall_1_0 = (RuleCall)cPatternAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMappingsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMappingsVarMappingParserRuleCall_3_0 = (RuleCall)cMappingsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMappingsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMappingsVarMappingParserRuleCall_4_1_0 = (RuleCall)cMappingsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyXmuCoreStatementParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		
		//XmuCoreExpandSource:
		//	'expandS' pattern=Pattern '{' mappings+=VarMapping (',' mappings+=VarMapping)* '}' '->' body=XmuCoreStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//'expandS' pattern=Pattern '{' mappings+=VarMapping (',' mappings+=VarMapping)* '}' '->' body=XmuCoreStatement
		public Group getGroup() { return cGroup; }
		
		//'expandS'
		public Keyword getExpandSKeyword_0() { return cExpandSKeyword_0; }
		
		//pattern=Pattern
		public Assignment getPatternAssignment_1() { return cPatternAssignment_1; }
		
		//Pattern
		public RuleCall getPatternPatternParserRuleCall_1_0() { return cPatternPatternParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//mappings+=VarMapping
		public Assignment getMappingsAssignment_3() { return cMappingsAssignment_3; }
		
		//VarMapping
		public RuleCall getMappingsVarMappingParserRuleCall_3_0() { return cMappingsVarMappingParserRuleCall_3_0; }
		
		//(',' mappings+=VarMapping)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//mappings+=VarMapping
		public Assignment getMappingsAssignment_4_1() { return cMappingsAssignment_4_1; }
		
		//VarMapping
		public RuleCall getMappingsVarMappingParserRuleCall_4_1_0() { return cMappingsVarMappingParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_6() { return cHyphenMinusGreaterThanSignKeyword_6; }
		
		//body=XmuCoreStatement
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }
		
		//XmuCoreStatement
		public RuleCall getBodyXmuCoreStatementParserRuleCall_7_0() { return cBodyXmuCoreStatementParserRuleCall_7_0; }
	}
	public class XmuCoreExpandViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreExpandView");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExpandVKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPatternAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPatternPatternParserRuleCall_1_0 = (RuleCall)cPatternAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMappingsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMappingsVarMappingParserRuleCall_3_0 = (RuleCall)cMappingsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMappingsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMappingsVarMappingParserRuleCall_4_1_0 = (RuleCall)cMappingsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyXmuCoreStatementParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		
		//XmuCoreExpandView:
		//	'expandV' pattern=Pattern '{' mappings+=VarMapping (',' mappings+=VarMapping)* '}' '->' body=XmuCoreStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//'expandV' pattern=Pattern '{' mappings+=VarMapping (',' mappings+=VarMapping)* '}' '->' body=XmuCoreStatement
		public Group getGroup() { return cGroup; }
		
		//'expandV'
		public Keyword getExpandVKeyword_0() { return cExpandVKeyword_0; }
		
		//pattern=Pattern
		public Assignment getPatternAssignment_1() { return cPatternAssignment_1; }
		
		//Pattern
		public RuleCall getPatternPatternParserRuleCall_1_0() { return cPatternPatternParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//mappings+=VarMapping
		public Assignment getMappingsAssignment_3() { return cMappingsAssignment_3; }
		
		//VarMapping
		public RuleCall getMappingsVarMappingParserRuleCall_3_0() { return cMappingsVarMappingParserRuleCall_3_0; }
		
		//(',' mappings+=VarMapping)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//mappings+=VarMapping
		public Assignment getMappingsAssignment_4_1() { return cMappingsAssignment_4_1; }
		
		//VarMapping
		public RuleCall getMappingsVarMappingParserRuleCall_4_1_0() { return cMappingsVarMappingParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_6() { return cHyphenMinusGreaterThanSignKeyword_6; }
		
		//body=XmuCoreStatement
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }
		
		//XmuCoreStatement
		public RuleCall getBodyXmuCoreStatementParserRuleCall_7_0() { return cBodyXmuCoreStatementParserRuleCall_7_0; }
	}
	public class VarMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.VarMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFromAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFromValidIDParserRuleCall_1_0 = (RuleCall)cFromAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cToAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cToValidIDParserRuleCall_3_0 = (RuleCall)cToAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VarMapping:
		//	'(' from=ValidID '->' to=ValidID ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' from=ValidID '->' to=ValidID ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//from=ValidID
		public Assignment getFromAssignment_1() { return cFromAssignment_1; }
		
		//ValidID
		public RuleCall getFromValidIDParserRuleCall_1_0() { return cFromValidIDParserRuleCall_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//to=ValidID
		public Assignment getToAssignment_3() { return cToAssignment_3; }
		
		//ValidID
		public RuleCall getToValidIDParserRuleCall_3_0() { return cToValidIDParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class XmuCoreGraphReplaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreGraphReplace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReplaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSourcePatternParserRuleCall_1_0 = (RuleCall)cSourceAssignment_1.eContents().get(0);
		private final Assignment cViewAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cViewPatternParserRuleCall_2_0 = (RuleCall)cViewAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConversionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConversionsConversionParserRuleCall_4_0 = (RuleCall)cConversionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//XmuCoreGraphReplace:
		//	'replace' source=Pattern view=Pattern '{' conversions+=Conversion+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'replace' source=Pattern view=Pattern '{' conversions+=Conversion+ '}'
		public Group getGroup() { return cGroup; }
		
		//'replace'
		public Keyword getReplaceKeyword_0() { return cReplaceKeyword_0; }
		
		//source=Pattern
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }
		
		//Pattern
		public RuleCall getSourcePatternParserRuleCall_1_0() { return cSourcePatternParserRuleCall_1_0; }
		
		//view=Pattern
		public Assignment getViewAssignment_2() { return cViewAssignment_2; }
		
		//Pattern
		public RuleCall getViewPatternParserRuleCall_2_0() { return cViewPatternParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//conversions+=Conversion+
		public Assignment getConversionsAssignment_4() { return cConversionsAssignment_4; }
		
		//Conversion
		public RuleCall getConversionsConversionParserRuleCall_4_0() { return cConversionsConversionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class XmuCoreParallelCompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreParallelComposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSourceTypeContextTypeRefParserRuleCall_1_0 = (RuleCall)cSourceTypeAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cViewTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cViewTypeContextTypeRefParserRuleCall_3_0 = (RuleCall)cViewTypeAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodiesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodiesXmuCoreCompositionChildStatementParserRuleCall_5_0 = (RuleCall)cBodiesAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cVerticalLineKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cBodiesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cBodiesXmuCoreCompositionChildStatementParserRuleCall_6_1_0 = (RuleCall)cBodiesAssignment_6_1.eContents().get(0);
		
		//XmuCoreParallelComposition:
		//	'<' sourceType=ContextTypeRef ',' viewType=ContextTypeRef '>' bodies+=XmuCoreCompositionChildStatement (=> '|'
		//	bodies+=XmuCoreCompositionChildStatement)+;
		@Override public ParserRule getRule() { return rule; }
		
		//'<' sourceType=ContextTypeRef ',' viewType=ContextTypeRef '>' bodies+=XmuCoreCompositionChildStatement (=> '|'
		//bodies+=XmuCoreCompositionChildStatement)+
		public Group getGroup() { return cGroup; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//sourceType=ContextTypeRef
		public Assignment getSourceTypeAssignment_1() { return cSourceTypeAssignment_1; }
		
		//ContextTypeRef
		public RuleCall getSourceTypeContextTypeRefParserRuleCall_1_0() { return cSourceTypeContextTypeRefParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//viewType=ContextTypeRef
		public Assignment getViewTypeAssignment_3() { return cViewTypeAssignment_3; }
		
		//ContextTypeRef
		public RuleCall getViewTypeContextTypeRefParserRuleCall_3_0() { return cViewTypeContextTypeRefParserRuleCall_3_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//bodies+=XmuCoreCompositionChildStatement
		public Assignment getBodiesAssignment_5() { return cBodiesAssignment_5; }
		
		//XmuCoreCompositionChildStatement
		public RuleCall getBodiesXmuCoreCompositionChildStatementParserRuleCall_5_0() { return cBodiesXmuCoreCompositionChildStatementParserRuleCall_5_0; }
		
		//(=> '|' bodies+=XmuCoreCompositionChildStatement)+
		public Group getGroup_6() { return cGroup_6; }
		
		//=> '|'
		public Keyword getVerticalLineKeyword_6_0() { return cVerticalLineKeyword_6_0; }
		
		//bodies+=XmuCoreCompositionChildStatement
		public Assignment getBodiesAssignment_6_1() { return cBodiesAssignment_6_1; }
		
		//XmuCoreCompositionChildStatement
		public RuleCall getBodiesXmuCoreCompositionChildStatementParserRuleCall_6_1_0() { return cBodiesXmuCoreCompositionChildStatementParserRuleCall_6_1_0; }
	}
	public class XmuCoreSwitchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreSwitch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSourceTypeContextTypeRefParserRuleCall_2_0 = (RuleCall)cSourceTypeAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cViewTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cViewTypeContextTypeRefParserRuleCall_4_0 = (RuleCall)cViewTypeAssignment_4.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBranchesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBranchesXmuCoreSwitchBranchParserRuleCall_7_0 = (RuleCall)cBranchesAssignment_7.eContents().get(0);
		private final Assignment cAdaptionsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cAdaptionsXmuCoreSwitchAdaptionParserRuleCall_8_0 = (RuleCall)cAdaptionsAssignment_8.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//XmuCoreSwitch:
		//	'switch' '<' sourceType=ContextTypeRef ',' viewType=ContextTypeRef '>' '['
		//	branches+=XmuCoreSwitchBranch+
		//	adaptions+=XmuCoreSwitchAdaption*
		//	']';
		@Override public ParserRule getRule() { return rule; }
		
		//'switch' '<' sourceType=ContextTypeRef ',' viewType=ContextTypeRef '>' '[' branches+=XmuCoreSwitchBranch+
		//adaptions+=XmuCoreSwitchAdaption* ']'
		public Group getGroup() { return cGroup; }
		
		//'switch'
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//sourceType=ContextTypeRef
		public Assignment getSourceTypeAssignment_2() { return cSourceTypeAssignment_2; }
		
		//ContextTypeRef
		public RuleCall getSourceTypeContextTypeRefParserRuleCall_2_0() { return cSourceTypeContextTypeRefParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//viewType=ContextTypeRef
		public Assignment getViewTypeAssignment_4() { return cViewTypeAssignment_4; }
		
		//ContextTypeRef
		public RuleCall getViewTypeContextTypeRefParserRuleCall_4_0() { return cViewTypeContextTypeRefParserRuleCall_4_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_6() { return cLeftSquareBracketKeyword_6; }
		
		//branches+=XmuCoreSwitchBranch+
		public Assignment getBranchesAssignment_7() { return cBranchesAssignment_7; }
		
		//XmuCoreSwitchBranch
		public RuleCall getBranchesXmuCoreSwitchBranchParserRuleCall_7_0() { return cBranchesXmuCoreSwitchBranchParserRuleCall_7_0; }
		
		//adaptions+=XmuCoreSwitchAdaption*
		public Assignment getAdaptionsAssignment_8() { return cAdaptionsAssignment_8; }
		
		//XmuCoreSwitchAdaption
		public RuleCall getAdaptionsXmuCoreSwitchAdaptionParserRuleCall_8_0() { return cAdaptionsXmuCoreSwitchAdaptionParserRuleCall_8_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_9() { return cRightSquareBracketKeyword_9; }
	}
	public class XmuCoreSwitchBranchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreSwitchBranch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionContextAwareConditionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionXmuCoreStatementParserRuleCall_3_0 = (RuleCall)cActionAssignment_3.eContents().get(0);
		
		//XmuCoreSwitchBranch:
		//	'case' condition=ContextAwareCondition '->' action=XmuCoreStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//'case' condition=ContextAwareCondition '->' action=XmuCoreStatement
		public Group getGroup() { return cGroup; }
		
		//'case'
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }
		
		//condition=ContextAwareCondition
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//ContextAwareCondition
		public RuleCall getConditionContextAwareConditionParserRuleCall_1_0() { return cConditionContextAwareConditionParserRuleCall_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//action=XmuCoreStatement
		public Assignment getActionAssignment_3() { return cActionAssignment_3; }
		
		//XmuCoreStatement
		public RuleCall getActionXmuCoreStatementParserRuleCall_3_0() { return cActionXmuCoreStatementParserRuleCall_3_0; }
	}
	public class XmuCoreSwitchAdaptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreSwitchAdaption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAdaptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionContextAwareConditionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionContextAwareUnidirectionalActionParserRuleCall_3_0 = (RuleCall)cActionAssignment_3.eContents().get(0);
		
		//XmuCoreSwitchAdaption:
		//	'adaption' condition=ContextAwareCondition '->' action=ContextAwareUnidirectionalAction;
		@Override public ParserRule getRule() { return rule; }
		
		//'adaption' condition=ContextAwareCondition '->' action=ContextAwareUnidirectionalAction
		public Group getGroup() { return cGroup; }
		
		//'adaption'
		public Keyword getAdaptionKeyword_0() { return cAdaptionKeyword_0; }
		
		//condition=ContextAwareCondition
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//ContextAwareCondition
		public RuleCall getConditionContextAwareConditionParserRuleCall_1_0() { return cConditionContextAwareConditionParserRuleCall_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//action=ContextAwareUnidirectionalAction
		public Assignment getActionAssignment_3() { return cActionAssignment_3; }
		
		//ContextAwareUnidirectionalAction
		public RuleCall getActionContextAwareUnidirectionalActionParserRuleCall_3_0() { return cActionContextAwareUnidirectionalActionParserRuleCall_3_0; }
	}
	public class ConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.Conversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBigulAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBigulBiGULStatementParserRuleCall_0_0 = (RuleCall)cBigulAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSourceValidIDParserRuleCall_2_0 = (RuleCall)cSourceAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSourceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSourceValidIDParserRuleCall_3_1_0 = (RuleCall)cSourceAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cViewAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cViewValidIDParserRuleCall_6_0 = (RuleCall)cViewAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cViewAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cViewValidIDParserRuleCall_7_1_0 = (RuleCall)cViewAssignment_7_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Conversion:
		//	bigul=BiGULStatement '(' source+=ValidID (',' source+=ValidID)* ')' '(' view+=ValidID (',' view+=ValidID)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//bigul=BiGULStatement '(' source+=ValidID (',' source+=ValidID)* ')' '(' view+=ValidID (',' view+=ValidID)* ')'
		public Group getGroup() { return cGroup; }
		
		//bigul=BiGULStatement
		public Assignment getBigulAssignment_0() { return cBigulAssignment_0; }
		
		//BiGULStatement
		public RuleCall getBigulBiGULStatementParserRuleCall_0_0() { return cBigulBiGULStatementParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//source+=ValidID
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }
		
		//ValidID
		public RuleCall getSourceValidIDParserRuleCall_2_0() { return cSourceValidIDParserRuleCall_2_0; }
		
		//(',' source+=ValidID)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//source+=ValidID
		public Assignment getSourceAssignment_3_1() { return cSourceAssignment_3_1; }
		
		//ValidID
		public RuleCall getSourceValidIDParserRuleCall_3_1_0() { return cSourceValidIDParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//view+=ValidID
		public Assignment getViewAssignment_6() { return cViewAssignment_6; }
		
		//ValidID
		public RuleCall getViewValidIDParserRuleCall_6_0() { return cViewValidIDParserRuleCall_6_0; }
		
		//(',' view+=ValidID)*
		public Group getGroup_7() { return cGroup_7; }
		
		//','
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//view+=ValidID
		public Assignment getViewAssignment_7_1() { return cViewAssignment_7_1; }
		
		//ValidID
		public RuleCall getViewValidIDParserRuleCall_7_1_0() { return cViewValidIDParserRuleCall_7_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class XmuCoreForkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreFork");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSourceTypeContextTypeRefParserRuleCall_1_0 = (RuleCall)cSourceTypeAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cViewTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cViewTypeContextTypeRefParserRuleCall_3_0 = (RuleCall)cViewTypeAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cForksAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cForksXmuCoreForkBranchParserRuleCall_5_0 = (RuleCall)cForksAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cVerticalLineKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cForksAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cForksXmuCoreForkBranchParserRuleCall_6_1_0 = (RuleCall)cForksAssignment_6_1.eContents().get(0);
		
		//XmuCoreFork:
		//	'<' sourceType=ContextTypeRef ',' viewType=ContextTypeRef '>' forks+=XmuCoreForkBranch (=> '|'
		//	forks+=XmuCoreForkBranch)+;
		@Override public ParserRule getRule() { return rule; }
		
		//'<' sourceType=ContextTypeRef ',' viewType=ContextTypeRef '>' forks+=XmuCoreForkBranch (=> '|'
		//forks+=XmuCoreForkBranch)+
		public Group getGroup() { return cGroup; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//sourceType=ContextTypeRef
		public Assignment getSourceTypeAssignment_1() { return cSourceTypeAssignment_1; }
		
		//ContextTypeRef
		public RuleCall getSourceTypeContextTypeRefParserRuleCall_1_0() { return cSourceTypeContextTypeRefParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//viewType=ContextTypeRef
		public Assignment getViewTypeAssignment_3() { return cViewTypeAssignment_3; }
		
		//ContextTypeRef
		public RuleCall getViewTypeContextTypeRefParserRuleCall_3_0() { return cViewTypeContextTypeRefParserRuleCall_3_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//forks+=XmuCoreForkBranch
		public Assignment getForksAssignment_5() { return cForksAssignment_5; }
		
		//XmuCoreForkBranch
		public RuleCall getForksXmuCoreForkBranchParserRuleCall_5_0() { return cForksXmuCoreForkBranchParserRuleCall_5_0; }
		
		//(=> '|' forks+=XmuCoreForkBranch)+
		public Group getGroup_6() { return cGroup_6; }
		
		//=> '|'
		public Keyword getVerticalLineKeyword_6_0() { return cVerticalLineKeyword_6_0; }
		
		//forks+=XmuCoreForkBranch
		public Assignment getForksAssignment_6_1() { return cForksAssignment_6_1; }
		
		//XmuCoreForkBranch
		public RuleCall getForksXmuCoreForkBranchParserRuleCall_6_1_0() { return cForksXmuCoreForkBranchParserRuleCall_6_1_0; }
	}
	public class XmuCoreForkBranchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreForkBranch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceMappingsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSourceMappingsVarMappingParserRuleCall_1_0 = (RuleCall)cSourceMappingsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSourceMappingsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSourceMappingsVarMappingParserRuleCall_2_1_0 = (RuleCall)cSourceMappingsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cViewMappingsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cViewMappingsVarMappingParserRuleCall_5_0 = (RuleCall)cViewMappingsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cViewMappingsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cViewMappingsVarMappingParserRuleCall_6_1_0 = (RuleCall)cViewMappingsAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cBodyAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cBodyXmuCoreStatementParserRuleCall_9_0 = (RuleCall)cBodyAssignment_9.eContents().get(0);
		
		//XmuCoreForkBranch:
		//	'(' sourceMappings+=VarMapping (',' sourceMappings+=VarMapping)* ')'
		//	'(' viewMappings+=VarMapping (',' viewMappings+=VarMapping)* ')' '->'
		//	body=XmuCoreStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' sourceMappings+=VarMapping (',' sourceMappings+=VarMapping)* ')' '(' viewMappings+=VarMapping (','
		//viewMappings+=VarMapping)* ')' '->' body=XmuCoreStatement
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//sourceMappings+=VarMapping
		public Assignment getSourceMappingsAssignment_1() { return cSourceMappingsAssignment_1; }
		
		//VarMapping
		public RuleCall getSourceMappingsVarMappingParserRuleCall_1_0() { return cSourceMappingsVarMappingParserRuleCall_1_0; }
		
		//(',' sourceMappings+=VarMapping)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//sourceMappings+=VarMapping
		public Assignment getSourceMappingsAssignment_2_1() { return cSourceMappingsAssignment_2_1; }
		
		//VarMapping
		public RuleCall getSourceMappingsVarMappingParserRuleCall_2_1_0() { return cSourceMappingsVarMappingParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//viewMappings+=VarMapping
		public Assignment getViewMappingsAssignment_5() { return cViewMappingsAssignment_5; }
		
		//VarMapping
		public RuleCall getViewMappingsVarMappingParserRuleCall_5_0() { return cViewMappingsVarMappingParserRuleCall_5_0; }
		
		//(',' viewMappings+=VarMapping)*
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//viewMappings+=VarMapping
		public Assignment getViewMappingsAssignment_6_1() { return cViewMappingsAssignment_6_1; }
		
		//VarMapping
		public RuleCall getViewMappingsVarMappingParserRuleCall_6_1_0() { return cViewMappingsVarMappingParserRuleCall_6_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_8() { return cHyphenMinusGreaterThanSignKeyword_8; }
		
		//body=XmuCoreStatement
		public Assignment getBodyAssignment_9() { return cBodyAssignment_9; }
		
		//XmuCoreStatement
		public RuleCall getBodyXmuCoreStatementParserRuleCall_9_0() { return cBodyXmuCoreStatementParserRuleCall_9_0; }
	}
	public class XmuCoreAlignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreAlign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSourceTypeContextTypeRefParserRuleCall_2_0 = (RuleCall)cSourceTypeAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cViewTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cViewTypeContextTypeRefParserRuleCall_4_0 = (RuleCall)cViewTypeAssignment_4.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSourcePatternAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSourcePatternPatternParserRuleCall_6_0 = (RuleCall)cSourcePatternAssignment_6.eContents().get(0);
		private final Assignment cViewPatternAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cViewPatternPatternParserRuleCall_7_0 = (RuleCall)cViewPatternAssignment_7.eContents().get(0);
		private final Keyword cWithKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cAlignmentAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cAlignmentContextAwareConditionParserRuleCall_9_0 = (RuleCall)cAlignmentAssignment_9.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_10 = (UnorderedGroup)cGroup.eContents().get(10);
		private final Group cGroup_10_0 = (Group)cUnorderedGroup_10.eContents().get(0);
		private final Keyword cMatchKeyword_10_0_0 = (Keyword)cGroup_10_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_10_0_1 = (Keyword)cGroup_10_0.eContents().get(1);
		private final Assignment cMatchAssignment_10_0_2 = (Assignment)cGroup_10_0.eContents().get(2);
		private final RuleCall cMatchXmuCoreStatementParserRuleCall_10_0_2_0 = (RuleCall)cMatchAssignment_10_0_2.eContents().get(0);
		private final Group cGroup_10_1 = (Group)cUnorderedGroup_10.eContents().get(1);
		private final Keyword cUnmatchSKeyword_10_1_0 = (Keyword)cGroup_10_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_10_1_1 = (Keyword)cGroup_10_1.eContents().get(1);
		private final Assignment cUnmatchSAssignment_10_1_2 = (Assignment)cGroup_10_1.eContents().get(2);
		private final RuleCall cUnmatchSContextAwareUnidirectionalActionParserRuleCall_10_1_2_0 = (RuleCall)cUnmatchSAssignment_10_1_2.eContents().get(0);
		private final Group cGroup_10_2 = (Group)cUnorderedGroup_10.eContents().get(2);
		private final Keyword cUnmatchVKeyword_10_2_0 = (Keyword)cGroup_10_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_10_2_1 = (Keyword)cGroup_10_2.eContents().get(1);
		private final Assignment cUnmatchVAssignment_10_2_2 = (Assignment)cGroup_10_2.eContents().get(2);
		private final RuleCall cUnmatchVContextAwareUnidirectionalActionParserRuleCall_10_2_2_0 = (RuleCall)cUnmatchVAssignment_10_2_2.eContents().get(0);
		
		//XmuCoreAlign:
		//	'align' '<' sourceType=ContextTypeRef ',' viewType=ContextTypeRef '>' sourcePattern=Pattern viewPattern=Pattern 'with'
		//	alignment=ContextAwareCondition ('match' '->' match=XmuCoreStatement & 'unmatchS' '->'
		//	unmatchS=ContextAwareUnidirectionalAction & 'unmatchV' '->' unmatchV=ContextAwareUnidirectionalAction);
		@Override public ParserRule getRule() { return rule; }
		
		//'align' '<' sourceType=ContextTypeRef ',' viewType=ContextTypeRef '>' sourcePattern=Pattern viewPattern=Pattern 'with'
		//alignment=ContextAwareCondition ('match' '->' match=XmuCoreStatement & 'unmatchS' '->'
		//unmatchS=ContextAwareUnidirectionalAction & 'unmatchV' '->' unmatchV=ContextAwareUnidirectionalAction)
		public Group getGroup() { return cGroup; }
		
		//'align'
		public Keyword getAlignKeyword_0() { return cAlignKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//sourceType=ContextTypeRef
		public Assignment getSourceTypeAssignment_2() { return cSourceTypeAssignment_2; }
		
		//ContextTypeRef
		public RuleCall getSourceTypeContextTypeRefParserRuleCall_2_0() { return cSourceTypeContextTypeRefParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//viewType=ContextTypeRef
		public Assignment getViewTypeAssignment_4() { return cViewTypeAssignment_4; }
		
		//ContextTypeRef
		public RuleCall getViewTypeContextTypeRefParserRuleCall_4_0() { return cViewTypeContextTypeRefParserRuleCall_4_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }
		
		//sourcePattern=Pattern
		public Assignment getSourcePatternAssignment_6() { return cSourcePatternAssignment_6; }
		
		//Pattern
		public RuleCall getSourcePatternPatternParserRuleCall_6_0() { return cSourcePatternPatternParserRuleCall_6_0; }
		
		//viewPattern=Pattern
		public Assignment getViewPatternAssignment_7() { return cViewPatternAssignment_7; }
		
		//Pattern
		public RuleCall getViewPatternPatternParserRuleCall_7_0() { return cViewPatternPatternParserRuleCall_7_0; }
		
		//'with'
		public Keyword getWithKeyword_8() { return cWithKeyword_8; }
		
		//alignment=ContextAwareCondition
		public Assignment getAlignmentAssignment_9() { return cAlignmentAssignment_9; }
		
		//ContextAwareCondition
		public RuleCall getAlignmentContextAwareConditionParserRuleCall_9_0() { return cAlignmentContextAwareConditionParserRuleCall_9_0; }
		
		//'match' '->' match=XmuCoreStatement & 'unmatchS' '->' unmatchS=ContextAwareUnidirectionalAction & 'unmatchV' '->'
		//unmatchV=ContextAwareUnidirectionalAction
		public UnorderedGroup getUnorderedGroup_10() { return cUnorderedGroup_10; }
		
		//'match' '->' match=XmuCoreStatement
		public Group getGroup_10_0() { return cGroup_10_0; }
		
		//'match'
		public Keyword getMatchKeyword_10_0_0() { return cMatchKeyword_10_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_10_0_1() { return cHyphenMinusGreaterThanSignKeyword_10_0_1; }
		
		//match=XmuCoreStatement
		public Assignment getMatchAssignment_10_0_2() { return cMatchAssignment_10_0_2; }
		
		//XmuCoreStatement
		public RuleCall getMatchXmuCoreStatementParserRuleCall_10_0_2_0() { return cMatchXmuCoreStatementParserRuleCall_10_0_2_0; }
		
		//'unmatchS' '->' unmatchS=ContextAwareUnidirectionalAction
		public Group getGroup_10_1() { return cGroup_10_1; }
		
		//'unmatchS'
		public Keyword getUnmatchSKeyword_10_1_0() { return cUnmatchSKeyword_10_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_10_1_1() { return cHyphenMinusGreaterThanSignKeyword_10_1_1; }
		
		//unmatchS=ContextAwareUnidirectionalAction
		public Assignment getUnmatchSAssignment_10_1_2() { return cUnmatchSAssignment_10_1_2; }
		
		//ContextAwareUnidirectionalAction
		public RuleCall getUnmatchSContextAwareUnidirectionalActionParserRuleCall_10_1_2_0() { return cUnmatchSContextAwareUnidirectionalActionParserRuleCall_10_1_2_0; }
		
		//'unmatchV' '->' unmatchV=ContextAwareUnidirectionalAction
		public Group getGroup_10_2() { return cGroup_10_2; }
		
		//'unmatchV'
		public Keyword getUnmatchVKeyword_10_2_0() { return cUnmatchVKeyword_10_2_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_10_2_1() { return cHyphenMinusGreaterThanSignKeyword_10_2_1; }
		
		//unmatchV=ContextAwareUnidirectionalAction
		public Assignment getUnmatchVAssignment_10_2_2() { return cUnmatchVAssignment_10_2_2; }
		
		//ContextAwareUnidirectionalAction
		public RuleCall getUnmatchVContextAwareUnidirectionalActionParserRuleCall_10_2_2_0() { return cUnmatchVContextAwareUnidirectionalActionParserRuleCall_10_2_2_0; }
	}
	public class XmuCoreFunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreFunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceMappingsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSourceMappingsVarMappingParserRuleCall_1_0 = (RuleCall)cSourceMappingsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSourceMappingsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSourceMappingsVarMappingParserRuleCall_2_1_0 = (RuleCall)cSourceMappingsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cViewMappingsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cViewMappingsVarMappingParserRuleCall_5_0 = (RuleCall)cViewMappingsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cViewMappingsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cViewMappingsVarMappingParserRuleCall_6_1_0 = (RuleCall)cViewMappingsAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cTargetAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cTargetBXFunctionDefinitionCrossReference_9_0 = (CrossReference)cTargetAssignment_9.eContents().get(0);
		private final RuleCall cTargetBXFunctionDefinitionValidIDParserRuleCall_9_0_1 = (RuleCall)cTargetBXFunctionDefinitionCrossReference_9_0.eContents().get(1);
		
		//XmuCoreFunctionCall:
		//	'(' sourceMappings+=VarMapping (',' sourceMappings+=VarMapping)* ')'
		//	'(' viewMappings+=VarMapping (',' viewMappings+=VarMapping)* ')' '->'
		//	target=[BXFunctionDefinition|ValidID];
		@Override public ParserRule getRule() { return rule; }
		
		//'(' sourceMappings+=VarMapping (',' sourceMappings+=VarMapping)* ')' '(' viewMappings+=VarMapping (','
		//viewMappings+=VarMapping)* ')' '->' target=[BXFunctionDefinition|ValidID]
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//sourceMappings+=VarMapping
		public Assignment getSourceMappingsAssignment_1() { return cSourceMappingsAssignment_1; }
		
		//VarMapping
		public RuleCall getSourceMappingsVarMappingParserRuleCall_1_0() { return cSourceMappingsVarMappingParserRuleCall_1_0; }
		
		//(',' sourceMappings+=VarMapping)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//sourceMappings+=VarMapping
		public Assignment getSourceMappingsAssignment_2_1() { return cSourceMappingsAssignment_2_1; }
		
		//VarMapping
		public RuleCall getSourceMappingsVarMappingParserRuleCall_2_1_0() { return cSourceMappingsVarMappingParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//viewMappings+=VarMapping
		public Assignment getViewMappingsAssignment_5() { return cViewMappingsAssignment_5; }
		
		//VarMapping
		public RuleCall getViewMappingsVarMappingParserRuleCall_5_0() { return cViewMappingsVarMappingParserRuleCall_5_0; }
		
		//(',' viewMappings+=VarMapping)*
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//viewMappings+=VarMapping
		public Assignment getViewMappingsAssignment_6_1() { return cViewMappingsAssignment_6_1; }
		
		//VarMapping
		public RuleCall getViewMappingsVarMappingParserRuleCall_6_1_0() { return cViewMappingsVarMappingParserRuleCall_6_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_8() { return cHyphenMinusGreaterThanSignKeyword_8; }
		
		//target=[BXFunctionDefinition|ValidID]
		public Assignment getTargetAssignment_9() { return cTargetAssignment_9; }
		
		//[BXFunctionDefinition|ValidID]
		public CrossReference getTargetBXFunctionDefinitionCrossReference_9_0() { return cTargetBXFunctionDefinitionCrossReference_9_0; }
		
		//ValidID
		public RuleCall getTargetBXFunctionDefinitionValidIDParserRuleCall_9_0_1() { return cTargetBXFunctionDefinitionValidIDParserRuleCall_9_0_1; }
	}
	public class ContextAwareConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.ContextAwareCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionXExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ContextAwareCondition:
		//	'[' condition=XExpression ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' condition=XExpression ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//condition=XExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//XExpression
		public RuleCall getConditionXExpressionParserRuleCall_1_0() { return cConditionXExpressionParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class ContextAwareUnidirectionalActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.ContextAwareUnidirectionalAction");
		private final Assignment cActionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cActionXBlockExpressionParserRuleCall_0 = (RuleCall)cActionAssignment.eContents().get(0);
		
		//ContextAwareUnidirectionalAction:
		//	action=XBlockExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//action=XBlockExpression
		public Assignment getActionAssignment() { return cActionAssignment; }
		
		//XBlockExpression
		public RuleCall getActionXBlockExpressionParserRuleCall_0() { return cActionXBlockExpressionParserRuleCall_0; }
	}
	public class BiGULStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.BiGULStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBiGULReplaceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBiGULSkipParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BiGULStatement:
		//	BiGULReplace | BiGULSkip;
		@Override public ParserRule getRule() { return rule; }
		
		//BiGULReplace | BiGULSkip
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BiGULReplace
		public RuleCall getBiGULReplaceParserRuleCall_0() { return cBiGULReplaceParserRuleCall_0; }
		
		//BiGULSkip
		public RuleCall getBiGULSkipParserRuleCall_1() { return cBiGULSkipParserRuleCall_1; }
	}
	public class BiGULReplaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.BiGULReplace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBiGULReplaceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReplaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BiGULReplace:
		//	{BiGULReplace} 'replace';
		@Override public ParserRule getRule() { return rule; }
		
		//{BiGULReplace} 'replace'
		public Group getGroup() { return cGroup; }
		
		//{BiGULReplace}
		public Action getBiGULReplaceAction_0() { return cBiGULReplaceAction_0; }
		
		//'replace'
		public Keyword getReplaceKeyword_1() { return cReplaceKeyword_1; }
	}
	public class BiGULSkipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.BiGULSkip");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBiGULSkipAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSkipKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BiGULSkip:
		//	{BiGULSkip} 'skip';
		@Override public ParserRule getRule() { return rule; }
		
		//{BiGULSkip} 'skip'
		public Group getGroup() { return cGroup; }
		
		//{BiGULSkip}
		public Action getBiGULSkipAction_0() { return cBiGULSkipAction_0; }
		
		//'skip'
		public Keyword getSkipKeyword_1() { return cSkipKeyword_1; }
	}
	public class QualifiedValidIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.QualifiedValidID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//QualifiedValidID:
		//	ValidID '.' ValidID;
		@Override public ParserRule getRule() { return rule; }
		
		//ValidID '.' ValidID
		public Group getGroup() { return cGroup; }
		
		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//ValidID
		public RuleCall getValidIDParserRuleCall_2() { return cValidIDParserRuleCall_2; }
	}
	
	
	private final BXProgramElements pBXProgram;
	private final ImportSectionElements pImportSection;
	private final DefinitionElements pDefinition;
	private final BXFunctionDefinitionElements pBXFunctionDefinition;
	private final TypeDefinitionElements pTypeDefinition;
	private final TypeVarElements pTypeVar;
	private final TypeRefElements pTypeRef;
	private final PatternDefinitionElements pPatternDefinition;
	private final IndexDefinitionElements pIndexDefinition;
	private final AnonymousPatternDefinitionElements pAnonymousPatternDefinition;
	private final PatternNodeElements pPatternNode;
	private final PatternEdgeElements pPatternEdge;
	private final PatternValueConditionElements pPatternValueCondition;
	private final PatternNodeRefElements pPatternNodeRef;
	private final PatternElements pPattern;
	private final ContextTypeElements pContextType;
	private final ContextTypeRefElements pContextTypeRef;
	private final PatternDefinitionReferenceElements pPatternDefinitionReference;
	private final XmuCoreStatementElements pXmuCoreStatement;
	private final XmuCoreCompositionChildStatementElements pXmuCoreCompositionChildStatement;
	private final XmuCoreMatchSourceElements pXmuCoreMatchSource;
	private final XmuCoreMatchViewElements pXmuCoreMatchView;
	private final XmuCoreExpandSourceElements pXmuCoreExpandSource;
	private final XmuCoreExpandViewElements pXmuCoreExpandView;
	private final VarMappingElements pVarMapping;
	private final XmuCoreGraphReplaceElements pXmuCoreGraphReplace;
	private final XmuCoreParallelCompositionElements pXmuCoreParallelComposition;
	private final XmuCoreSwitchElements pXmuCoreSwitch;
	private final XmuCoreSwitchBranchElements pXmuCoreSwitchBranch;
	private final XmuCoreSwitchAdaptionElements pXmuCoreSwitchAdaption;
	private final ConversionElements pConversion;
	private final XmuCoreForkElements pXmuCoreFork;
	private final XmuCoreForkBranchElements pXmuCoreForkBranch;
	private final XmuCoreAlignElements pXmuCoreAlign;
	private final XmuCoreFunctionCallElements pXmuCoreFunctionCall;
	private final ContextAwareConditionElements pContextAwareCondition;
	private final ContextAwareUnidirectionalActionElements pContextAwareUnidirectionalAction;
	private final BiGULStatementElements pBiGULStatement;
	private final BiGULReplaceElements pBiGULReplace;
	private final BiGULSkipElements pBiGULSkip;
	private final QualifiedValidIDElements pQualifiedValidID;
	
	private final Grammar grammar;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public BXCoreGrammarAccess(GrammarProvider grammarProvider,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pBXProgram = new BXProgramElements();
		this.pImportSection = new ImportSectionElements();
		this.pDefinition = new DefinitionElements();
		this.pBXFunctionDefinition = new BXFunctionDefinitionElements();
		this.pTypeDefinition = new TypeDefinitionElements();
		this.pTypeVar = new TypeVarElements();
		this.pTypeRef = new TypeRefElements();
		this.pPatternDefinition = new PatternDefinitionElements();
		this.pIndexDefinition = new IndexDefinitionElements();
		this.pAnonymousPatternDefinition = new AnonymousPatternDefinitionElements();
		this.pPatternNode = new PatternNodeElements();
		this.pPatternEdge = new PatternEdgeElements();
		this.pPatternValueCondition = new PatternValueConditionElements();
		this.pPatternNodeRef = new PatternNodeRefElements();
		this.pPattern = new PatternElements();
		this.pContextType = new ContextTypeElements();
		this.pContextTypeRef = new ContextTypeRefElements();
		this.pPatternDefinitionReference = new PatternDefinitionReferenceElements();
		this.pXmuCoreStatement = new XmuCoreStatementElements();
		this.pXmuCoreCompositionChildStatement = new XmuCoreCompositionChildStatementElements();
		this.pXmuCoreMatchSource = new XmuCoreMatchSourceElements();
		this.pXmuCoreMatchView = new XmuCoreMatchViewElements();
		this.pXmuCoreExpandSource = new XmuCoreExpandSourceElements();
		this.pXmuCoreExpandView = new XmuCoreExpandViewElements();
		this.pVarMapping = new VarMappingElements();
		this.pXmuCoreGraphReplace = new XmuCoreGraphReplaceElements();
		this.pXmuCoreParallelComposition = new XmuCoreParallelCompositionElements();
		this.pXmuCoreSwitch = new XmuCoreSwitchElements();
		this.pXmuCoreSwitchBranch = new XmuCoreSwitchBranchElements();
		this.pXmuCoreSwitchAdaption = new XmuCoreSwitchAdaptionElements();
		this.pConversion = new ConversionElements();
		this.pXmuCoreFork = new XmuCoreForkElements();
		this.pXmuCoreForkBranch = new XmuCoreForkBranchElements();
		this.pXmuCoreAlign = new XmuCoreAlignElements();
		this.pXmuCoreFunctionCall = new XmuCoreFunctionCallElements();
		this.pContextAwareCondition = new ContextAwareConditionElements();
		this.pContextAwareUnidirectionalAction = new ContextAwareUnidirectionalActionElements();
		this.pBiGULStatement = new BiGULStatementElements();
		this.pBiGULReplace = new BiGULReplaceElements();
		this.pBiGULSkip = new BiGULSkipElements();
		this.pQualifiedValidID = new QualifiedValidIDElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.ustb.sei.mde.bxcore.dsl.BXCore".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//BXProgram:
	//	imports+=ImportSection*
	//	javaImports=XImportSection?
	//	definitions+=Definition*;
	public BXProgramElements getBXProgramAccess() {
		return pBXProgram;
	}
	
	public ParserRule getBXProgramRule() {
		return getBXProgramAccess().getRule();
	}
	
	//ImportSection:
	//	'import' metamodel=[ecore::EPackage|STRING] 'as' shortName=ValidID;
	public ImportSectionElements getImportSectionAccess() {
		return pImportSection;
	}
	
	public ParserRule getImportSectionRule() {
		return getImportSectionAccess().getRule();
	}
	
	//Definition:
	//	TypeDefinition | PatternDefinition | BXFunctionDefinition | IndexDefinition;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	//BXFunctionDefinition:
	//	'function' name=ValidID '<' sourceType=ContextTypeRef ',' viewType=ContextTypeRef '>' '=' statement=XmuCoreStatement;
	public BXFunctionDefinitionElements getBXFunctionDefinitionAccess() {
		return pBXFunctionDefinition;
	}
	
	public ParserRule getBXFunctionDefinitionRule() {
		return getBXFunctionDefinitionAccess().getRule();
	}
	
	//TypeDefinition:
	//	'type' name=ValidID '=' '(' (typeVars+=TypeVar (',' typeVars+=TypeVar)*)? ')';
	public TypeDefinitionElements getTypeDefinitionAccess() {
		return pTypeDefinition;
	}
	
	public ParserRule getTypeDefinitionRule() {
		return getTypeDefinitionAccess().getRule();
	}
	
	//TypeVar:
	//	name=ValidID ':' type=TypeRef;
	public TypeVarElements getTypeVarAccess() {
		return pTypeVar;
	}
	
	public ParserRule getTypeVarRule() {
		return getTypeVarAccess().getRule();
	}
	
	//TypeRef:
	//	{EcoreTypeRef} type=[ecore::EClassifier|QualifiedValidID] | {PrimitiveTypeRef} type=('int' | 'boolean' | 'String');
	public TypeRefElements getTypeRefAccess() {
		return pTypeRef;
	}
	
	public ParserRule getTypeRefRule() {
		return getTypeRefAccess().getRule();
	}
	
	//PatternDefinition:
	//	'pattern' name=ValidID '=' root=PatternNode ('as' type=ValidID)?;
	public PatternDefinitionElements getPatternDefinitionAccess() {
		return pPatternDefinition;
	}
	
	public ParserRule getPatternDefinitionRule() {
		return getPatternDefinitionAccess().getRule();
	}
	
	//IndexDefinition:
	//	'index' name=ValidID '<' sourceType=ContextTypeRef ',' viewType=ContextTypeRef '>';
	public IndexDefinitionElements getIndexDefinitionAccess() {
		return pIndexDefinition;
	}
	
	public ParserRule getIndexDefinitionRule() {
		return getIndexDefinitionAccess().getRule();
	}
	
	//AnonymousPatternDefinition PatternDefinition:
	//	root=PatternNode ('as' type=ValidID)?;
	public AnonymousPatternDefinitionElements getAnonymousPatternDefinitionAccess() {
		return pAnonymousPatternDefinition;
	}
	
	public ParserRule getAnonymousPatternDefinitionRule() {
		return getAnonymousPatternDefinitionAccess().getRule();
	}
	
	//PatternNode:
	//	name=ValidID ':' type=TypeRef ('{' (edges+=PatternEdge (',' edges+=PatternEdge)*)? '}')?;
	public PatternNodeElements getPatternNodeAccess() {
		return pPatternNode;
	}
	
	public ParserRule getPatternNodeRule() {
		return getPatternNodeAccess().getRule();
	}
	
	//PatternEdge:
	//	(name=ValidID ':')? feature=[ecore::EStructuralFeature|ValidID] operator='=' value=PatternValueCondition;
	public PatternEdgeElements getPatternEdgeAccess() {
		return pPatternEdge;
	}
	
	public ParserRule getPatternEdgeRule() {
		return getPatternEdgeAccess().getRule();
	}
	
	//PatternValueCondition:
	//	PatternNode | PatternNodeRef;
	public PatternValueConditionElements getPatternValueConditionAccess() {
		return pPatternValueCondition;
	}
	
	public ParserRule getPatternValueConditionRule() {
		return getPatternValueConditionAccess().getRule();
	}
	
	//PatternNodeRef:
	//	node=[PatternNode|ValidID];
	public PatternNodeRefElements getPatternNodeRefAccess() {
		return pPatternNodeRef;
	}
	
	public ParserRule getPatternNodeRefRule() {
		return getPatternNodeRefAccess().getRule();
	}
	
	//Pattern:
	//	AnonymousPatternDefinition | PatternDefinitionReference;
	public PatternElements getPatternAccess() {
		return pPattern;
	}
	
	public ParserRule getPatternRule() {
		return getPatternAccess().getRule();
	}
	
	//ContextType:
	//	AnonymousPatternDefinition | TypeDefinition;
	public ContextTypeElements getContextTypeAccess() {
		return pContextType;
	}
	
	public ParserRule getContextTypeRule() {
		return getContextTypeAccess().getRule();
	}
	
	//ContextTypeRef:
	//	{DefinedContextTypeRef} type=[ContextType|ValidID] | {EmptyContextTypeRef} 'empty';
	public ContextTypeRefElements getContextTypeRefAccess() {
		return pContextTypeRef;
	}
	
	public ParserRule getContextTypeRefRule() {
		return getContextTypeRefAccess().getRule();
	}
	
	//PatternDefinitionReference:
	//	pattern=[PatternDefinition|ValidID];
	public PatternDefinitionReferenceElements getPatternDefinitionReferenceAccess() {
		return pPatternDefinitionReference;
	}
	
	public ParserRule getPatternDefinitionReferenceRule() {
		return getPatternDefinitionReferenceAccess().getRule();
	}
	
	//XmuCoreStatement:
	//	XmuCoreFork | XmuCoreParallelComposition | XmuCoreCompositionChildStatement;
	public XmuCoreStatementElements getXmuCoreStatementAccess() {
		return pXmuCoreStatement;
	}
	
	public ParserRule getXmuCoreStatementRule() {
		return getXmuCoreStatementAccess().getRule();
	}
	
	//XmuCoreCompositionChildStatement:
	//	XmuCoreMatchSource | XmuCoreMatchView | XmuCoreExpandSource | XmuCoreExpandView | XmuCoreGraphReplace | XmuCoreSwitch
	//	| XmuCoreAlign | XmuCoreFunctionCall;
	public XmuCoreCompositionChildStatementElements getXmuCoreCompositionChildStatementAccess() {
		return pXmuCoreCompositionChildStatement;
	}
	
	public ParserRule getXmuCoreCompositionChildStatementRule() {
		return getXmuCoreCompositionChildStatementAccess().getRule();
	}
	
	//XmuCoreMatchSource:
	//	'matchS' '<' sourceType=ContextTypeRef '>' pattern=Pattern body=XmuCoreStatement;
	public XmuCoreMatchSourceElements getXmuCoreMatchSourceAccess() {
		return pXmuCoreMatchSource;
	}
	
	public ParserRule getXmuCoreMatchSourceRule() {
		return getXmuCoreMatchSourceAccess().getRule();
	}
	
	//XmuCoreMatchView:
	//	'matchV' '<' viewType=ContextTypeRef '>' pattern=Pattern body=XmuCoreStatement;
	public XmuCoreMatchViewElements getXmuCoreMatchViewAccess() {
		return pXmuCoreMatchView;
	}
	
	public ParserRule getXmuCoreMatchViewRule() {
		return getXmuCoreMatchViewAccess().getRule();
	}
	
	//XmuCoreExpandSource:
	//	'expandS' pattern=Pattern '{' mappings+=VarMapping (',' mappings+=VarMapping)* '}' '->' body=XmuCoreStatement;
	public XmuCoreExpandSourceElements getXmuCoreExpandSourceAccess() {
		return pXmuCoreExpandSource;
	}
	
	public ParserRule getXmuCoreExpandSourceRule() {
		return getXmuCoreExpandSourceAccess().getRule();
	}
	
	//XmuCoreExpandView:
	//	'expandV' pattern=Pattern '{' mappings+=VarMapping (',' mappings+=VarMapping)* '}' '->' body=XmuCoreStatement;
	public XmuCoreExpandViewElements getXmuCoreExpandViewAccess() {
		return pXmuCoreExpandView;
	}
	
	public ParserRule getXmuCoreExpandViewRule() {
		return getXmuCoreExpandViewAccess().getRule();
	}
	
	//VarMapping:
	//	'(' from=ValidID '->' to=ValidID ')';
	public VarMappingElements getVarMappingAccess() {
		return pVarMapping;
	}
	
	public ParserRule getVarMappingRule() {
		return getVarMappingAccess().getRule();
	}
	
	//XmuCoreGraphReplace:
	//	'replace' source=Pattern view=Pattern '{' conversions+=Conversion+ '}';
	public XmuCoreGraphReplaceElements getXmuCoreGraphReplaceAccess() {
		return pXmuCoreGraphReplace;
	}
	
	public ParserRule getXmuCoreGraphReplaceRule() {
		return getXmuCoreGraphReplaceAccess().getRule();
	}
	
	//XmuCoreParallelComposition:
	//	'<' sourceType=ContextTypeRef ',' viewType=ContextTypeRef '>' bodies+=XmuCoreCompositionChildStatement (=> '|'
	//	bodies+=XmuCoreCompositionChildStatement)+;
	public XmuCoreParallelCompositionElements getXmuCoreParallelCompositionAccess() {
		return pXmuCoreParallelComposition;
	}
	
	public ParserRule getXmuCoreParallelCompositionRule() {
		return getXmuCoreParallelCompositionAccess().getRule();
	}
	
	//XmuCoreSwitch:
	//	'switch' '<' sourceType=ContextTypeRef ',' viewType=ContextTypeRef '>' '['
	//	branches+=XmuCoreSwitchBranch+
	//	adaptions+=XmuCoreSwitchAdaption*
	//	']';
	public XmuCoreSwitchElements getXmuCoreSwitchAccess() {
		return pXmuCoreSwitch;
	}
	
	public ParserRule getXmuCoreSwitchRule() {
		return getXmuCoreSwitchAccess().getRule();
	}
	
	//XmuCoreSwitchBranch:
	//	'case' condition=ContextAwareCondition '->' action=XmuCoreStatement;
	public XmuCoreSwitchBranchElements getXmuCoreSwitchBranchAccess() {
		return pXmuCoreSwitchBranch;
	}
	
	public ParserRule getXmuCoreSwitchBranchRule() {
		return getXmuCoreSwitchBranchAccess().getRule();
	}
	
	//XmuCoreSwitchAdaption:
	//	'adaption' condition=ContextAwareCondition '->' action=ContextAwareUnidirectionalAction;
	public XmuCoreSwitchAdaptionElements getXmuCoreSwitchAdaptionAccess() {
		return pXmuCoreSwitchAdaption;
	}
	
	public ParserRule getXmuCoreSwitchAdaptionRule() {
		return getXmuCoreSwitchAdaptionAccess().getRule();
	}
	
	//Conversion:
	//	bigul=BiGULStatement '(' source+=ValidID (',' source+=ValidID)* ')' '(' view+=ValidID (',' view+=ValidID)* ')';
	public ConversionElements getConversionAccess() {
		return pConversion;
	}
	
	public ParserRule getConversionRule() {
		return getConversionAccess().getRule();
	}
	
	//XmuCoreFork:
	//	'<' sourceType=ContextTypeRef ',' viewType=ContextTypeRef '>' forks+=XmuCoreForkBranch (=> '|'
	//	forks+=XmuCoreForkBranch)+;
	public XmuCoreForkElements getXmuCoreForkAccess() {
		return pXmuCoreFork;
	}
	
	public ParserRule getXmuCoreForkRule() {
		return getXmuCoreForkAccess().getRule();
	}
	
	//XmuCoreForkBranch:
	//	'(' sourceMappings+=VarMapping (',' sourceMappings+=VarMapping)* ')'
	//	'(' viewMappings+=VarMapping (',' viewMappings+=VarMapping)* ')' '->'
	//	body=XmuCoreStatement;
	public XmuCoreForkBranchElements getXmuCoreForkBranchAccess() {
		return pXmuCoreForkBranch;
	}
	
	public ParserRule getXmuCoreForkBranchRule() {
		return getXmuCoreForkBranchAccess().getRule();
	}
	
	//XmuCoreAlign:
	//	'align' '<' sourceType=ContextTypeRef ',' viewType=ContextTypeRef '>' sourcePattern=Pattern viewPattern=Pattern 'with'
	//	alignment=ContextAwareCondition ('match' '->' match=XmuCoreStatement & 'unmatchS' '->'
	//	unmatchS=ContextAwareUnidirectionalAction & 'unmatchV' '->' unmatchV=ContextAwareUnidirectionalAction);
	public XmuCoreAlignElements getXmuCoreAlignAccess() {
		return pXmuCoreAlign;
	}
	
	public ParserRule getXmuCoreAlignRule() {
		return getXmuCoreAlignAccess().getRule();
	}
	
	//XmuCoreFunctionCall:
	//	'(' sourceMappings+=VarMapping (',' sourceMappings+=VarMapping)* ')'
	//	'(' viewMappings+=VarMapping (',' viewMappings+=VarMapping)* ')' '->'
	//	target=[BXFunctionDefinition|ValidID];
	public XmuCoreFunctionCallElements getXmuCoreFunctionCallAccess() {
		return pXmuCoreFunctionCall;
	}
	
	public ParserRule getXmuCoreFunctionCallRule() {
		return getXmuCoreFunctionCallAccess().getRule();
	}
	
	//ContextAwareCondition:
	//	'[' condition=XExpression ']';
	public ContextAwareConditionElements getContextAwareConditionAccess() {
		return pContextAwareCondition;
	}
	
	public ParserRule getContextAwareConditionRule() {
		return getContextAwareConditionAccess().getRule();
	}
	
	//ContextAwareUnidirectionalAction:
	//	action=XBlockExpression;
	public ContextAwareUnidirectionalActionElements getContextAwareUnidirectionalActionAccess() {
		return pContextAwareUnidirectionalAction;
	}
	
	public ParserRule getContextAwareUnidirectionalActionRule() {
		return getContextAwareUnidirectionalActionAccess().getRule();
	}
	
	//BiGULStatement:
	//	BiGULReplace | BiGULSkip;
	public BiGULStatementElements getBiGULStatementAccess() {
		return pBiGULStatement;
	}
	
	public ParserRule getBiGULStatementRule() {
		return getBiGULStatementAccess().getRule();
	}
	
	//BiGULReplace:
	//	{BiGULReplace} 'replace';
	public BiGULReplaceElements getBiGULReplaceAccess() {
		return pBiGULReplace;
	}
	
	public ParserRule getBiGULReplaceRule() {
		return getBiGULReplaceAccess().getRule();
	}
	
	//BiGULSkip:
	//	{BiGULSkip} 'skip';
	public BiGULSkipElements getBiGULSkipAccess() {
		return pBiGULSkip;
	}
	
	public ParserRule getBiGULSkipRule() {
		return getBiGULSkipAccess().getRule();
	}
	
	//QualifiedValidID:
	//	ValidID '.' ValidID;
	public QualifiedValidIDElements getQualifiedValidIDAccess() {
		return pQualifiedValidID;
	}
	
	public ParserRule getQualifiedValidIDRule() {
		return getQualifiedValidIDAccess().getRule();
	}
	
	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' |
	//	'<' '<' '=' |
	//	'>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	//	=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//	'->'
	//	| '..<'
	//	| '>' '..'
	//	| '..'
	//	| '=>'
	//	| '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>'
	//	| '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
	//	| XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//	| => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
	//	')')?
	//	memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure XExpression:
	//	=> ({XClosure}
	//	'[')
	//	=> ((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|')?
	//	expression=XExpressionInClosure
	//	']';
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')';
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression XExpression:
	//	{XIfExpression}
	//	'if' '(' if=XExpression ')'
	//	then=XExpression (=> 'else' else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression XExpression:
	//	{XSwitchExpression}
	//	'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')'
	//	| => (declaredParam=JvmFormalParameter ':')? switch=XExpression) '{'
	//	cases+=XCasePart* ('default' ':' default=XExpression)?
	//	'}';
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression}
	//	'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression}
	//	'for' '(' (initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';'
	//	expression=XExpression? ';' (updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression XExpression:
	//	{XWhileExpression}
	//	'while' '(' predicate=XExpression ')'
	//	body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression}
	//	'do'
	//	body=XExpression
	//	'while' '(' predicate=XExpression ')';
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression XExpression:
	//	{XBlockExpression}
	//	'{' (expressions+=XExpressionOrVarDeclaration ';'?)*
	//	'}';
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)?
	//	')')?
	//	featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall XExpression:
	//	{XConstructorCall}
	//	'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<' typeArguments+=JvmArgumentTypeReference (','
	//	typeArguments+=JvmArgumentTypeReference)* '>')? (=> explicitConstructorCall?='(' (arguments+=XShortClosure
	//	| arguments+=XExpression (',' arguments+=XExpression)*)?
	//	')')?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true');
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null';
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')';
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression}
	//	'try'
	//	expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally' finallyExpression=XExpression)?
	//	| 'finally' finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression}
	//	'synchronized' '(') param=XExpression ')' expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//@Override
	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	///**
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes,
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// */ StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	//	| XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*
	//	| constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? |
	//	"'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
