/**
 * generated by Xtext 2.14.0
 */
package edu.ustb.sei.mde.bxcore.dsl.bXCore.impl;

import edu.ustb.sei.mde.bxcore.dsl.bXCore.BXCorePackage;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.ContextTypeRef;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreSwitch;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreSwitchAdaption;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreSwitchBranch;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Xmu Core Switch</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.impl.XmuCoreSwitchImpl#getSourceType <em>Source Type</em>}</li>
 *   <li>{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.impl.XmuCoreSwitchImpl#getViewType <em>View Type</em>}</li>
 *   <li>{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.impl.XmuCoreSwitchImpl#getBranches <em>Branches</em>}</li>
 *   <li>{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.impl.XmuCoreSwitchImpl#getAdaptions <em>Adaptions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class XmuCoreSwitchImpl extends XmuCoreCompositionChildStatementImpl implements XmuCoreSwitch
{
  /**
   * The cached value of the '{@link #getSourceType() <em>Source Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSourceType()
   * @generated
   * @ordered
   */
  protected ContextTypeRef sourceType;

  /**
   * The cached value of the '{@link #getViewType() <em>View Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getViewType()
   * @generated
   * @ordered
   */
  protected ContextTypeRef viewType;

  /**
   * The cached value of the '{@link #getBranches() <em>Branches</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBranches()
   * @generated
   * @ordered
   */
  protected EList<XmuCoreSwitchBranch> branches;

  /**
   * The cached value of the '{@link #getAdaptions() <em>Adaptions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAdaptions()
   * @generated
   * @ordered
   */
  protected EList<XmuCoreSwitchAdaption> adaptions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected XmuCoreSwitchImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BXCorePackage.Literals.XMU_CORE_SWITCH;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContextTypeRef getSourceType()
  {
    return sourceType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSourceType(ContextTypeRef newSourceType, NotificationChain msgs)
  {
    ContextTypeRef oldSourceType = sourceType;
    sourceType = newSourceType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BXCorePackage.XMU_CORE_SWITCH__SOURCE_TYPE, oldSourceType, newSourceType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSourceType(ContextTypeRef newSourceType)
  {
    if (newSourceType != sourceType)
    {
      NotificationChain msgs = null;
      if (sourceType != null)
        msgs = ((InternalEObject)sourceType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BXCorePackage.XMU_CORE_SWITCH__SOURCE_TYPE, null, msgs);
      if (newSourceType != null)
        msgs = ((InternalEObject)newSourceType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BXCorePackage.XMU_CORE_SWITCH__SOURCE_TYPE, null, msgs);
      msgs = basicSetSourceType(newSourceType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BXCorePackage.XMU_CORE_SWITCH__SOURCE_TYPE, newSourceType, newSourceType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContextTypeRef getViewType()
  {
    return viewType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetViewType(ContextTypeRef newViewType, NotificationChain msgs)
  {
    ContextTypeRef oldViewType = viewType;
    viewType = newViewType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BXCorePackage.XMU_CORE_SWITCH__VIEW_TYPE, oldViewType, newViewType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setViewType(ContextTypeRef newViewType)
  {
    if (newViewType != viewType)
    {
      NotificationChain msgs = null;
      if (viewType != null)
        msgs = ((InternalEObject)viewType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BXCorePackage.XMU_CORE_SWITCH__VIEW_TYPE, null, msgs);
      if (newViewType != null)
        msgs = ((InternalEObject)newViewType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BXCorePackage.XMU_CORE_SWITCH__VIEW_TYPE, null, msgs);
      msgs = basicSetViewType(newViewType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BXCorePackage.XMU_CORE_SWITCH__VIEW_TYPE, newViewType, newViewType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<XmuCoreSwitchBranch> getBranches()
  {
    if (branches == null)
    {
      branches = new EObjectContainmentEList<XmuCoreSwitchBranch>(XmuCoreSwitchBranch.class, this, BXCorePackage.XMU_CORE_SWITCH__BRANCHES);
    }
    return branches;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<XmuCoreSwitchAdaption> getAdaptions()
  {
    if (adaptions == null)
    {
      adaptions = new EObjectContainmentEList<XmuCoreSwitchAdaption>(XmuCoreSwitchAdaption.class, this, BXCorePackage.XMU_CORE_SWITCH__ADAPTIONS);
    }
    return adaptions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BXCorePackage.XMU_CORE_SWITCH__SOURCE_TYPE:
        return basicSetSourceType(null, msgs);
      case BXCorePackage.XMU_CORE_SWITCH__VIEW_TYPE:
        return basicSetViewType(null, msgs);
      case BXCorePackage.XMU_CORE_SWITCH__BRANCHES:
        return ((InternalEList<?>)getBranches()).basicRemove(otherEnd, msgs);
      case BXCorePackage.XMU_CORE_SWITCH__ADAPTIONS:
        return ((InternalEList<?>)getAdaptions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BXCorePackage.XMU_CORE_SWITCH__SOURCE_TYPE:
        return getSourceType();
      case BXCorePackage.XMU_CORE_SWITCH__VIEW_TYPE:
        return getViewType();
      case BXCorePackage.XMU_CORE_SWITCH__BRANCHES:
        return getBranches();
      case BXCorePackage.XMU_CORE_SWITCH__ADAPTIONS:
        return getAdaptions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BXCorePackage.XMU_CORE_SWITCH__SOURCE_TYPE:
        setSourceType((ContextTypeRef)newValue);
        return;
      case BXCorePackage.XMU_CORE_SWITCH__VIEW_TYPE:
        setViewType((ContextTypeRef)newValue);
        return;
      case BXCorePackage.XMU_CORE_SWITCH__BRANCHES:
        getBranches().clear();
        getBranches().addAll((Collection<? extends XmuCoreSwitchBranch>)newValue);
        return;
      case BXCorePackage.XMU_CORE_SWITCH__ADAPTIONS:
        getAdaptions().clear();
        getAdaptions().addAll((Collection<? extends XmuCoreSwitchAdaption>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BXCorePackage.XMU_CORE_SWITCH__SOURCE_TYPE:
        setSourceType((ContextTypeRef)null);
        return;
      case BXCorePackage.XMU_CORE_SWITCH__VIEW_TYPE:
        setViewType((ContextTypeRef)null);
        return;
      case BXCorePackage.XMU_CORE_SWITCH__BRANCHES:
        getBranches().clear();
        return;
      case BXCorePackage.XMU_CORE_SWITCH__ADAPTIONS:
        getAdaptions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BXCorePackage.XMU_CORE_SWITCH__SOURCE_TYPE:
        return sourceType != null;
      case BXCorePackage.XMU_CORE_SWITCH__VIEW_TYPE:
        return viewType != null;
      case BXCorePackage.XMU_CORE_SWITCH__BRANCHES:
        return branches != null && !branches.isEmpty();
      case BXCorePackage.XMU_CORE_SWITCH__ADAPTIONS:
        return adaptions != null && !adaptions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //XmuCoreSwitchImpl
