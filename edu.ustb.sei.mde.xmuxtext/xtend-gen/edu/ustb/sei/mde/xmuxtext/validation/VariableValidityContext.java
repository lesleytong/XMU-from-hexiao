/**
 * generated by Xtext 2.10.0
 */
package edu.ustb.sei.mde.xmuxtext.validation;

import com.google.common.base.Objects;
import edu.ustb.sei.mde.xmu2.ArithmeticRule;
import edu.ustb.sei.mde.xmu2.ModelRule;
import edu.ustb.sei.mde.xmu2.Parameter;
import edu.ustb.sei.mde.xmu2.VariableDeclaration;
import edu.ustb.sei.mde.xmu2.Xmu2Package;
import edu.ustb.sei.mde.xmu2.expression.ExpressionPackage;
import edu.ustb.sei.mde.xmu2.expression.LoopPath;
import edu.ustb.sei.mde.xmu2.expression.VariableExpression;
import edu.ustb.sei.mde.xmu2.pattern.Pattern;
import edu.ustb.sei.mde.xmu2.statement.AssignStatement;
import edu.ustb.sei.mde.xmu2.statement.CaseClause;
import edu.ustb.sei.mde.xmu2.statement.DeleteLinkStatement;
import edu.ustb.sei.mde.xmu2.statement.DeleteNodeStatement;
import edu.ustb.sei.mde.xmu2.statement.EnforcePatternStatement;
import edu.ustb.sei.mde.xmu2.statement.ExpressionCaseClause;
import edu.ustb.sei.mde.xmu2.statement.Fail;
import edu.ustb.sei.mde.xmu2.statement.ForEachStatement;
import edu.ustb.sei.mde.xmu2.statement.PatternCaseClause;
import edu.ustb.sei.mde.xmu2.statement.StatementPackage;
import edu.ustb.sei.mde.xmu2.statement.SwitchStatement;
import edu.ustb.sei.mde.xmu2.statement.UpdateClause;
import edu.ustb.sei.mde.xmu2.statement.UpdateStatement;
import edu.ustb.sei.mde.xmu2.util.AnalysisUtil;
import edu.ustb.sei.mde.xmu2.util.Constants;
import edu.ustb.sei.mde.xmu2common.DomainTag;
import edu.ustb.sei.mde.xmuxtext.customize.common.ModelIterator;
import edu.ustb.sei.mde.xmuxtext.validation.Xmu2Validator;
import java.util.HashSet;
import java.util.Set;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.xbase.lib.Exceptions;

@SuppressWarnings("all")
public class VariableValidityContext {
  private Set<String> sourceVariableNames = new HashSet<String>();
  
  private Set<String> viewVariableNames = new HashSet<String>();
  
  private Set<String> updatedSourceVariableNames = new HashSet<String>();
  
  private Set<String> normalVariableNames = new HashSet<String>();
  
  public void addSourceVariableName(final String n) {
    this.sourceVariableNames.add(AnalysisUtil.getNonUpdatedSourceVariableName(n));
    this.updatedSourceVariableNames.add(AnalysisUtil.getUpdatedSourceVariableName(n));
  }
  
  public void addViewVariableName(final String n) {
    this.viewVariableNames.add(n);
  }
  
  public void addUpdatedSourceVariableName(final String n) {
    this.sourceVariableNames.add(AnalysisUtil.getNonUpdatedSourceVariableName(n));
    this.updatedSourceVariableNames.add(AnalysisUtil.getUpdatedSourceVariableName(n));
  }
  
  public void addNormalVariableName(final String n) {
    this.normalVariableNames.add(n);
  }
  
  public boolean existInSourceVariable(final String n) {
    return this.sourceVariableNames.contains(n);
  }
  
  public boolean existInViewVariable(final String n) {
    return this.viewVariableNames.contains(n);
  }
  
  public boolean existInUpdatedSourceVariable(final String n) {
    return this.updatedSourceVariableNames.contains(n);
  }
  
  public boolean existInNormalVariable(final String n) {
    return this.normalVariableNames.contains(n);
  }
  
  public boolean isValidNonUpdatedVariableName(final String n) {
    boolean _endsWith = n.endsWith(Constants.POST);
    return (!_endsWith);
  }
  
  public boolean isDuplicateNormalVariable(final String name) {
    return ((this.existInNormalVariable(name) || 
      this.existInSourceVariable(name)) || 
      this.existInViewVariable(name));
  }
  
  public boolean isDuplicateSourceVariable(final String name) {
    return (this.existInNormalVariable(name) || 
      this.existInViewVariable(name));
  }
  
  public boolean isDuplicateViewVariable(final String name) {
    return (this.existInNormalVariable(name) || 
      this.existInSourceVariable(name));
  }
  
  public boolean isDuplicateUpdatedSourceVariable(final String name) {
    String converted_name = AnalysisUtil.getNonUpdatedSourceVariableName(name);
    return (this.existInNormalVariable(converted_name) || 
      this.existInViewVariable(converted_name));
  }
  
  public void collectVariablesInPattern(final Pattern source, final DomainTag domain, final Xmu2Validator resource) {
    TreeIterator<EObject> sp = source.eAllContents();
    while (sp.hasNext()) {
      {
        EObject o = sp.next();
        if ((o instanceof VariableDeclaration)) {
          EObject _eContainer = ((VariableDeclaration)o).eContainer();
          if ((_eContainer instanceof LoopPath)) {
          } else {
            String varName = ((VariableDeclaration) o).getName();
            boolean _equals = Objects.equal(domain, DomainTag.SOURCE);
            if (_equals) {
              boolean _isValidNonUpdatedSourceVariableName = AnalysisUtil.isValidNonUpdatedSourceVariableName(varName);
              boolean _equals_1 = (_isValidNonUpdatedSourceVariableName == false);
              if (_equals_1) {
                resource.addError("the name of a source variable should not end with \'@post\'", 
                  ((VariableDeclaration)o).eContainer(), ((VariableDeclaration)o).eContainmentFeature());
              }
              boolean _isDuplicateSourceVariable = this.isDuplicateSourceVariable(varName);
              if (_isDuplicateSourceVariable) {
                resource.addError("the source variable has been declared in a conflict context", 
                  ((VariableDeclaration)o).eContainer(), ((VariableDeclaration)o).eContainmentFeature());
              } else {
                this.addSourceVariableName(varName);
              }
            } else {
              boolean _equals_2 = Objects.equal(domain, DomainTag.VIEW);
              if (_equals_2) {
                boolean _isValidNonUpdatedSourceVariableName_1 = AnalysisUtil.isValidNonUpdatedSourceVariableName(varName);
                boolean _equals_3 = (_isValidNonUpdatedSourceVariableName_1 == false);
                if (_equals_3) {
                  resource.addError("the name of a view variable should not end with \'@post\'", ((VariableDeclaration)o).eContainer(), ((VariableDeclaration)o).eContainmentFeature());
                }
                boolean _isDuplicateViewVariable = this.isDuplicateViewVariable(varName);
                if (_isDuplicateViewVariable) {
                  resource.addError("the view variable has been declared in a conflict context", ((VariableDeclaration)o).eContainer(), ((VariableDeclaration)o).eContainmentFeature());
                } else {
                  this.addViewVariableName(varName);
                }
              } else {
                boolean _equals_4 = Objects.equal(domain, DomainTag.UPDATED_SOURCE);
                if (_equals_4) {
                  boolean _isDuplicateUpdatedSourceVariable = this.isDuplicateUpdatedSourceVariable(varName);
                  if (_isDuplicateUpdatedSourceVariable) {
                    resource.addError("the updated source variable has been declared in a conflict context", ((VariableDeclaration)o).eContainer(), ((VariableDeclaration)o).eContainmentFeature());
                  } else {
                    this.addSourceVariableName(varName);
                  }
                } else {
                  boolean _equals_5 = Objects.equal(domain, DomainTag.NORMAL);
                  if (_equals_5) {
                    boolean _isValidNonUpdatedSourceVariableName_2 = AnalysisUtil.isValidNonUpdatedSourceVariableName(varName);
                    boolean _equals_6 = (_isValidNonUpdatedSourceVariableName_2 == false);
                    if (_equals_6) {
                      resource.addError("the name of a normal variable should not end with \'@post\'", ((VariableDeclaration)o).eContainer(), ((VariableDeclaration)o).eContainmentFeature());
                    }
                    if ((this.existInSourceVariable(varName) || this.existInViewVariable(varName))) {
                      resource.addError("the normal variable has been declared in a conflict context", ((VariableDeclaration)o).eContainer(), ((VariableDeclaration)o).eContainmentFeature());
                    } else {
                      this.addUpdatedSourceVariableName(varName);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  public void checkVariableUsage(final EObject root, final Xmu2Validator res, final DomainTag context) {
    try {
      ModelIterator it = new ModelIterator(root);
      while (it.hasNext()) {
        {
          EObject o = it.next();
          if ((o instanceof VariableExpression)) {
            String name = ((VariableExpression) o).getVariable();
            boolean _isIteratorName = this.isIteratorName(name, o);
            if (_isIteratorName) {
            } else {
              boolean _equals = Objects.equal(context, DomainTag.NORMAL);
              if (_equals) {
                if (((this.existInNormalVariable(name) || 
                  this.existInSourceVariable(name)) || 
                  this.existInViewVariable(name))) {
                } else {
                  res.addError("undefined normal variable", o, ExpressionPackage.Literals.VARIABLE_EXPRESSION__VARIABLE);
                }
              } else {
                boolean _equals_1 = Objects.equal(context, DomainTag.SOURCE);
                if (_equals_1) {
                  if ((this.existInNormalVariable(name) || 
                    this.existInSourceVariable(name))) {
                  } else {
                    res.addError("undefined source variable", o, ExpressionPackage.Literals.VARIABLE_EXPRESSION__VARIABLE);
                  }
                } else {
                  boolean _equals_2 = Objects.equal(context, DomainTag.VIEW);
                  if (_equals_2) {
                    if ((this.existInNormalVariable(name) || 
                      this.existInViewVariable(name))) {
                    } else {
                      res.addError("undefined view variable", o, ExpressionPackage.Literals.VARIABLE_EXPRESSION__VARIABLE);
                    }
                  } else {
                    boolean _equals_3 = Objects.equal(context, DomainTag.UPDATED_SOURCE);
                    if (_equals_3) {
                      if (((this.existInNormalVariable(name) || 
                        this.existInSourceVariable(name)) || 
                        this.existInUpdatedSourceVariable(name))) {
                      } else {
                        boolean _existInViewVariable = this.existInViewVariable(name);
                        if (_existInViewVariable) {
                          res.addWarning("using view variable in the context of updated source is not recommended", o, ExpressionPackage.Literals.VARIABLE_EXPRESSION__VARIABLE);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    } catch (final Throwable _t) {
      if (_t instanceof Exception) {
        final Exception e = (Exception)_t;
        res.addWarning("validity check is not finished because of some exceptions", root.eContainer(), root.eContainmentFeature());
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
  }
  
  public boolean isIteratorName(final String name, final EObject root) {
    EObject _ancestor = AnalysisUtil.getAncestor(root, ExpressionPackage.eINSTANCE.getLoopPath());
    LoopPath loop = ((LoopPath) _ancestor);
    boolean _equals = Objects.equal(loop, null);
    if (_equals) {
      return false;
    } else {
      boolean _equals_1 = loop.getVariable().getName().equals(name);
      if (_equals_1) {
        return true;
      } else {
        return this.isIteratorName(name, loop.eContainer());
      }
    }
  }
  
  public void collectVariableNames(final EObject root, final Xmu2Validator resource) {
    try {
      if ((root instanceof ModelRule)) {
        EList<Parameter> _parameters = ((ModelRule) root).getParameters();
        for (final Parameter p : _parameters) {
          DomainTag _tag = ((Parameter) p).getTag();
          boolean _equals = Objects.equal(_tag, DomainTag.NORMAL);
          if (_equals) {
            boolean _isValidNonUpdatedSourceVariableName = AnalysisUtil.isValidNonUpdatedSourceVariableName(p.getName());
            boolean _equals_1 = (_isValidNonUpdatedSourceVariableName == false);
            if (_equals_1) {
              resource.addError("the name of a normal variable should not end with \'@post\'", p, Xmu2Package.Literals.NAMED_ELEMENT__NAME);
            }
            boolean _isDuplicateNormalVariable = this.isDuplicateNormalVariable(p.getName());
            if (_isDuplicateNormalVariable) {
              resource.addError("the normal variable has been declared in a conflict context", p, Xmu2Package.Literals.NAMED_ELEMENT__NAME);
            } else {
              this.addNormalVariableName(((Parameter) p).getName());
            }
          } else {
            DomainTag _tag_1 = ((Parameter) p).getTag();
            boolean _equals_2 = Objects.equal(_tag_1, DomainTag.SOURCE);
            if (_equals_2) {
              boolean _isValidNonUpdatedSourceVariableName_1 = AnalysisUtil.isValidNonUpdatedSourceVariableName(p.getName());
              boolean _equals_3 = (_isValidNonUpdatedSourceVariableName_1 == false);
              if (_equals_3) {
                resource.addError("the name of a source variable should not end with \'@post\'", p, Xmu2Package.Literals.NAMED_ELEMENT__NAME);
              }
              boolean _isDuplicateSourceVariable = this.isDuplicateSourceVariable(p.getName());
              if (_isDuplicateSourceVariable) {
                resource.addError("the source variable has been declared in a conflict context", p, Xmu2Package.Literals.NAMED_ELEMENT__NAME);
              } else {
                this.addSourceVariableName(((Parameter) p).getName());
              }
            } else {
              DomainTag _tag_2 = ((Parameter) p).getTag();
              boolean _equals_4 = Objects.equal(_tag_2, DomainTag.VIEW);
              if (_equals_4) {
                boolean _isValidNonUpdatedSourceVariableName_2 = AnalysisUtil.isValidNonUpdatedSourceVariableName(p.getName());
                boolean _equals_5 = (_isValidNonUpdatedSourceVariableName_2 == false);
                if (_equals_5) {
                  resource.addError("the name of a view variable should not end with \'@post\'", p, Xmu2Package.Literals.NAMED_ELEMENT__NAME);
                }
                boolean _isDuplicateViewVariable = this.isDuplicateViewVariable(p.getName());
                if (_isDuplicateViewVariable) {
                  resource.addError("the view variable has been declared in a conflict context", p, Xmu2Package.Literals.NAMED_ELEMENT__NAME);
                } else {
                  this.addViewVariableName(((Parameter) p).getName());
                }
              }
            }
          }
        }
        EList<VariableDeclaration> _variableDeclarations = ((ModelRule) root).getVariableDeclarations();
        for (final VariableDeclaration vd : _variableDeclarations) {
          {
            boolean _isValidNonUpdatedSourceVariableName_3 = AnalysisUtil.isValidNonUpdatedSourceVariableName(vd.getName());
            boolean _equals_6 = (_isValidNonUpdatedSourceVariableName_3 == false);
            if (_equals_6) {
              resource.addError("the name of a normal variable should not end with \'@post\'", vd, Xmu2Package.Literals.NAMED_ELEMENT__NAME);
            }
            boolean _isDuplicateNormalVariable_1 = this.isDuplicateNormalVariable(vd.getName());
            if (_isDuplicateNormalVariable_1) {
              resource.addError("the normal variable has been declared in a conflict context", vd, Xmu2Package.Literals.NAMED_ELEMENT__NAME);
            } else {
              this.addNormalVariableName(vd.getName());
            }
          }
        }
        EList<EObject> _eContents = ((ModelRule)root).eContents();
        for (final EObject o : _eContents) {
          this.collectVariableNames(o, resource);
        }
      } else {
        if ((root instanceof ArithmeticRule)) {
          EList<Parameter> _parameters_1 = ((ArithmeticRule) root).getParameters();
          for (final Parameter p_1 : _parameters_1) {
            DomainTag _tag_3 = ((Parameter) p_1).getTag();
            boolean _equals_6 = Objects.equal(_tag_3, DomainTag.NORMAL);
            if (_equals_6) {
              boolean _isValidNonUpdatedSourceVariableName_3 = AnalysisUtil.isValidNonUpdatedSourceVariableName(p_1.getName());
              boolean _equals_7 = (_isValidNonUpdatedSourceVariableName_3 == false);
              if (_equals_7) {
                resource.addError("the name of a normal variable should not end with \'@post\'", p_1, Xmu2Package.Literals.NAMED_ELEMENT__NAME);
              }
              boolean _isDuplicateNormalVariable_1 = this.isDuplicateNormalVariable(p_1.getName());
              if (_isDuplicateNormalVariable_1) {
                resource.addError("the normal variable has been declared in a conflict context", p_1, Xmu2Package.Literals.NAMED_ELEMENT__NAME);
              } else {
                this.addNormalVariableName(((Parameter) p_1).getName());
              }
            } else {
              DomainTag _tag_4 = ((Parameter) p_1).getTag();
              boolean _equals_8 = Objects.equal(_tag_4, DomainTag.SOURCE);
              if (_equals_8) {
                boolean _isValidNonUpdatedSourceVariableName_4 = AnalysisUtil.isValidNonUpdatedSourceVariableName(p_1.getName());
                boolean _equals_9 = (_isValidNonUpdatedSourceVariableName_4 == false);
                if (_equals_9) {
                  resource.addError("the name of a source variable should not end with \'@post\'", p_1, Xmu2Package.Literals.NAMED_ELEMENT__NAME);
                }
                boolean _isDuplicateSourceVariable_1 = this.isDuplicateSourceVariable(p_1.getName());
                if (_isDuplicateSourceVariable_1) {
                  resource.addError("the source variable has been declared in a conflict context", p_1, Xmu2Package.Literals.NAMED_ELEMENT__NAME);
                } else {
                  this.addSourceVariableName(((Parameter) p_1).getName());
                }
              } else {
                DomainTag _tag_5 = ((Parameter) p_1).getTag();
                boolean _equals_10 = Objects.equal(_tag_5, DomainTag.VIEW);
                if (_equals_10) {
                  boolean _isValidNonUpdatedSourceVariableName_5 = AnalysisUtil.isValidNonUpdatedSourceVariableName(p_1.getName());
                  boolean _equals_11 = (_isValidNonUpdatedSourceVariableName_5 == false);
                  if (_equals_11) {
                    resource.addError("the name of a view variable should not end with \'@post\'", p_1, Xmu2Package.Literals.NAMED_ELEMENT__NAME);
                  }
                  boolean _isDuplicateViewVariable_1 = this.isDuplicateViewVariable(p_1.getName());
                  if (_isDuplicateViewVariable_1) {
                    resource.addError("the view variable has been declared in a conflict context", p_1, Xmu2Package.Literals.NAMED_ELEMENT__NAME);
                  } else {
                    this.addViewVariableName(((Parameter) p_1).getName());
                  }
                }
              }
            }
          }
          EList<EObject> _eContents_1 = ((ArithmeticRule)root).eContents();
          for (final EObject o_1 : _eContents_1) {
            this.collectVariableNames(o_1, resource);
          }
        } else {
          if ((root instanceof UpdateStatement)) {
            Pattern source = ((UpdateStatement) root).getSource();
            this.collectVariablesInPattern(source, DomainTag.SOURCE, resource);
            this.checkVariableUsage(source, resource, DomainTag.SOURCE);
            Pattern view = ((UpdateStatement) root).getView();
            this.collectVariablesInPattern(view, DomainTag.VIEW, resource);
            this.checkVariableUsage(view, resource, DomainTag.VIEW);
            EList<UpdateClause> _clauses = ((UpdateStatement) root).getClauses();
            for (final UpdateClause uc : _clauses) {
              this.collectVariableNames(uc, resource);
            }
          } else {
            if ((root instanceof SwitchStatement)) {
              DomainTag flag = null;
              boolean _existInSourceVariable = this.existInSourceVariable(((SwitchStatement) root).getRoot().getVariable());
              if (_existInSourceVariable) {
                flag = DomainTag.SOURCE;
              } else {
                boolean _existInViewVariable = this.existInViewVariable(((SwitchStatement) root).getRoot().getVariable());
                if (_existInViewVariable) {
                  flag = DomainTag.VIEW;
                } else {
                  boolean _existInNormalVariable = this.existInNormalVariable(((SwitchStatement) root).getRoot().getVariable());
                  if (_existInNormalVariable) {
                    flag = DomainTag.NORMAL;
                  } else {
                    resource.addError("the root variable has not been declared or is declared in the updated-source domain", root, StatementPackage.Literals.SWITCH_STATEMENT__ROOT);
                  }
                }
              }
              EList<CaseClause> _cases = ((SwitchStatement) root).getCases();
              for (final CaseClause cc : _cases) {
                {
                  if ((cc instanceof PatternCaseClause)) {
                    boolean _equals_12 = Objects.equal(flag, DomainTag.NORMAL);
                    if (_equals_12) {
                      TreeIterator<EObject> rp = ((PatternCaseClause) cc).getCondition().eAllContents();
                      while (rp.hasNext()) {
                        {
                          EObject o_2 = rp.next();
                          if ((o_2 instanceof VariableDeclaration)) {
                            String name = ((VariableDeclaration) o_2).getName();
                            if (((this.existInSourceVariable(name) || this.existInUpdatedSourceVariable(name)) || this.existInUpdatedSourceVariable(name))) {
                              resource.addError("the normal variable has been declared in a conflict context", 
                                ((VariableDeclaration)o_2).eContainer(), ((VariableDeclaration)o_2).eContainmentFeature());
                            } else {
                              boolean _existInNormalVariable_1 = this.existInNormalVariable(name);
                              boolean _not = (!_existInNormalVariable_1);
                              if (_not) {
                                resource.addWarning("it is recommended to declare the normal variable", ((VariableDeclaration)o_2).eContainer(), ((VariableDeclaration)o_2).eContainmentFeature());
                              }
                            }
                          }
                        }
                      }
                    } else {
                      this.collectVariablesInPattern(((PatternCaseClause) cc).getCondition(), flag, resource);
                    }
                    this.checkVariableUsage(((PatternCaseClause) cc).getCondition(), resource, flag);
                  } else {
                    if ((cc instanceof ExpressionCaseClause)) {
                      this.checkVariableUsage(((ExpressionCaseClause) cc).getCondition(), resource, flag);
                    }
                  }
                  this.collectVariableNames(cc.getAction(), resource);
                }
              }
            } else {
              if ((root instanceof EnforcePatternStatement)) {
                this.collectVariablesInPattern(((EnforcePatternStatement) root).getPattern(), DomainTag.UPDATED_SOURCE, resource);
                this.checkVariableUsage(root, resource, DomainTag.UPDATED_SOURCE);
              } else {
                if ((root instanceof DeleteNodeStatement)) {
                  String varName = ((DeleteNodeStatement) root).getNode().getVariable();
                  boolean _isDuplicateUpdatedSourceVariable = this.isDuplicateUpdatedSourceVariable(varName);
                  if (_isDuplicateUpdatedSourceVariable) {
                    resource.addError("the updated source variable has been declared in a conflict context", root, StatementPackage.Literals.DELETE_NODE_STATEMENT__NODE);
                  } else {
                    this.addUpdatedSourceVariableName(varName);
                  }
                } else {
                  if ((root instanceof DeleteLinkStatement)) {
                    String varName_1 = ((DeleteLinkStatement) root).getSource().getVariable();
                    boolean _isDuplicateUpdatedSourceVariable_1 = this.isDuplicateUpdatedSourceVariable(varName_1);
                    if (_isDuplicateUpdatedSourceVariable_1) {
                      resource.addError("the updated source variable has been declared in a conflict context", root, StatementPackage.Literals.DELETE_LINK_STATEMENT__SOURCE);
                    } else {
                      this.addUpdatedSourceVariableName(varName_1);
                    }
                    this.checkVariableUsage(((DeleteLinkStatement) root).getTarget(), resource, DomainTag.UPDATED_SOURCE);
                  } else {
                    if ((root instanceof LoopPath)) {
                      String varName_2 = ((LoopPath) root).getVariable().getName();
                      boolean _isDuplicateNormalVariable_2 = this.isDuplicateNormalVariable(varName_2);
                      if (_isDuplicateNormalVariable_2) {
                        resource.addError("the iterator variable has been declared", root, ExpressionPackage.Literals.LOOP_PATH__VARIABLE);
                      }
                    } else {
                      if ((root instanceof AssignStatement)) {
                        String varName_3 = ((AssignStatement) root).getUpdatedVariable().getVariable();
                        boolean _isDuplicateUpdatedSourceVariable_2 = this.isDuplicateUpdatedSourceVariable(varName_3);
                        if (_isDuplicateUpdatedSourceVariable_2) {
                          resource.addError("the updated source variable has been declared in a conflict context", root, StatementPackage.Literals.ASSIGN_STATEMENT__UPDATED_VARIABLE);
                        } else {
                          this.addUpdatedSourceVariableName(varName_3);
                        }
                        this.checkVariableUsage(((AssignStatement) root).getValue(), resource, DomainTag.NORMAL);
                      } else {
                        if ((root instanceof ForEachStatement)) {
                          Pattern source_1 = ((ForEachStatement) root).getPattern();
                          String name = source_1.getRoot().getVariable().getName();
                          boolean _existInSourceVariable_1 = this.existInSourceVariable(name);
                          if (_existInSourceVariable_1) {
                            this.collectVariablesInPattern(source_1, DomainTag.SOURCE, resource);
                          } else {
                            boolean _existInNormalVariable_1 = this.existInNormalVariable(name);
                            if (_existInNormalVariable_1) {
                              this.collectVariablesInPattern(source_1, DomainTag.NORMAL, resource);
                            }
                          }
                          EList<EObject> _eContents_2 = ((ForEachStatement)root).eContents();
                          for (final EObject o_2 : _eContents_2) {
                            this.collectVariableNames(o_2, resource);
                          }
                        } else {
                          if ((root instanceof Fail)) {
                            this.checkVariableUsage(((Fail) root).getExpression(), resource, DomainTag.NORMAL);
                          } else {
                            EList<EObject> _eContents_3 = root.eContents();
                            for (final EObject o_3 : _eContents_3) {
                              this.collectVariableNames(o_3, resource);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    } catch (final Throwable _t) {
      if (_t instanceof Exception) {
        final Exception e = (Exception)_t;
        resource.addWarning("validity check is not finished because of some exceptions", 
          root.eContainer(), root.eContainmentFeature());
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
  }
}
