/**
 * generated by Xtext 2.10.0
 */
package edu.ustb.sei.mde.xmuxtext.generator;

import edu.ustb.sei.mde.modeling.ui.ConsoleUtil;
import edu.ustb.sei.mde.xmu2.TransformationModel;
import edu.ustb.sei.mde.xmu2.runtime.build.BXCodeGenerator;
import edu.ustb.sei.mde.xmu2.util.AnalysisUtil;
import edu.ustb.sei.mde.xmu2core.Transformation;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Exceptions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class Xmu2Generator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    ResourceSet set = new ResourceSetImpl();
    AnalysisUtil.initializeResourceSet(set);
    URI _uRI = resource.getURI();
    URI uri = Xmu2Generator.getBuildFileURI(_uRI);
    Resource res = set.createResource(uri);
    try {
      BXCodeGenerator bxcg = new BXCodeGenerator();
      EList<EObject> _contents = resource.getContents();
      EObject _get = _contents.get(0);
      TransformationModel tm = ((TransformationModel) _get);
      EList<EObject> _contents_1 = res.getContents();
      Transformation _build = bxcg.build(tm);
      _contents_1.add(_build);
      res.save(null);
    } catch (final Throwable _t) {
      if (_t instanceof Exception) {
        final Exception e = (Exception)_t;
        e.printStackTrace();
        String _string = e.toString();
        ConsoleUtil.printToConsole(_string, "XMU2", true);
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
  }
  
  public static URI getBuildFileURI(final URI uri) {
    URI _trimFileExtension = uri.trimFileExtension();
    return _trimFileExtension.appendFileExtension(AnalysisUtil.CORE_EXTENSION);
  }
}
