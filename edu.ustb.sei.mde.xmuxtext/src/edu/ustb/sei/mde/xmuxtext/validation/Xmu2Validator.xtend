/*
 * generated by Xtext 2.10.0
 */
package edu.ustb.sei.mde.xmuxtext.validation

import org.eclipse.xtext.validation.Check
import edu.ustb.sei.mde.xmu2.AbstractRule
import edu.ustb.sei.mde.xmu2.pattern.PatternExpression
import org.eclipse.emf.ecore.EStructuralFeature
import org.eclipse.emf.ecore.EObject
import edu.ustb.sei.mde.xmu2.pattern.ObjectPatternExpression
import org.eclipse.emf.ecore.EClassifier
import edu.ustb.sei.mde.xmu2.pattern.PatternNode
import org.eclipse.emf.ecore.EClass
import edu.ustb.sei.mde.xmu2.util.AnalysisUtil
import org.eclipse.emf.ecore.resource.Resource
import edu.ustb.sei.mde.xmu2.util.Constants
import edu.ustb.sei.mde.xmu2.pattern.PatternPackage
import edu.ustb.sei.mde.xmu2.statement.PatternCaseClause
import org.eclipse.emf.common.util.TreeIterator
import edu.ustb.sei.mde.xmu2.ArithmeticRule
import edu.ustb.sei.mde.xmu2.statement.StatementPackage
import java.beans.Statement
import edu.ustb.sei.mde.xmu2.EntryPoint
import edu.ustb.sei.mde.xmu2.EntryData
import edu.ustb.sei.mde.xmu2.Parameter
import edu.ustb.sei.mde.xmu2.ModelRule
import edu.ustb.sei.mde.xmu2common.DomainTag
import edu.ustb.sei.mde.xmu2.Xmu2Package
import edu.ustb.sei.mde.xmu2.statement.RuleCallStatement
import edu.ustb.sei.mde.xmu2.pattern.Pattern
import java.util.Set
import edu.ustb.sei.mde.xmu2.statement.EnforcePatternStatement
import edu.ustb.sei.mde.xmu2.statement.Fail
import edu.ustb.sei.mde.xmu2.expression.LoopPath
import edu.ustb.sei.mde.xmu2.expression.ExpressionPackage
import edu.ustb.sei.mde.xmu2.VariableDeclaration
import java.util.HashSet
import edu.ustb.sei.mde.xmu2.statement.ForEachStatement
import edu.ustb.sei.mde.xmu2.statement.AssignStatement
import edu.ustb.sei.mde.xmu2common.Xmu2commonPackage
import edu.ustb.sei.mde.xmuxtext.customize.common.ModelIterator

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 * 
 * Migrated from ValidityChecker
 */
class Xmu2Validator extends AbstractXmu2Validator {
	
//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					Xmu2Package.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}

	
	
	@Check
	def void checkPatternValidity(PatternNode r) {
		try{
			for (PatternExpression e : r.getExpressions()) {
			var cls = r.getVariable().getType();
			if (cls instanceof EClass) {
				if (!Constants.REFLECTIVE_OBJECT.getEAllStructuralFeatures().contains(e.getFeature()) &&
					!(cls as EClass).getEAllStructuralFeatures().contains(e.getFeature()))
					error("the pattern node does not contain this feature", e, PatternPackage.Literals.PATTERN_EXPRESSION__FEATURE);
			}

			if (e instanceof ObjectPatternExpression) {
				var f = e.getFeature();
				var tarType = (e as ObjectPatternExpression).getTargetNode().getVariable().getType();

				if (!AnalysisUtil.isSuperTypeOf(f.getEType(), tarType)) {
					this.error("type inconsistency", e, PatternPackage.Literals.OBJECT_PATTERN_EXPRESSION__TARGET_NODE);
				}
			}
			}
		} catch(Exception e) {
		}
	}
	
	
	@Check
	def void checkStatementUsage(AbstractRule r) {
		try {
		var isArithmeticRule = r instanceof ArithmeticRule;
		var it = r.eAllContents();
		while(it.hasNext()) {
			var o = it.next();
			if(o instanceof edu.ustb.sei.mde.xmu2.statement.Statement) {
				if(o instanceof edu.ustb.sei.mde.xmu2.statement.SwitchStatement) {
					if(isArithmeticRule) {
						for(edu.ustb.sei.mde.xmu2.statement.CaseClause cc : (o as edu.ustb.sei.mde.xmu2.statement.SwitchStatement).getCases()) {
							if(cc instanceof PatternCaseClause)
								error("you cannot use the pattern case in a function", o, StatementPackage.Literals.SWITCH_STATEMENT__CASES);
						}
					}
				} else if(o instanceof edu.ustb.sei.mde.xmu2.statement.AssignStatement) {
					if(isArithmeticRule==false) {
						error("you cannot use the AssignStatement in a model rule", o.eContainer, o.eContainmentFeature);
					}
				} else if(o instanceof edu.ustb.sei.mde.xmu2.statement.BlockStatement) {
				} else if(o instanceof edu.ustb.sei.mde.xmu2.statement.Fail) {
				} else {
					if(isArithmeticRule)
						error("you cannot use this statement in a function", o.eContainer, o.eContainmentFeature);
				}
			} else if(o instanceof ObjectPatternExpression) {
				if((o as ObjectPatternExpression).isNullable() 
						&& !( o as ObjectPatternExpression).getTargetNode().getExpressions().isEmpty())
					error("a nullable pattern node cannot have inner expressions", o, PatternPackage.Literals.OBJECT_PATTERN_EXPRESSION__TARGET_NODE);
			}
		}
		} catch(Exception e) {}
	}
	
	@Check
	def void checkEntryPoints(EntryPoint ep) {
		try {
		var ModelRule rule = ep.getRule();
		if(rule.getParameters().size()!=ep.getParameters().size()) {
			error("the number of parameters is incorrect", ep, Xmu2Package.Literals.ENTRY_POINT__PARAMETERS);
		} else {
			for(var i = 0 ; i < rule.getParameters().size() ; i ++) {
				var Parameter fp = rule.getParameters().get(i);
				var EntryData ed = ep.getParameters().get(i);
				if(fp.getTag()!=ed.getTag()) {
					error("the domain of the parameter "+i+" is inconsistent", ep, Xmu2Package.Literals.ENTRY_POINT__PARAMETERS,i);
				}
				if(fp.getTag()==DomainTag.NORMAL) {
					error("the entry rule cannot own normal parameters", rule, Xmu2Package.Literals.ABSTRACT_RULE__PARAMETERS,i);
				}
			}
		}
		} catch(Exception e) {}
	}
	
	@Check
	def void checkVariableValidity(AbstractRule rule) {
		var con = new VariableValidityContext;
		
		//collect variable names and check naming rules
		con.collectVariableNames(rule, this);
		
		checkRuleCallValidity(rule, con);
		
		return;
	}
	
	def void checkRuleCallValidity(AbstractRule rule,VariableValidityContext cont) {
		try {
			var TreeIterator<EObject> it = rule.eAllContents();
			
			while(it.hasNext()) {
				var EObject o = it.next();
				
				if(o instanceof RuleCallStatement) {
					var RuleCallStatement rc =  o as RuleCallStatement;
					
					var AbstractRule r = rc.getRule();
					
					if(r.getParameters().size()!= rc.getParameters().size()) {
						error("the parameter count is inconsistent", rc, StatementPackage.Literals.RULE_CALL_STATEMENT__PARAMETERS);
					} else {
						var size = r.getParameters().size();
						for(var i = 0 ; i < size ; i++) {
							var EObject ap = rc.getParameters().get(i);
							var edu.ustb.sei.mde.xmu2.Parameter fp = r.getParameters().get(i);
							cont.checkVariableUsage(ap, this, fp.getTag());
						}
					}
				}
			}
		} catch(Exception e) {
			warning("validity check is not finished because of some exception", rule.eContainer, rule.eContainmentFeature);
		}
	}
	
	public def addError(String s, EObject e, EStructuralFeature f) {
		error(s,e,f)
	}
	public def addError(String s, EObject e, EStructuralFeature f, int i) {
		error(s,e,f,i)
	}
	public def addWarning(String s, EObject e, EStructuralFeature f) {
		warning(s,e,f)
	}
	public def addWarning(String s, EObject e, EStructuralFeature f,int i) {
		warning(s,e,f,i)
	}
	
}

class VariableValidityContext {
	private Set<String> sourceVariableNames = new HashSet<String>();
	private Set<String> viewVariableNames = new HashSet<String>();
	private Set<String> updatedSourceVariableNames = new HashSet<String>();
	private Set<String> normalVariableNames = new HashSet<String>();
	
	
	
	def void addSourceVariableName(String n) {
		sourceVariableNames.add(AnalysisUtil.getNonUpdatedSourceVariableName(n));
		updatedSourceVariableNames.add(AnalysisUtil.getUpdatedSourceVariableName(n));
	}
	def void addViewVariableName(String n) {
		viewVariableNames.add(n);
	}
	def void addUpdatedSourceVariableName(String n) {
		sourceVariableNames.add(AnalysisUtil.getNonUpdatedSourceVariableName(n));
		updatedSourceVariableNames.add(AnalysisUtil.getUpdatedSourceVariableName(n));
	}
	def void addNormalVariableName(String n) {
		normalVariableNames.add(n);
	}
	
	def boolean existInSourceVariable(String n) {
		return sourceVariableNames.contains(n);
	}
	def boolean existInViewVariable(String n) {
		return viewVariableNames.contains(n);
	}
	def boolean existInUpdatedSourceVariable(String n) {
		return updatedSourceVariableNames.contains(n);
	}
	def boolean existInNormalVariable(String n) {
		return normalVariableNames.contains(n);
	}
	
	def boolean isValidNonUpdatedVariableName(String n) {
		return !n.endsWith(Constants.POST);
	}
	

	
	public def boolean isDuplicateNormalVariable(String name) {
		return existInNormalVariable(name) ||
				existInSourceVariable(name) ||
				existInViewVariable(name);
	}
	
	public def boolean isDuplicateSourceVariable(String name) {
		return existInNormalVariable(name) ||
				existInViewVariable(name);
	}
	
	public def boolean isDuplicateViewVariable(String name) {
		return existInNormalVariable(name) ||
				existInSourceVariable(name);
	}
	
	public def boolean isDuplicateUpdatedSourceVariable(String name) {
		var converted_name = AnalysisUtil.getNonUpdatedSourceVariableName(name);
		
		return existInNormalVariable(converted_name) ||
				existInViewVariable(converted_name);
	}
	
	public def void collectVariablesInPattern(Pattern source, DomainTag domain, Xmu2Validator resource) {
		var TreeIterator<EObject> sp = source.eAllContents();
		while(sp.hasNext()) {
			var EObject o = sp.next();
			if(o instanceof VariableDeclaration) {
				if(o.eContainer() instanceof LoopPath) {
					//do nothing
				} else {
					var String varName = ( o as VariableDeclaration).getName();
					if (domain == DomainTag::SOURCE) {
						if (AnalysisUtil
								.isValidNonUpdatedSourceVariableName(varName) == false)
							resource.addError("the name of a source variable should not end with '@post'",
									 o.eContainer(), o.eContainmentFeature());

						if (isDuplicateSourceVariable(varName))
							resource.addError("the source variable has been declared in a conflict context",
									o.eContainer(), o.eContainmentFeature())
						else {
							addSourceVariableName(varName);
						}
					} else if (domain == DomainTag::VIEW) {
						if(AnalysisUtil.isValidNonUpdatedSourceVariableName(varName)==false)
							resource.addError("the name of a view variable should not end with '@post'",  o.eContainer(), o.eContainmentFeature());
						
						if(isDuplicateViewVariable(varName))
							resource.addError("the view variable has been declared in a conflict context",  o.eContainer(), o.eContainmentFeature())
						else
							addViewVariableName(varName);
					} else if (domain == DomainTag::UPDATED_SOURCE) {
						if(isDuplicateUpdatedSourceVariable(varName))
							resource.addError("the updated source variable has been declared in a conflict context", o.eContainer(), o.eContainmentFeature())
						else {
							addSourceVariableName(varName);
						}
					} else if(domain==DomainTag.NORMAL) {
						if(AnalysisUtil.isValidNonUpdatedSourceVariableName(varName)==false) 
							resource.addError("the name of a normal variable should not end with '@post'",  o.eContainer(), o.eContainmentFeature());
						
						if(existInSourceVariable(varName)
								|| existInViewVariable(varName))
							resource.addError("the normal variable has been declared in a conflict context", o.eContainer(), o.eContainmentFeature())
						else addUpdatedSourceVariableName(varName);
					}
					
				}
				
			}
		}
	}
	
	public def void checkVariableUsage(EObject root, Xmu2Validator res, DomainTag context) {
		try {
			var ModelIterator it = new ModelIterator(root);
			while(it.hasNext()) {
				var EObject o = it.next();
				if(o instanceof edu.ustb.sei.mde.xmu2.expression.VariableExpression) {
					var String name = ( o as edu.ustb.sei.mde.xmu2.expression.VariableExpression).getVariable();
					
					if(isIteratorName(name,o)) {
						
					} else {
						if(context==DomainTag.NORMAL) {
							if(existInNormalVariable(name) || 
									existInSourceVariable(name) || 
									existInViewVariable(name) ) {
								//valid
							} else {
								res.addError("undefined normal variable", o, ExpressionPackage.Literals.VARIABLE_EXPRESSION__VARIABLE);
							}
						} else if(context == DomainTag.SOURCE) {
							if(existInNormalVariable(name) || 
									existInSourceVariable(name) ) {
								//valid
							} else {
								res.addError("undefined source variable", o, ExpressionPackage.Literals.VARIABLE_EXPRESSION__VARIABLE);
							}
						} else if(context == DomainTag.VIEW) {
							if(existInNormalVariable(name) || 
									existInViewVariable(name) ) {
								//valid
							} else {
								res.addError("undefined view variable", o, ExpressionPackage.Literals.VARIABLE_EXPRESSION__VARIABLE);
							}
						} else if(context == DomainTag.UPDATED_SOURCE) {
							if(existInNormalVariable(name) || 
									existInSourceVariable(name) || 
									existInUpdatedSourceVariable(name) ) {
								//valid
							} else {
								if(existInViewVariable(name))
									res.addWarning("using view variable in the context of updated source is not recommended", o, ExpressionPackage.Literals.VARIABLE_EXPRESSION__VARIABLE);
							}
						}
					}
				}
			}
		} catch(Exception e) {
			res.addWarning("validity check is not finished because of some exceptions", root.eContainer, root.eContainmentFeature);
		}
	}

	public def boolean isIteratorName(String name, EObject root) {
		var edu.ustb.sei.mde.xmu2.expression.LoopPath loop = 
				AnalysisUtil
				.getAncestor(root, ExpressionPackage.eINSTANCE.getLoopPath()) as edu.ustb.sei.mde.xmu2.expression.LoopPath;
		
		if(loop==null) 
			return false
		else {
			if(loop.getVariable().getName().equals(name)) 
				return true
			else 
				return isIteratorName(name, loop.eContainer());
		}
	}
	
	public def void collectVariableNames(EObject root, Xmu2Validator resource) {
		try{
			if(root instanceof ModelRule) {
				for(edu.ustb.sei.mde.xmu2.Parameter p : (root as ModelRule).getParameters()) {
					if(( p as edu.ustb.sei.mde.xmu2.Parameter).getTag()==DomainTag.NORMAL) {
						
						if(AnalysisUtil.isValidNonUpdatedSourceVariableName(p.getName())==false)
							resource.addError("the name of a normal variable should not end with '@post'", p, Xmu2Package.Literals.NAMED_ELEMENT__NAME);
						
						if(isDuplicateNormalVariable(p.getName()))
							resource.addError("the normal variable has been declared in a conflict context", p, Xmu2Package.Literals.NAMED_ELEMENT__NAME)
						else 
							addNormalVariableName((p as edu.ustb.sei.mde.xmu2.Parameter).getName());
							
					} else if((p as edu.ustb.sei.mde.xmu2.Parameter).getTag()==DomainTag.SOURCE) {
						if(AnalysisUtil.isValidNonUpdatedSourceVariableName(p.getName())==false)
							resource.addError("the name of a source variable should not end with '@post'", p, Xmu2Package.Literals.NAMED_ELEMENT__NAME);
						
						if(isDuplicateSourceVariable(p.getName()))
							resource.addError("the source variable has been declared in a conflict context", p, Xmu2Package.Literals.NAMED_ELEMENT__NAME)
						else
							addSourceVariableName(( p as edu.ustb.sei.mde.xmu2.Parameter).getName());
					} else if((p as edu.ustb.sei.mde.xmu2.Parameter).getTag()==DomainTag.VIEW) {
						if(AnalysisUtil.isValidNonUpdatedSourceVariableName(p.getName())==false)
							resource.addError("the name of a view variable should not end with '@post'", p, Xmu2Package.Literals.NAMED_ELEMENT__NAME);
						
						if(isDuplicateViewVariable(p.getName()))
							resource.addError("the view variable has been declared in a conflict context",  p, Xmu2Package.Literals.NAMED_ELEMENT__NAME)
						else
							addViewVariableName(( p as edu.ustb.sei.mde.xmu2.Parameter).getName());
					}
				}
				
				for(edu.ustb.sei.mde.xmu2.VariableDeclaration vd : ( root as ModelRule).getVariableDeclarations()) {
					if(AnalysisUtil.isValidNonUpdatedSourceVariableName(vd.getName())==false)
						resource.addError("the name of a normal variable should not end with '@post'", vd, Xmu2Package.Literals.NAMED_ELEMENT__NAME);
					
					if(isDuplicateNormalVariable(vd.getName()))
						resource.addError("the normal variable has been declared in a conflict context",  vd, Xmu2Package.Literals.NAMED_ELEMENT__NAME)
					else
						addNormalVariableName(vd.getName());
				}
				
				for(EObject o : root.eContents()) {
					collectVariableNames(o, resource);
				}
			} else if(root instanceof ArithmeticRule) {
				for(edu.ustb.sei.mde.xmu2.Parameter p : (root as ArithmeticRule).getParameters()) {
					if(( p as edu.ustb.sei.mde.xmu2.Parameter).getTag()==DomainTag.NORMAL) {
						
						if(AnalysisUtil.isValidNonUpdatedSourceVariableName(p.getName())==false)
							resource.addError("the name of a normal variable should not end with '@post'",  p, Xmu2Package.Literals.NAMED_ELEMENT__NAME);
						
						if(isDuplicateNormalVariable(p.getName()))
							resource.addError("the normal variable has been declared in a conflict context",  p, Xmu2Package.Literals.NAMED_ELEMENT__NAME)
						else
							addNormalVariableName(( p as edu.ustb.sei.mde.xmu2.Parameter).getName());
					} else if(( p as edu.ustb.sei.mde.xmu2.Parameter).getTag()==DomainTag.SOURCE) {
						if(AnalysisUtil.isValidNonUpdatedSourceVariableName(p.getName())==false)
							resource.addError("the name of a source variable should not end with '@post'", p, Xmu2Package.Literals.NAMED_ELEMENT__NAME);
						
						if(isDuplicateSourceVariable(p.getName()))
							resource.addError("the source variable has been declared in a conflict context",  p, Xmu2Package.Literals.NAMED_ELEMENT__NAME)
						else
							addSourceVariableName(( p as edu.ustb.sei.mde.xmu2.Parameter).getName());
					} else if(( p as edu.ustb.sei.mde.xmu2.Parameter).getTag()==DomainTag.VIEW) {
						if(AnalysisUtil.isValidNonUpdatedSourceVariableName(p.getName())==false)
							resource.addError("the name of a view variable should not end with '@post'",  p, Xmu2Package.Literals.NAMED_ELEMENT__NAME);
						
						if(isDuplicateViewVariable(p.getName()))
							resource.addError("the view variable has been declared in a conflict context", p, Xmu2Package.Literals.NAMED_ELEMENT__NAME)
						else
							addViewVariableName(( p as edu.ustb.sei.mde.xmu2.Parameter).getName());
					}
				}
				
				for(EObject o : root.eContents()) {
					collectVariableNames(o, resource);
				}
			} else if(root instanceof edu.ustb.sei.mde.xmu2.statement.UpdateStatement) {
				var Pattern source = ( root as edu.ustb.sei.mde.xmu2.statement.UpdateStatement).getSource();
				collectVariablesInPattern(source, DomainTag.SOURCE, resource);
				checkVariableUsage(source, resource, DomainTag.SOURCE);
				
				var Pattern view = ( root as edu.ustb.sei.mde.xmu2.statement.UpdateStatement).getView();
				collectVariablesInPattern(view, DomainTag.VIEW, resource);
				checkVariableUsage(view, resource, DomainTag.VIEW);
				
				for(edu.ustb.sei.mde.xmu2.statement.UpdateClause uc : ( root as edu.ustb.sei.mde.xmu2.statement.UpdateStatement).getClauses()) {
					collectVariableNames(uc, resource);
				}
				
			} else if(root instanceof edu.ustb.sei.mde.xmu2.statement.SwitchStatement) {
				var DomainTag flag = null;
				
				if(existInSourceVariable(( root as edu.ustb.sei.mde.xmu2.statement.SwitchStatement).getRoot().getVariable())) {
					flag = DomainTag::SOURCE;
				} else if(existInViewVariable(( root as edu.ustb.sei.mde.xmu2.statement.SwitchStatement).getRoot().getVariable())) {
					flag = DomainTag::VIEW;
				} else if(existInNormalVariable(( root as edu.ustb.sei.mde.xmu2.statement.SwitchStatement).getRoot().getVariable())) {
					flag = DomainTag::NORMAL;
				} else {
					resource.addError("the root variable has not been declared or is declared in the updated-source domain",  root, StatementPackage.Literals.SWITCH_STATEMENT__ROOT);
				}
				
				for(edu.ustb.sei.mde.xmu2.statement.CaseClause cc : ( root as edu.ustb.sei.mde.xmu2.statement.SwitchStatement).getCases()) {
					if(cc instanceof edu.ustb.sei.mde.xmu2.statement.PatternCaseClause) {
						if(flag==DomainTag.NORMAL) {
							var TreeIterator<EObject> rp = (cc as edu.ustb.sei.mde.xmu2.statement.PatternCaseClause).getCondition().eAllContents();
							while(rp.hasNext()) {
								var EObject o = rp.next();
								if (o instanceof VariableDeclaration) {
									var String name = (o as VariableDeclaration).getName();
									if (existInSourceVariable(name)
											|| existInUpdatedSourceVariable(name)
											|| existInUpdatedSourceVariable(name))
										resource.addError("the normal variable has been declared in a conflict context",
												o.eContainer(), o.eContainmentFeature())
									else if(!existInNormalVariable(name))
										resource.addWarning("it is recommended to declare the normal variable",o.eContainer(), o.eContainmentFeature());
//										resource.addError("a normal variable cannot have a pattern condition",
//												Xmu2EProblemType.SYNTAX_ERROR, cc);
								}
							}
						} else
							collectVariablesInPattern(( cc as edu.ustb.sei.mde.xmu2.statement.PatternCaseClause).getCondition(), flag, resource);
						
						checkVariableUsage(( cc as edu.ustb.sei.mde.xmu2.statement.PatternCaseClause).getCondition(), resource, flag);
					} else if(cc instanceof edu.ustb.sei.mde.xmu2.statement.ExpressionCaseClause) {
						//do nothing
						checkVariableUsage(( cc as edu.ustb.sei.mde.xmu2.statement.ExpressionCaseClause).getCondition(), resource, flag);
					}
					
					collectVariableNames(cc.getAction(), resource);
				}
				
			} else if(root instanceof EnforcePatternStatement) {
//				TreeIterator<EObject> rp = root.eAllContents();
//				while(rp.hasNext()) {
//					EObject o = rp.next();
//					if(o instanceof VariableDeclaration) {
//						if(isDuplicateUpdatedSourceVariable(((VariableDeclaration) o).getName()))
//							resource.addError("the updated source variable has been declared in a conflict context", Xmu2EProblemType.SYNTAX_ERROR, o);
//						else {
//							addSourceVariableName(AnalysisUtil.getNonUpdatedSourceVariableName(((VariableDeclaration) o).getName()));
//							addUpdatedSourceVariableName(((VariableDeclaration) o).getName());
//						}
//					}
//				}
				collectVariablesInPattern(( root as EnforcePatternStatement).getPattern(), DomainTag::UPDATED_SOURCE, resource);
				checkVariableUsage(root, resource, DomainTag::UPDATED_SOURCE);
				
			} else if(root instanceof edu.ustb.sei.mde.xmu2.statement.DeleteNodeStatement) {
				var String varName = ( root as edu.ustb.sei.mde.xmu2.statement.DeleteNodeStatement).getNode().getVariable();
				if(isDuplicateUpdatedSourceVariable(varName))
					resource.addError("the updated source variable has been declared in a conflict context", root, StatementPackage.Literals.DELETE_NODE_STATEMENT__NODE)
				else {
					addUpdatedSourceVariableName(varName);
				}
			} else if(root instanceof edu.ustb.sei.mde.xmu2.statement.DeleteLinkStatement) {
				var String varName = ( root as edu.ustb.sei.mde.xmu2.statement.DeleteLinkStatement).getSource().getVariable();
				if(isDuplicateUpdatedSourceVariable(varName))
					resource.addError("the updated source variable has been declared in a conflict context", root, StatementPackage.Literals.DELETE_LINK_STATEMENT__SOURCE)
				else {
					addUpdatedSourceVariableName(varName);
				}
				checkVariableUsage(( root as edu.ustb.sei.mde.xmu2.statement.DeleteLinkStatement).getTarget(), resource, DomainTag.UPDATED_SOURCE);
			} else if(root instanceof edu.ustb.sei.mde.xmu2.expression.LoopPath) {
				//do nothing
				var String varName = ( root as edu.ustb.sei.mde.xmu2.expression.LoopPath).getVariable().getName();
				if(isDuplicateNormalVariable(varName)) {
					resource.addError("the iterator variable has been declared", root, ExpressionPackage.Literals.LOOP_PATH__VARIABLE);
				}
			} else if(root instanceof AssignStatement) {
				var String varName = ( root as AssignStatement).getUpdatedVariable().getVariable();
				if(isDuplicateUpdatedSourceVariable(varName))
					resource.addError("the updated source variable has been declared in a conflict context", root, StatementPackage.Literals.ASSIGN_STATEMENT__UPDATED_VARIABLE)
				else {
					addUpdatedSourceVariableName(varName);
				}
				checkVariableUsage(( root as AssignStatement).getValue(), resource, DomainTag.NORMAL);
			} else if(root instanceof ForEachStatement) {
				var Pattern source = ( root as edu.ustb.sei.mde.xmu2.statement.ForEachStatement).getPattern();
				
				var String name = source.getRoot().getVariable().getName();
				
				if(existInSourceVariable(name))
					collectVariablesInPattern(source, DomainTag.SOURCE, resource)
				else if(existInNormalVariable(name))
					collectVariablesInPattern(source, DomainTag.NORMAL, resource);
				
				for(EObject o : root.eContents()) {
					collectVariableNames(o,  resource);
				}
			} else if(root instanceof Fail) {
				checkVariableUsage(( root as Fail).getExpression(), resource, DomainTag.NORMAL);
			}
			else {
				for(EObject o : root.eContents()) {
					collectVariableNames(o,  resource);
				}
			}
		}catch(Exception e) {
			resource.addWarning("validity check is not finished because of some exceptions", 
					root.eContainer, root.eContainmentFeature);
		}
	}

	
}

