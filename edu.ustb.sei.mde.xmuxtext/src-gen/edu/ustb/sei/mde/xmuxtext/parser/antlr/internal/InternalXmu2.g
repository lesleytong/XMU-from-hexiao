/*
 * generated by Xtext 2.10.0
 */
grammar InternalXmu2;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package edu.ustb.sei.mde.xmuxtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package edu.ustb.sei.mde.xmuxtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import edu.ustb.sei.mde.xmuxtext.services.Xmu2GrammarAccess;

}

@parser::members {

 	private Xmu2GrammarAccess grammarAccess;

    public InternalXmu2Parser(TokenStream input, Xmu2GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "TransformationModel";
   	}

   	@Override
   	protected Xmu2GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleTransformationModel
entryRuleTransformationModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTransformationModelRule()); }
	iv_ruleTransformationModel=ruleTransformationModel
	{ $current=$iv_ruleTransformationModel.current; }
	EOF;

// Rule TransformationModel
ruleTransformationModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTransformationModelAccess().getTransformationModelAction_0(),
					$current);
			}
		)
		otherlv_1='module'
		{
			newLeafNode(otherlv_1, grammarAccess.getTransformationModelAccess().getModuleKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_NAME
				{
					newLeafNode(lv_name_2_0, grammarAccess.getTransformationModelAccess().getNameNAMETerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTransformationModelRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.NAME");
				}
			)
		)
		(
			otherlv_3='import'
			{
				newLeafNode(otherlv_3, grammarAccess.getTransformationModelAccess().getImportKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTransformationModelRule());
						}
					}
					otherlv_4=RULE_MODEL_URI
					{
						newLeafNode(otherlv_4, grammarAccess.getTransformationModelAccess().getPackagesEPackageCrossReference_3_1_0());
					}
				)
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getTransformationModelAccess().getEntryPointsEntryPointParserRuleCall_4_0());
				}
				lv_entryPoints_5_0=ruleEntryPoint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTransformationModelRule());
					}
					add(
						$current,
						"entryPoints",
						lv_entryPoints_5_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.EntryPoint");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getTransformationModelAccess().getRulesAbstractRuleParserRuleCall_5_0());
				}
				lv_rules_6_0=ruleAbstractRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTransformationModelRule());
					}
					add(
						$current,
						"rules",
						lv_rules_6_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.AbstractRule");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleEntryPoint
entryRuleEntryPoint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntryPointRule()); }
	iv_ruleEntryPoint=ruleEntryPoint
	{ $current=$iv_ruleEntryPoint.current; }
	EOF;

// Rule EntryPoint
ruleEntryPoint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='entry'
		{
			newLeafNode(otherlv_0, grammarAccess.getEntryPointAccess().getEntryKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEntryPointRule());
					}
				}
				otherlv_1=RULE_NAME
				{
					newLeafNode(otherlv_1, grammarAccess.getEntryPointAccess().getRuleModelRuleCrossReference_1_0());
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getEntryPointAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEntryPointAccess().getParametersEntryDataParserRuleCall_3_0());
				}
				lv_parameters_3_0=ruleEntryData
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntryPointRule());
					}
					add(
						$current,
						"parameters",
						lv_parameters_3_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.EntryData");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getEntryPointAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEntryPointAccess().getParametersEntryDataParserRuleCall_4_1_0());
					}
					lv_parameters_5_0=ruleEntryData
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEntryPointRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_5_0,
							"edu.ustb.sei.mde.xmuxtext.Xmu2.EntryData");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getEntryPointAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleEntryData
entryRuleEntryData returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntryDataRule()); }
	iv_ruleEntryData=ruleEntryData
	{ $current=$iv_ruleEntryData.current; }
	EOF;

// Rule EntryData
ruleEntryData returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getEntryDataAccess().getTagTagEnumRuleCall_0_0());
				}
				lv_tag_0_0=ruleTag
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntryDataRule());
					}
					set(
						$current,
						"tag",
						lv_tag_0_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.Tag");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getEntryDataAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				lv_index_2_0=RULE_INT
				{
					newLeafNode(lv_index_2_0, grammarAccess.getEntryDataAccess().getIndexINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEntryDataRule());
					}
					setWithLastConsumed(
						$current,
						"index",
						lv_index_2_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.INT");
				}
			)
		)
		(
			(
				lv_fragment_3_0=RULE_OBJ_URI
				{
					newLeafNode(lv_fragment_3_0, grammarAccess.getEntryDataAccess().getFragmentOBJ_URITerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEntryDataRule());
					}
					setWithLastConsumed(
						$current,
						"fragment",
						lv_fragment_3_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.OBJ_URI");
				}
			)
		)?
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getEntryDataAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleAbstractRule
entryRuleAbstractRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractRuleRule()); }
	iv_ruleAbstractRule=ruleAbstractRule
	{ $current=$iv_ruleAbstractRule.current; }
	EOF;

// Rule AbstractRule
ruleAbstractRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAbstractRuleAccess().getArithmeticRuleParserRuleCall_0());
		}
		this_ArithmeticRule_0=ruleArithmeticRule
		{
			$current = $this_ArithmeticRule_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractRuleAccess().getModelRuleParserRuleCall_1());
		}
		this_ModelRule_1=ruleModelRule
		{
			$current = $this_ModelRule_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleModelRule
entryRuleModelRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRuleRule()); }
	iv_ruleModelRule=ruleModelRule
	{ $current=$iv_ruleModelRule.current; }
	EOF;

// Rule ModelRule
ruleModelRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='rule'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelRuleAccess().getRuleKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_NAME
				{
					newLeafNode(lv_name_1_0, grammarAccess.getModelRuleAccess().getNameNAMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelRuleRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.NAME");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getModelRuleAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getModelRuleAccess().getParametersParameterParserRuleCall_3_0_0());
					}
					lv_parameters_3_0=ruleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelRuleRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_3_0,
							"edu.ustb.sei.mde.xmuxtext.Xmu2.Parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getModelRuleAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getModelRuleAccess().getParametersParameterParserRuleCall_3_1_1_0());
						}
						lv_parameters_5_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getModelRuleRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_5_0,
								"edu.ustb.sei.mde.xmuxtext.Xmu2.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getModelRuleAccess().getRightParenthesisKeyword_4());
		}
		otherlv_7='{'
		{
			newLeafNode(otherlv_7, grammarAccess.getModelRuleAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getModelRuleAccess().getVariableDeclarationsConcreteVariableDeclarationParserRuleCall_6_0_0());
					}
					lv_variableDeclarations_8_0=ruleConcreteVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelRuleRule());
						}
						add(
							$current,
							"variableDeclarations",
							lv_variableDeclarations_8_0,
							"edu.ustb.sei.mde.xmuxtext.Xmu2.ConcreteVariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_9=';'
			{
				newLeafNode(otherlv_9, grammarAccess.getModelRuleAccess().getSemicolonKeyword_6_1());
			}
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getModelRuleAccess().getStatementStatementParserRuleCall_7_0());
				}
				lv_statement_10_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRuleRule());
					}
					set(
						$current,
						"statement",
						lv_statement_10_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_11='}'
		{
			newLeafNode(otherlv_11, grammarAccess.getModelRuleAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleArithmeticRule
entryRuleArithmeticRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArithmeticRuleRule()); }
	iv_ruleArithmeticRule=ruleArithmeticRule
	{ $current=$iv_ruleArithmeticRule.current; }
	EOF;

// Rule ArithmeticRule
ruleArithmeticRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='function'
		{
			newLeafNode(otherlv_0, grammarAccess.getArithmeticRuleAccess().getFunctionKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_NAME
				{
					newLeafNode(lv_name_1_0, grammarAccess.getArithmeticRuleAccess().getNameNAMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArithmeticRuleRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.NAME");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getArithmeticRuleAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getArithmeticRuleAccess().getParametersParameterParserRuleCall_3_0_0());
					}
					lv_parameters_3_0=ruleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArithmeticRuleRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_3_0,
							"edu.ustb.sei.mde.xmuxtext.Xmu2.Parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getArithmeticRuleAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getArithmeticRuleAccess().getParametersParameterParserRuleCall_3_1_1_0());
						}
						lv_parameters_5_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getArithmeticRuleRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_5_0,
								"edu.ustb.sei.mde.xmuxtext.Xmu2.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getArithmeticRuleAccess().getRightParenthesisKeyword_4());
		}
		otherlv_7='{'
		{
			newLeafNode(otherlv_7, grammarAccess.getArithmeticRuleAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArithmeticRuleAccess().getStatementsStatementParserRuleCall_6_0());
				}
				lv_statements_8_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArithmeticRuleRule());
					}
					add(
						$current,
						"statements",
						lv_statements_8_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getArithmeticRuleAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterAccess().getTagTagEnumRuleCall_0_0());
				}
				lv_tag_0_0=ruleTag
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterRule());
					}
					set(
						$current,
						"tag",
						lv_tag_0_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.Tag");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_name_1_0=RULE_NAME
				{
					newLeafNode(lv_name_1_0, grammarAccess.getParameterAccess().getNameNAMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.NAME");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getParameterAccess().getColonKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getParameterAccess().getTypeEClassifierCrossReference_3_0());
				}
				ruleType
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleType
entryRuleType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current.getText(); }
	EOF;

// Rule Type
ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_PRIMITIVE_TYPE_0=RULE_PRIMITIVE_TYPE
		{
			$current.merge(this_PRIMITIVE_TYPE_0);
		}
		{
			newLeafNode(this_PRIMITIVE_TYPE_0, grammarAccess.getTypeAccess().getPRIMITIVE_TYPETerminalRuleCall_0());
		}
		    |
		this_PATH_NAME_1=RULE_PATH_NAME
		{
			$current.merge(this_PATH_NAME_1);
		}
		{
			newLeafNode(this_PATH_NAME_1, grammarAccess.getTypeAccess().getPATH_NAMETerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleConcreteVariableDeclaration
entryRuleConcreteVariableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConcreteVariableDeclarationRule()); }
	iv_ruleConcreteVariableDeclaration=ruleConcreteVariableDeclaration
	{ $current=$iv_ruleConcreteVariableDeclaration.current; }
	EOF;

// Rule ConcreteVariableDeclaration
ruleConcreteVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_NAME
				{
					newLeafNode(lv_name_0_0, grammarAccess.getConcreteVariableDeclarationAccess().getNameNAMETerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConcreteVariableDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.NAME");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getConcreteVariableDeclarationAccess().getColonKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConcreteVariableDeclarationRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getConcreteVariableDeclarationAccess().getTypeEClassifierCrossReference_2_0());
				}
				ruleType
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePattern
entryRulePattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternRule()); }
	iv_rulePattern=rulePattern
	{ $current=$iv_rulePattern.current; }
	EOF;

// Rule Pattern
rulePattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPatternAccess().getRootPatternNodeParserRuleCall_0_0());
				}
				lv_root_0_0=rulePatternNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatternRule());
					}
					set(
						$current,
						"root",
						lv_root_0_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.PatternNode");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='['
			{
				newLeafNode(otherlv_1, grammarAccess.getPatternAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPatternAccess().getGuardExpressionParserRuleCall_1_1_0());
					}
					lv_guard_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPatternRule());
						}
						set(
							$current,
							"guard",
							lv_guard_2_0,
							"edu.ustb.sei.mde.xmuxtext.Xmu2.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=']'
			{
				newLeafNode(otherlv_3, grammarAccess.getPatternAccess().getRightSquareBracketKeyword_1_2());
			}
		)?
	)
;

// Entry rule entryRulePatternNode
entryRulePatternNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternNodeRule()); }
	iv_rulePatternNode=rulePatternNode
	{ $current=$iv_rulePatternNode.current; }
	EOF;

// Rule PatternNode
rulePatternNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPatternNodeAccess().getPatternNodeAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPatternNodeAccess().getVariableConcreteVariableDeclarationParserRuleCall_1_0());
				}
				lv_variable_1_0=ruleConcreteVariableDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatternNodeRule());
					}
					set(
						$current,
						"variable",
						lv_variable_1_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.ConcreteVariableDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='{'
			{
				newLeafNode(otherlv_2, grammarAccess.getPatternNodeAccess().getLeftCurlyBracketKeyword_2_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getPatternNodeAccess().getExpressionsPatternExpressionParserRuleCall_2_1_0_0());
						}
						lv_expressions_3_0=rulePatternExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPatternNodeRule());
							}
							add(
								$current,
								"expressions",
								lv_expressions_3_0,
								"edu.ustb.sei.mde.xmuxtext.Xmu2.PatternExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_4=','
					{
						newLeafNode(otherlv_4, grammarAccess.getPatternNodeAccess().getCommaKeyword_2_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getPatternNodeAccess().getExpressionsPatternExpressionParserRuleCall_2_1_1_1_0());
							}
							lv_expressions_5_0=rulePatternExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getPatternNodeRule());
								}
								add(
									$current,
									"expressions",
									lv_expressions_5_0,
									"edu.ustb.sei.mde.xmuxtext.Xmu2.PatternExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_6='}'
			{
				newLeafNode(otherlv_6, grammarAccess.getPatternNodeAccess().getRightCurlyBracketKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRulePatternExpression
entryRulePatternExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternExpressionRule()); }
	iv_rulePatternExpression=rulePatternExpression
	{ $current=$iv_rulePatternExpression.current; }
	EOF;

// Rule PatternExpression
rulePatternExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleObjectPatternExpression)=>
			{
				newCompositeNode(grammarAccess.getPatternExpressionAccess().getObjectPatternExpressionParserRuleCall_0());
			}
			this_ObjectPatternExpression_0=ruleObjectPatternExpression
			{
				$current = $this_ObjectPatternExpression_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(rulePropertyPatternExpression)=>
			{
				newCompositeNode(grammarAccess.getPatternExpressionAccess().getPropertyPatternExpressionParserRuleCall_1());
			}
			this_PropertyPatternExpression_1=rulePropertyPatternExpression
			{
				$current = $this_PropertyPatternExpression_1.current;
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleObjectPatternExpression
entryRuleObjectPatternExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectPatternExpressionRule()); }
	iv_ruleObjectPatternExpression=ruleObjectPatternExpression
	{ $current=$iv_ruleObjectPatternExpression.current; }
	EOF;

// Rule ObjectPatternExpression
ruleObjectPatternExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getObjectPatternExpressionAccess().getObjectPatternExpressionAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObjectPatternExpressionRule());
					}
				}
				otherlv_1=RULE_NAME
				{
					newLeafNode(otherlv_1, grammarAccess.getObjectPatternExpressionAccess().getFeatureEStructuralFeatureCrossReference_1_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectPatternExpressionAccess().getSelectorLoopPathParserRuleCall_2_0());
				}
				lv_selector_2_0=ruleLoopPath
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectPatternExpressionRule());
					}
					set(
						$current,
						"selector",
						lv_selector_2_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.LoopPath");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectPatternExpressionAccess().getPositionPositionPathParserRuleCall_3_0());
				}
				lv_position_3_0=rulePositionPath
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectPatternExpressionRule());
					}
					set(
						$current,
						"position",
						lv_position_3_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.PositionPath");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4='='
		{
			newLeafNode(otherlv_4, grammarAccess.getObjectPatternExpressionAccess().getEqualsSignKeyword_4());
		}
		(
			(
				lv_nullable_5_0='?'
				{
					newLeafNode(lv_nullable_5_0, grammarAccess.getObjectPatternExpressionAccess().getNullableQuestionMarkKeyword_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObjectPatternExpressionRule());
					}
					setWithLastConsumed($current, "nullable", true, "?");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectPatternExpressionAccess().getTargetNodePatternNodeParserRuleCall_6_0());
				}
				lv_targetNode_6_0=rulePatternNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectPatternExpressionRule());
					}
					set(
						$current,
						"targetNode",
						lv_targetNode_6_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.PatternNode");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePropertyPatternExpression
entryRulePropertyPatternExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertyPatternExpressionRule()); }
	iv_rulePropertyPatternExpression=rulePropertyPatternExpression
	{ $current=$iv_rulePropertyPatternExpression.current; }
	EOF;

// Rule PropertyPatternExpression
rulePropertyPatternExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPropertyPatternExpressionAccess().getPropertyPatternExpressionAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPropertyPatternExpressionRule());
					}
				}
				otherlv_1=RULE_NAME
				{
					newLeafNode(otherlv_1, grammarAccess.getPropertyPatternExpressionAccess().getFeatureEStructuralFeatureCrossReference_1_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPropertyPatternExpressionAccess().getSelectorLoopPathParserRuleCall_2_0());
				}
				lv_selector_2_0=ruleLoopPath
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPropertyPatternExpressionRule());
					}
					set(
						$current,
						"selector",
						lv_selector_2_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.LoopPath");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getPropertyPatternExpressionAccess().getPositionPositionPathParserRuleCall_3_0());
				}
				lv_position_3_0=rulePositionPath
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPropertyPatternExpressionRule());
					}
					set(
						$current,
						"position",
						lv_position_3_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.PositionPath");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4='='
		{
			newLeafNode(otherlv_4, grammarAccess.getPropertyPatternExpressionAccess().getEqualsSignKeyword_4());
		}
		(
			(
				lv_nullable_5_0='?'
				{
					newLeafNode(lv_nullable_5_0, grammarAccess.getPropertyPatternExpressionAccess().getNullableQuestionMarkKeyword_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPropertyPatternExpressionRule());
					}
					setWithLastConsumed($current, "nullable", true, "?");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getPropertyPatternExpressionAccess().getTargetExpressionExpressionParserRuleCall_6_0());
				}
				lv_targetExpression_6_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPropertyPatternExpressionRule());
					}
					set(
						$current,
						"targetExpression",
						lv_targetExpression_6_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLoopPath
entryRuleLoopPath returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLoopPathRule()); }
	iv_ruleLoopPath=ruleLoopPath
	{ $current=$iv_ruleLoopPath.current; }
	EOF;

// Rule LoopPath
ruleLoopPath returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='->'
		{
			newLeafNode(otherlv_0, grammarAccess.getLoopPathAccess().getHyphenMinusGreaterThanSignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLoopPathAccess().getOperatorLoopOperatorEnumRuleCall_1_0());
				}
				lv_operator_1_0=ruleLoopOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLoopPathRule());
					}
					set(
						$current,
						"operator",
						lv_operator_1_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.LoopOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getLoopPathAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLoopPathAccess().getVariableConcreteVariableDeclarationParserRuleCall_3_0());
				}
				lv_variable_3_0=ruleConcreteVariableDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLoopPathRule());
					}
					set(
						$current,
						"variable",
						lv_variable_3_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.ConcreteVariableDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='|'
		{
			newLeafNode(otherlv_4, grammarAccess.getLoopPathAccess().getVerticalLineKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLoopPathAccess().getBodyExpressionParserRuleCall_5_0());
				}
				lv_body_5_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLoopPathRule());
					}
					set(
						$current,
						"body",
						lv_body_5_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getLoopPathAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRulePositionPath
entryRulePositionPath returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPositionPathRule()); }
	iv_rulePositionPath=rulePositionPath
	{ $current=$iv_rulePositionPath.current; }
	EOF;

// Rule PositionPath
rulePositionPath returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='->'
		{
			newLeafNode(otherlv_0, grammarAccess.getPositionPathAccess().getHyphenMinusGreaterThanSignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPositionPathAccess().getTypePositionOperatorEnumRuleCall_1_0());
				}
				lv_type_1_0=rulePositionOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPositionPathRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.PositionOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getPositionPathAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPositionPathAccess().getValueExpressionParserRuleCall_3_0());
				}
				lv_value_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPositionPathRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getPositionPathAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleFeaturePath
entryRuleFeaturePath returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeaturePathRule()); }
	iv_ruleFeaturePath=ruleFeaturePath
	{ $current=$iv_ruleFeaturePath.current; }
	EOF;

// Rule FeaturePath
ruleFeaturePath returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='.'
		{
			newLeafNode(otherlv_0, grammarAccess.getFeaturePathAccess().getFullStopKeyword_0());
		}
		(
			(
				lv_feature_1_0=RULE_NAME
				{
					newLeafNode(lv_feature_1_0, grammarAccess.getFeaturePathAccess().getFeatureNAMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFeaturePathRule());
					}
					setWithLastConsumed(
						$current,
						"feature",
						lv_feature_1_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.NAME");
				}
			)
		)
	)
;

// Entry rule entryRuleOperationPath
entryRuleOperationPath returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationPathRule()); }
	iv_ruleOperationPath=ruleOperationPath
	{ $current=$iv_ruleOperationPath.current; }
	EOF;

// Rule OperationPath
ruleOperationPath returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='.'
		{
			newLeafNode(otherlv_0, grammarAccess.getOperationPathAccess().getFullStopKeyword_0());
		}
		(
			(
				lv_operation_1_0=RULE_NAME
				{
					newLeafNode(lv_operation_1_0, grammarAccess.getOperationPathAccess().getOperationNAMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperationPathRule());
					}
					setWithLastConsumed(
						$current,
						"operation",
						lv_operation_1_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.NAME");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getOperationPathAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getOperationPathAccess().getParametersExpressionParserRuleCall_3_0_0());
					}
					lv_parameters_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOperationPathRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_3_0,
							"edu.ustb.sei.mde.xmuxtext.Xmu2.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getOperationPathAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getOperationPathAccess().getParametersExpressionParserRuleCall_3_1_1_0());
						}
						lv_parameters_5_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getOperationPathRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_5_0,
								"edu.ustb.sei.mde.xmuxtext.Xmu2.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getOperationPathAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleVariableExpression
entryRuleVariableExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableExpressionRule()); }
	iv_ruleVariableExpression=ruleVariableExpression
	{ $current=$iv_ruleVariableExpression.current; }
	EOF;

// Rule VariableExpression
ruleVariableExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_variable_0_0=RULE_NAME
			{
				newLeafNode(lv_variable_0_0, grammarAccess.getVariableExpressionAccess().getVariableNAMETerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVariableExpressionRule());
				}
				setWithLastConsumed(
					$current,
					"variable",
					lv_variable_0_0,
					"edu.ustb.sei.mde.xmuxtext.Xmu2.NAME");
			}
		)
	)
;

// Entry rule entryRulePath
entryRulePath returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPathRule()); }
	iv_rulePath=rulePath
	{ $current=$iv_rulePath.current; }
	EOF;

// Rule Path
rulePath returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleLoopPath)=>
			{
				newCompositeNode(grammarAccess.getPathAccess().getLoopPathParserRuleCall_0());
			}
			this_LoopPath_0=ruleLoopPath
			{
				$current = $this_LoopPath_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getPathAccess().getPositionPathParserRuleCall_1());
		}
		this_PositionPath_1=rulePositionPath
		{
			$current = $this_PositionPath_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(ruleFeaturePath)=>
			{
				newCompositeNode(grammarAccess.getPathAccess().getFeaturePathParserRuleCall_2());
			}
			this_FeaturePath_2=ruleFeaturePath
			{
				$current = $this_FeaturePath_2.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getPathAccess().getOperationPathParserRuleCall_3());
		}
		this_OperationPath_3=ruleOperationPath
		{
			$current = $this_OperationPath_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEmptyExpression
entryRuleEmptyExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEmptyExpressionRule()); }
	iv_ruleEmptyExpression=ruleEmptyExpression
	{ $current=$iv_ruleEmptyExpression.current; }
	EOF;

// Rule EmptyExpression
ruleEmptyExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getEmptyExpressionAccess().getTypeEmptyValueEnumRuleCall_0());
			}
			lv_type_0_0=ruleEmptyValue
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getEmptyExpressionRule());
				}
				set(
					$current,
					"type",
					lv_type_0_0,
					"edu.ustb.sei.mde.xmuxtext.Xmu2.EmptyValue");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleStringLiteralExpression
entryRuleStringLiteralExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringLiteralExpressionRule()); }
	iv_ruleStringLiteralExpression=ruleStringLiteralExpression
	{ $current=$iv_ruleStringLiteralExpression.current; }
	EOF;

// Rule StringLiteralExpression
ruleStringLiteralExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralExpressionAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringLiteralExpressionRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"edu.ustb.sei.mde.xmuxtext.Xmu2.STRING");
			}
		)
	)
;

// Entry rule entryRuleIntegerLiteralExpression
entryRuleIntegerLiteralExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegerLiteralExpressionRule()); }
	iv_ruleIntegerLiteralExpression=ruleIntegerLiteralExpression
	{ $current=$iv_ruleIntegerLiteralExpression.current; }
	EOF;

// Rule IntegerLiteralExpression
ruleIntegerLiteralExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_INT
			{
				newLeafNode(lv_value_0_0, grammarAccess.getIntegerLiteralExpressionAccess().getValueINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIntegerLiteralExpressionRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"edu.ustb.sei.mde.xmuxtext.Xmu2.INT");
			}
		)
	)
;

// Entry rule entryRuleBooleanLiteralExpression
entryRuleBooleanLiteralExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanLiteralExpressionRule()); }
	iv_ruleBooleanLiteralExpression=ruleBooleanLiteralExpression
	{ $current=$iv_ruleBooleanLiteralExpression.current; }
	EOF;

// Rule BooleanLiteralExpression
ruleBooleanLiteralExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_BOOLEAN
			{
				newLeafNode(lv_value_0_0, grammarAccess.getBooleanLiteralExpressionAccess().getValueBOOLEANTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getBooleanLiteralExpressionRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"edu.ustb.sei.mde.xmuxtext.Xmu2.BOOLEAN");
			}
		)
	)
;

// Entry rule entryRuleEnumLiteralExpression
entryRuleEnumLiteralExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumLiteralExpressionRule()); }
	iv_ruleEnumLiteralExpression=ruleEnumLiteralExpression
	{ $current=$iv_ruleEnumLiteralExpression.current; }
	EOF;

// Rule EnumLiteralExpression
ruleEnumLiteralExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnumLiteralExpressionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getEnumLiteralExpressionAccess().getTypeEEnumCrossReference_0_0());
				}
				ruleType
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='::'
		{
			newLeafNode(otherlv_1, grammarAccess.getEnumLiteralExpressionAccess().getColonColonKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnumLiteralExpressionRule());
					}
				}
				otherlv_2=RULE_NAME
				{
					newLeafNode(otherlv_2, grammarAccess.getEnumLiteralExpressionAccess().getValueEEnumLiteralCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleObjectURIExpression
entryRuleObjectURIExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectURIExpressionRule()); }
	iv_ruleObjectURIExpression=ruleObjectURIExpression
	{ $current=$iv_ruleObjectURIExpression.current; }
	EOF;

// Rule ObjectURIExpression
ruleObjectURIExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getObjectURIExpressionRule());
				}
			}
			otherlv_0=RULE_OBJ_URI
			{
				newLeafNode(otherlv_0, grammarAccess.getObjectURIExpressionAccess().getObjectEObjectCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	iv_ruleUnaryExpression=ruleUnaryExpression
	{ $current=$iv_ruleUnaryExpression.current; }
	EOF;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryExpressionAccess().getOperatorUnaryOperatorEnumRuleCall_0_0());
				}
				lv_operator_0_0=ruleUnaryOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
					}
					set(
						$current,
						"operator",
						lv_operator_0_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.UnaryOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryExpressionAccess().getBodyUnaryExpressionChildParserRuleCall_1_0());
				}
				lv_body_1_0=ruleUnaryExpressionChild
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
					}
					set(
						$current,
						"body",
						lv_body_1_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.UnaryExpressionChild");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleUnaryExpressionChild
entryRuleUnaryExpressionChild returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryExpressionChildRule()); }
	iv_ruleUnaryExpressionChild=ruleUnaryExpressionChild
	{ $current=$iv_ruleUnaryExpressionChild.current; }
	EOF;

// Rule UnaryExpressionChild
ruleUnaryExpressionChild returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getUnaryExpressionChildAccess().getAtomicExpressionParserRuleCall_0());
		}
		this_AtomicExpression_0=ruleAtomicExpression
		{
			$current = $this_AtomicExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getUnaryExpressionChildAccess().getPathExpressionHostAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getUnaryExpressionChildAccess().getPathPathParserRuleCall_1_1_0());
					}
					lv_path_2_0=rulePath
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnaryExpressionChildRule());
						}
						add(
							$current,
							"path",
							lv_path_2_0,
							"edu.ustb.sei.mde.xmuxtext.Xmu2.Path");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getUnaryExpressionChildAccess().getPathPathParserRuleCall_1_2_0());
					}
					lv_path_3_0=rulePath
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnaryExpressionChildRule());
						}
						add(
							$current,
							"path",
							lv_path_3_0,
							"edu.ustb.sei.mde.xmuxtext.Xmu2.Path");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
	)
;

// Entry rule entryRuleAtomicExpression
entryRuleAtomicExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicExpressionRule()); }
	iv_ruleAtomicExpression=ruleAtomicExpression
	{ $current=$iv_ruleAtomicExpression.current; }
	EOF;

// Rule AtomicExpression
ruleAtomicExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_0_0());
			}
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicExpressionAccess().getParenExpressionAction_0_1(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomicExpressionAccess().getBodyExpressionParserRuleCall_0_2_0());
					}
					lv_body_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomicExpressionRule());
						}
						set(
							$current,
							"body",
							lv_body_2_0,
							"edu.ustb.sei.mde.xmuxtext.Xmu2.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getAtomicExpressionAccess().getRightParenthesisKeyword_0_3());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getAtomicExpressionAccess().getVariableExpressionParserRuleCall_1());
		}
		this_VariableExpression_4=ruleVariableExpression
		{
			$current = $this_VariableExpression_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAtomicExpressionAccess().getConstantExpressionParserRuleCall_2());
		}
		this_ConstantExpression_5=ruleConstantExpression
		{
			$current = $this_ConstantExpression_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleConstantExpression
entryRuleConstantExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantExpressionRule()); }
	iv_ruleConstantExpression=ruleConstantExpression
	{ $current=$iv_ruleConstantExpression.current; }
	EOF;

// Rule ConstantExpression
ruleConstantExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConstantExpressionAccess().getEmptyExpressionParserRuleCall_0());
		}
		this_EmptyExpression_0=ruleEmptyExpression
		{
			$current = $this_EmptyExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstantExpressionAccess().getStringLiteralExpressionParserRuleCall_1());
		}
		this_StringLiteralExpression_1=ruleStringLiteralExpression
		{
			$current = $this_StringLiteralExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstantExpressionAccess().getIntegerLiteralExpressionParserRuleCall_2());
		}
		this_IntegerLiteralExpression_2=ruleIntegerLiteralExpression
		{
			$current = $this_IntegerLiteralExpression_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstantExpressionAccess().getBooleanLiteralExpressionParserRuleCall_3());
		}
		this_BooleanLiteralExpression_3=ruleBooleanLiteralExpression
		{
			$current = $this_BooleanLiteralExpression_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstantExpressionAccess().getEnumLiteralExpressionParserRuleCall_4());
		}
		this_EnumLiteralExpression_4=ruleEnumLiteralExpression
		{
			$current = $this_EnumLiteralExpression_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstantExpressionAccess().getObjectURIExpressionParserRuleCall_5());
		}
		this_ObjectURIExpression_5=ruleObjectURIExpression
		{
			$current = $this_ObjectURIExpression_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression
	{ $current=$iv_ruleMultiplicativeExpression.current; }
	EOF;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOperandsMultiplicativeExpressionChildParserRuleCall_0_0());
				}
				lv_operands_0_0=ruleMultiplicativeExpressionChild
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
					}
					add(
						$current,
						"operands",
						lv_operands_0_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.MultiplicativeExpressionChild");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOperatorsMultiplicativeOperatorEnumRuleCall_1_0_0());
					}
					lv_operators_1_0=ruleMultiplicativeOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
						}
						add(
							$current,
							"operators",
							lv_operators_1_0,
							"edu.ustb.sei.mde.xmuxtext.Xmu2.MultiplicativeOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOperandsMultiplicativeExpressionChildParserRuleCall_1_1_0());
					}
					lv_operands_2_0=ruleMultiplicativeExpressionChild
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
						}
						add(
							$current,
							"operands",
							lv_operands_2_0,
							"edu.ustb.sei.mde.xmuxtext.Xmu2.MultiplicativeExpressionChild");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
	)
;

// Entry rule entryRuleMultiplicativeExpressionChild
entryRuleMultiplicativeExpressionChild returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionChildRule()); }
	iv_ruleMultiplicativeExpressionChild=ruleMultiplicativeExpressionChild
	{ $current=$iv_ruleMultiplicativeExpressionChild.current; }
	EOF;

// Rule MultiplicativeExpressionChild
ruleMultiplicativeExpressionChild returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleUnaryExpression)=>
			{
				newCompositeNode(grammarAccess.getMultiplicativeExpressionChildAccess().getUnaryExpressionParserRuleCall_0());
			}
			this_UnaryExpression_0=ruleUnaryExpression
			{
				$current = $this_UnaryExpression_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getMultiplicativeExpressionChildAccess().getUnaryExpressionChildParserRuleCall_1());
		}
		this_UnaryExpressionChild_1=ruleUnaryExpressionChild
		{
			$current = $this_UnaryExpressionChild_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	iv_ruleAdditiveExpression=ruleAdditiveExpression
	{ $current=$iv_ruleAdditiveExpression.current; }
	EOF;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOperandsAdditiveExpressionChildParserRuleCall_0_0());
				}
				lv_operands_0_0=ruleAdditiveExpressionChild
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
					}
					add(
						$current,
						"operands",
						lv_operands_0_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.AdditiveExpressionChild");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOperatorsAdditiveOperatorEnumRuleCall_1_0_0());
					}
					lv_operators_1_0=ruleAdditiveOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
						}
						add(
							$current,
							"operators",
							lv_operators_1_0,
							"edu.ustb.sei.mde.xmuxtext.Xmu2.AdditiveOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOperandsAdditiveExpressionChildParserRuleCall_1_1_0());
					}
					lv_operands_2_0=ruleAdditiveExpressionChild
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
						}
						add(
							$current,
							"operands",
							lv_operands_2_0,
							"edu.ustb.sei.mde.xmuxtext.Xmu2.AdditiveExpressionChild");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
	)
;

// Entry rule entryRuleAdditiveExpressionChild
entryRuleAdditiveExpressionChild returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionChildRule()); }
	iv_ruleAdditiveExpressionChild=ruleAdditiveExpressionChild
	{ $current=$iv_ruleAdditiveExpressionChild.current; }
	EOF;

// Rule AdditiveExpressionChild
ruleAdditiveExpressionChild returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleMultiplicativeExpression)=>
			{
				newCompositeNode(grammarAccess.getAdditiveExpressionChildAccess().getMultiplicativeExpressionParserRuleCall_0());
			}
			this_MultiplicativeExpression_0=ruleMultiplicativeExpression
			{
				$current = $this_MultiplicativeExpression_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getAdditiveExpressionChildAccess().getMultiplicativeExpressionChildParserRuleCall_1());
		}
		this_MultiplicativeExpressionChild_1=ruleMultiplicativeExpressionChild
		{
			$current = $this_MultiplicativeExpressionChild_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationalExpressionRule()); }
	iv_ruleRelationalExpression=ruleRelationalExpression
	{ $current=$iv_ruleRelationalExpression.current; }
	EOF;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationalExpressionAccess().getLeftRelationalExpressionChildParserRuleCall_0_0());
				}
				lv_left_0_0=ruleRelationalExpressionChild
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.RelationalExpressionChild");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOperatorRelationalOperatorEnumRuleCall_1_0());
				}
				lv_operator_1_0=ruleRelationalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
					}
					set(
						$current,
						"operator",
						lv_operator_1_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.RelationalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRightRelationalExpressionChildParserRuleCall_2_0());
				}
				lv_right_2_0=ruleRelationalExpressionChild
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
					}
					set(
						$current,
						"right",
						lv_right_2_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.RelationalExpressionChild");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRelationalExpressionChild
entryRuleRelationalExpressionChild returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationalExpressionChildRule()); }
	iv_ruleRelationalExpressionChild=ruleRelationalExpressionChild
	{ $current=$iv_ruleRelationalExpressionChild.current; }
	EOF;

// Rule RelationalExpressionChild
ruleRelationalExpressionChild returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleAdditiveExpression)=>
			{
				newCompositeNode(grammarAccess.getRelationalExpressionChildAccess().getAdditiveExpressionParserRuleCall_0());
			}
			this_AdditiveExpression_0=ruleAdditiveExpression
			{
				$current = $this_AdditiveExpression_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getRelationalExpressionChildAccess().getAdditiveExpressionChildParserRuleCall_1());
		}
		this_AdditiveExpressionChild_1=ruleAdditiveExpressionChild
		{
			$current = $this_AdditiveExpressionChild_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBooleanAndExpression
entryRuleBooleanAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanAndExpressionRule()); }
	iv_ruleBooleanAndExpression=ruleBooleanAndExpression
	{ $current=$iv_ruleBooleanAndExpression.current; }
	EOF;

// Rule BooleanAndExpression
ruleBooleanAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBooleanAndExpressionAccess().getOperandsBooleanAndExpressionChildParserRuleCall_0_0());
				}
				lv_operands_0_0=ruleBooleanAndExpressionChild
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBooleanAndExpressionRule());
					}
					add(
						$current,
						"operands",
						lv_operands_0_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.BooleanAndExpressionChild");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='and'
			{
				newLeafNode(otherlv_1, grammarAccess.getBooleanAndExpressionAccess().getAndKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBooleanAndExpressionAccess().getOperandsBooleanAndExpressionChildParserRuleCall_1_1_0());
					}
					lv_operands_2_0=ruleBooleanAndExpressionChild
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBooleanAndExpressionRule());
						}
						add(
							$current,
							"operands",
							lv_operands_2_0,
							"edu.ustb.sei.mde.xmuxtext.Xmu2.BooleanAndExpressionChild");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
	)
;

// Entry rule entryRuleBooleanAndExpressionChild
entryRuleBooleanAndExpressionChild returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanAndExpressionChildRule()); }
	iv_ruleBooleanAndExpressionChild=ruleBooleanAndExpressionChild
	{ $current=$iv_ruleBooleanAndExpressionChild.current; }
	EOF;

// Rule BooleanAndExpressionChild
ruleBooleanAndExpressionChild returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleRelationalExpression)=>
			{
				newCompositeNode(grammarAccess.getBooleanAndExpressionChildAccess().getRelationalExpressionParserRuleCall_0());
			}
			this_RelationalExpression_0=ruleRelationalExpression
			{
				$current = $this_RelationalExpression_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getBooleanAndExpressionChildAccess().getRelationalExpressionChildParserRuleCall_1());
		}
		this_RelationalExpressionChild_1=ruleRelationalExpressionChild
		{
			$current = $this_RelationalExpressionChild_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBooleanOrExpression
entryRuleBooleanOrExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanOrExpressionRule()); }
	iv_ruleBooleanOrExpression=ruleBooleanOrExpression
	{ $current=$iv_ruleBooleanOrExpression.current; }
	EOF;

// Rule BooleanOrExpression
ruleBooleanOrExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBooleanOrExpressionAccess().getOperandsBooleanOrExpressionChildParserRuleCall_0_0());
				}
				lv_operands_0_0=ruleBooleanOrExpressionChild
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBooleanOrExpressionRule());
					}
					add(
						$current,
						"operands",
						lv_operands_0_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.BooleanOrExpressionChild");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='or'
			{
				newLeafNode(otherlv_1, grammarAccess.getBooleanOrExpressionAccess().getOrKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBooleanOrExpressionAccess().getOperandsBooleanOrExpressionChildParserRuleCall_1_1_0());
					}
					lv_operands_2_0=ruleBooleanOrExpressionChild
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBooleanOrExpressionRule());
						}
						add(
							$current,
							"operands",
							lv_operands_2_0,
							"edu.ustb.sei.mde.xmuxtext.Xmu2.BooleanOrExpressionChild");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
	)
;

// Entry rule entryRuleBooleanOrExpressionChild
entryRuleBooleanOrExpressionChild returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanOrExpressionChildRule()); }
	iv_ruleBooleanOrExpressionChild=ruleBooleanOrExpressionChild
	{ $current=$iv_ruleBooleanOrExpressionChild.current; }
	EOF;

// Rule BooleanOrExpressionChild
ruleBooleanOrExpressionChild returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleBooleanAndExpression)=>
			{
				newCompositeNode(grammarAccess.getBooleanOrExpressionChildAccess().getBooleanAndExpressionParserRuleCall_0());
			}
			this_BooleanAndExpression_0=ruleBooleanAndExpression
			{
				$current = $this_BooleanAndExpression_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getBooleanOrExpressionChildAccess().getBooleanAndExpressionChildParserRuleCall_1());
		}
		this_BooleanAndExpressionChild_1=ruleBooleanAndExpressionChild
		{
			$current = $this_BooleanAndExpressionChild_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleBooleanOrExpression)=>
			{
				newCompositeNode(grammarAccess.getExpressionAccess().getBooleanOrExpressionParserRuleCall_0());
			}
			this_BooleanOrExpression_0=ruleBooleanOrExpression
			{
				$current = $this_BooleanOrExpression_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getBooleanOrExpressionChildParserRuleCall_1());
		}
		this_BooleanOrExpressionChild_1=ruleBooleanOrExpressionChild
		{
			$current = $this_BooleanOrExpressionChild_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBlockStatement
entryRuleBlockStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockStatementRule()); }
	iv_ruleBlockStatement=ruleBlockStatement
	{ $current=$iv_ruleBlockStatement.current; }
	EOF;

// Rule BlockStatement
ruleBlockStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBlockStatementAccess().getBlockStatementAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getBlockStatementAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBlockStatementAccess().getBodyStatementParserRuleCall_2_0_0());
					}
					lv_body_2_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlockStatementRule());
						}
						add(
							$current,
							"body",
							lv_body_2_0,
							"edu.ustb.sei.mde.xmuxtext.Xmu2.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=';'
				{
					newLeafNode(otherlv_3, grammarAccess.getBlockStatementAccess().getSemicolonKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getBlockStatementAccess().getBodyStatementParserRuleCall_2_1_1_0());
						}
						lv_body_4_0=ruleStatement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBlockStatementRule());
							}
							add(
								$current,
								"body",
								lv_body_4_0,
								"edu.ustb.sei.mde.xmuxtext.Xmu2.Statement");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getBlockStatementAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleUpdateStatement
entryRuleUpdateStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUpdateStatementRule()); }
	iv_ruleUpdateStatement=ruleUpdateStatement
	{ $current=$iv_ruleUpdateStatement.current; }
	EOF;

// Rule UpdateStatement
ruleUpdateStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='update'
		{
			newLeafNode(otherlv_0, grammarAccess.getUpdateStatementAccess().getUpdateKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUpdateStatementAccess().getSourcePatternParserRuleCall_1_0());
				}
				lv_source_1_0=rulePattern
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUpdateStatementRule());
					}
					set(
						$current,
						"source",
						lv_source_1_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.Pattern");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='with'
		{
			newLeafNode(otherlv_2, grammarAccess.getUpdateStatementAccess().getWithKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUpdateStatementAccess().getViewPatternParserRuleCall_3_0());
				}
				lv_view_3_0=rulePattern
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUpdateStatementRule());
					}
					set(
						$current,
						"view",
						lv_view_3_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.Pattern");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='by'
		{
			newLeafNode(otherlv_4, grammarAccess.getUpdateStatementAccess().getByKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUpdateStatementAccess().getClausesUpdateClauseParserRuleCall_5_0());
				}
				lv_clauses_5_0=ruleUpdateClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUpdateStatementRule());
					}
					add(
						$current,
						"clauses",
						lv_clauses_5_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.UpdateClause");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleUpdateClause
entryRuleUpdateClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUpdateClauseRule()); }
	iv_ruleUpdateClause=ruleUpdateClause
	{ $current=$iv_ruleUpdateClause.current; }
	EOF;

// Rule UpdateClause
ruleUpdateClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUpdateClauseAccess().getTypeActionTypeEnumRuleCall_0_0());
				}
				lv_type_0_0=ruleActionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUpdateClauseRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.ActionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='->'
		{
			newLeafNode(otherlv_1, grammarAccess.getUpdateClauseAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUpdateClauseAccess().getStatementStatementParserRuleCall_2_0());
				}
				lv_statement_2_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUpdateClauseRule());
					}
					set(
						$current,
						"statement",
						lv_statement_2_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSwitchStatement
entryRuleSwitchStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSwitchStatementRule()); }
	iv_ruleSwitchStatement=ruleSwitchStatement
	{ $current=$iv_ruleSwitchStatement.current; }
	EOF;

// Rule SwitchStatement
ruleSwitchStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='switch'
		{
			newLeafNode(otherlv_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSwitchStatementAccess().getRootVariableExpressionParserRuleCall_2_0());
				}
				lv_root_2_0=ruleVariableExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
					}
					set(
						$current,
						"root",
						lv_root_2_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.VariableExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesCaseClauseParserRuleCall_5_0());
				}
				lv_cases_5_0=ruleCaseClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
					}
					add(
						$current,
						"cases",
						lv_cases_5_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.CaseClause");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleCaseClause
entryRuleCaseClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCaseClauseRule()); }
	iv_ruleCaseClause=ruleCaseClause
	{ $current=$iv_ruleCaseClause.current; }
	EOF;

// Rule CaseClause
ruleCaseClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCaseClauseAccess().getPatternCaseClauseParserRuleCall_0());
		}
		this_PatternCaseClause_0=rulePatternCaseClause
		{
			$current = $this_PatternCaseClause_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCaseClauseAccess().getExpressionCaseClauseParserRuleCall_1());
		}
		this_ExpressionCaseClause_1=ruleExpressionCaseClause
		{
			$current = $this_ExpressionCaseClause_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCaseClauseAccess().getDefaultCaseClauseParserRuleCall_2());
		}
		this_DefaultCaseClause_2=ruleDefaultCaseClause
		{
			$current = $this_DefaultCaseClause_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePatternCaseClause
entryRulePatternCaseClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternCaseClauseRule()); }
	iv_rulePatternCaseClause=rulePatternCaseClause
	{ $current=$iv_rulePatternCaseClause.current; }
	EOF;

// Rule PatternCaseClause
rulePatternCaseClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='case'
		{
			newLeafNode(otherlv_0, grammarAccess.getPatternCaseClauseAccess().getCaseKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPatternCaseClauseAccess().getConditionPatternParserRuleCall_1_0());
				}
				lv_condition_1_0=rulePattern
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatternCaseClauseRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.Pattern");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='->'
		{
			newLeafNode(otherlv_2, grammarAccess.getPatternCaseClauseAccess().getHyphenMinusGreaterThanSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPatternCaseClauseAccess().getActionStatementParserRuleCall_3_0());
				}
				lv_action_3_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatternCaseClauseRule());
					}
					set(
						$current,
						"action",
						lv_action_3_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpressionCaseClause
entryRuleExpressionCaseClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionCaseClauseRule()); }
	iv_ruleExpressionCaseClause=ruleExpressionCaseClause
	{ $current=$iv_ruleExpressionCaseClause.current; }
	EOF;

// Rule ExpressionCaseClause
ruleExpressionCaseClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='case'
		{
			newLeafNode(otherlv_0, grammarAccess.getExpressionCaseClauseAccess().getCaseKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionCaseClauseAccess().getConditionExpressionParserRuleCall_1_0());
				}
				lv_condition_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionCaseClauseRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='->'
		{
			newLeafNode(otherlv_2, grammarAccess.getExpressionCaseClauseAccess().getHyphenMinusGreaterThanSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionCaseClauseAccess().getActionStatementParserRuleCall_3_0());
				}
				lv_action_3_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionCaseClauseRule());
					}
					set(
						$current,
						"action",
						lv_action_3_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDefaultCaseClause
entryRuleDefaultCaseClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefaultCaseClauseRule()); }
	iv_ruleDefaultCaseClause=ruleDefaultCaseClause
	{ $current=$iv_ruleDefaultCaseClause.current; }
	EOF;

// Rule DefaultCaseClause
ruleDefaultCaseClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='otherwise'
		{
			newLeafNode(otherlv_0, grammarAccess.getDefaultCaseClauseAccess().getOtherwiseKeyword_0());
		}
		otherlv_1='->'
		{
			newLeafNode(otherlv_1, grammarAccess.getDefaultCaseClauseAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDefaultCaseClauseAccess().getActionStatementParserRuleCall_2_0());
				}
				lv_action_2_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDefaultCaseClauseRule());
					}
					set(
						$current,
						"action",
						lv_action_2_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDeleteNodeStatement
entryRuleDeleteNodeStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeleteNodeStatementRule()); }
	iv_ruleDeleteNodeStatement=ruleDeleteNodeStatement
	{ $current=$iv_ruleDeleteNodeStatement.current; }
	EOF;

// Rule DeleteNodeStatement
ruleDeleteNodeStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='delete'
		{
			newLeafNode(otherlv_0, grammarAccess.getDeleteNodeStatementAccess().getDeleteKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeleteNodeStatementAccess().getNodeVariableExpressionParserRuleCall_1_0());
				}
				lv_node_1_0=ruleVariableExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeleteNodeStatementRule());
					}
					set(
						$current,
						"node",
						lv_node_1_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.VariableExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDeleteLinkStatement
entryRuleDeleteLinkStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeleteLinkStatementRule()); }
	iv_ruleDeleteLinkStatement=ruleDeleteLinkStatement
	{ $current=$iv_ruleDeleteLinkStatement.current; }
	EOF;

// Rule DeleteLinkStatement
ruleDeleteLinkStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDeleteLinkStatementAccess().getConcreteDeleteLinkStatementAction_0(),
					$current);
			}
		)
		otherlv_1='delete'
		{
			newLeafNode(otherlv_1, grammarAccess.getDeleteLinkStatementAccess().getDeleteKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeleteLinkStatementAccess().getSourceVariableExpressionParserRuleCall_2_0());
				}
				lv_source_2_0=ruleVariableExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeleteLinkStatementRule());
					}
					set(
						$current,
						"source",
						lv_source_2_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.VariableExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='.'
		{
			newLeafNode(otherlv_3, grammarAccess.getDeleteLinkStatementAccess().getFullStopKeyword_3());
		}
		(
			(
				lv_feature_4_0=RULE_NAME
				{
					newLeafNode(lv_feature_4_0, grammarAccess.getDeleteLinkStatementAccess().getFeatureNAMETerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDeleteLinkStatementRule());
					}
					setWithLastConsumed(
						$current,
						"feature",
						lv_feature_4_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.NAME");
				}
			)
		)
		otherlv_5='='
		{
			newLeafNode(otherlv_5, grammarAccess.getDeleteLinkStatementAccess().getEqualsSignKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeleteLinkStatementAccess().getTargetExpressionParserRuleCall_6_0());
				}
				lv_target_6_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeleteLinkStatementRule());
					}
					set(
						$current,
						"target",
						lv_target_6_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEnforcePatternStatement
entryRuleEnforcePatternStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnforcePatternStatementRule()); }
	iv_ruleEnforcePatternStatement=ruleEnforcePatternStatement
	{ $current=$iv_ruleEnforcePatternStatement.current; }
	EOF;

// Rule EnforcePatternStatement
ruleEnforcePatternStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='enforce'
		{
			newLeafNode(otherlv_0, grammarAccess.getEnforcePatternStatementAccess().getEnforceKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEnforcePatternStatementAccess().getPatternPatternParserRuleCall_1_0());
				}
				lv_pattern_1_0=rulePattern
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnforcePatternStatementRule());
					}
					set(
						$current,
						"pattern",
						lv_pattern_1_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.Pattern");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleForEachStatement
entryRuleForEachStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForEachStatementRule()); }
	iv_ruleForEachStatement=ruleForEachStatement
	{ $current=$iv_ruleForEachStatement.current; }
	EOF;

// Rule ForEachStatement
ruleForEachStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='foreach'
		{
			newLeafNode(otherlv_0, grammarAccess.getForEachStatementAccess().getForeachKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForEachStatementAccess().getPatternPatternParserRuleCall_1_0());
				}
				lv_pattern_1_0=rulePattern
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForEachStatementRule());
					}
					set(
						$current,
						"pattern",
						lv_pattern_1_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.Pattern");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='->'
		{
			newLeafNode(otherlv_2, grammarAccess.getForEachStatementAccess().getHyphenMinusGreaterThanSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForEachStatementAccess().getActionStatementParserRuleCall_3_0());
				}
				lv_action_3_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForEachStatementRule());
					}
					set(
						$current,
						"action",
						lv_action_3_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRuleCallStatement
entryRuleRuleCallStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleCallStatementRule()); }
	iv_ruleRuleCallStatement=ruleRuleCallStatement
	{ $current=$iv_ruleRuleCallStatement.current; }
	EOF;

// Rule RuleCallStatement
ruleRuleCallStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRuleCallStatementRule());
					}
				}
				otherlv_0=RULE_NAME
				{
					newLeafNode(otherlv_0, grammarAccess.getRuleCallStatementAccess().getRuleAbstractRuleCrossReference_0_0());
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getRuleCallStatementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRuleCallStatementAccess().getParametersExpressionParserRuleCall_2_0_0());
					}
					lv_parameters_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRuleCallStatementRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_2_0,
							"edu.ustb.sei.mde.xmuxtext.Xmu2.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getRuleCallStatementAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getRuleCallStatementAccess().getParametersExpressionParserRuleCall_2_1_1_0());
						}
						lv_parameters_4_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRuleCallStatementRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_4_0,
								"edu.ustb.sei.mde.xmuxtext.Xmu2.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getRuleCallStatementAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleSkip
entryRuleSkip returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSkipRule()); }
	iv_ruleSkip=ruleSkip
	{ $current=$iv_ruleSkip.current; }
	EOF;

// Rule Skip
ruleSkip returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSkipAccess().getSkipAction_0(),
					$current);
			}
		)
		otherlv_1='skip'
		{
			newLeafNode(otherlv_1, grammarAccess.getSkipAccess().getSkipKeyword_1());
		}
	)
;

// Entry rule entryRuleFail
entryRuleFail returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFailRule()); }
	iv_ruleFail=ruleFail
	{ $current=$iv_ruleFail.current; }
	EOF;

// Rule Fail
ruleFail returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFailAccess().getFailAction_0(),
					$current);
			}
		)
		otherlv_1='fail'
		{
			newLeafNode(otherlv_1, grammarAccess.getFailAccess().getFailKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFailAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFailRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleAssignStatement
entryRuleAssignStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignStatementRule()); }
	iv_ruleAssignStatement=ruleAssignStatement
	{ $current=$iv_ruleAssignStatement.current; }
	EOF;

// Rule AssignStatement
ruleAssignStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignStatementAccess().getUpdatedVariableVariableExpressionParserRuleCall_0_0());
				}
				lv_updatedVariable_0_0=ruleVariableExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignStatementRule());
					}
					set(
						$current,
						"updatedVariable",
						lv_updatedVariable_0_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.VariableExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='::='
		{
			newLeafNode(otherlv_1, grammarAccess.getAssignStatementAccess().getColonColonEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignStatementAccess().getValueExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignStatementRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"edu.ustb.sei.mde.xmuxtext.Xmu2.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getBlockStatementParserRuleCall_0());
		}
		this_BlockStatement_0=ruleBlockStatement
		{
			$current = $this_BlockStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getUpdateStatementParserRuleCall_1());
		}
		this_UpdateStatement_1=ruleUpdateStatement
		{
			$current = $this_UpdateStatement_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSwitchStatementParserRuleCall_2());
		}
		this_SwitchStatement_2=ruleSwitchStatement
		{
			$current = $this_SwitchStatement_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getDeleteNodeStatementParserRuleCall_3());
		}
		this_DeleteNodeStatement_3=ruleDeleteNodeStatement
		{
			$current = $this_DeleteNodeStatement_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getDeleteLinkStatementParserRuleCall_4());
		}
		this_DeleteLinkStatement_4=ruleDeleteLinkStatement
		{
			$current = $this_DeleteLinkStatement_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getEnforcePatternStatementParserRuleCall_5());
		}
		this_EnforcePatternStatement_5=ruleEnforcePatternStatement
		{
			$current = $this_EnforcePatternStatement_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getForEachStatementParserRuleCall_6());
		}
		this_ForEachStatement_6=ruleForEachStatement
		{
			$current = $this_ForEachStatement_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getRuleCallStatementParserRuleCall_7());
		}
		this_RuleCallStatement_7=ruleRuleCallStatement
		{
			$current = $this_RuleCallStatement_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSkipParserRuleCall_8());
		}
		this_Skip_8=ruleSkip
		{
			$current = $this_Skip_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getFailParserRuleCall_9());
		}
		this_Fail_9=ruleFail
		{
			$current = $this_Fail_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getAssignStatementParserRuleCall_10());
		}
		this_AssignStatement_10=ruleAssignStatement
		{
			$current = $this_AssignStatement_10.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Rule Tag
ruleTag returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='source'
			{
				$current = grammarAccess.getTagAccess().getSourceEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTagAccess().getSourceEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='view'
			{
				$current = grammarAccess.getTagAccess().getViewEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTagAccess().getViewEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule LoopOperator
ruleLoopOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='select'
			{
				$current = grammarAccess.getLoopOperatorAccess().getSelectEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getLoopOperatorAccess().getSelectEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='forAll'
			{
				$current = grammarAccess.getLoopOperatorAccess().getForAllEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getLoopOperatorAccess().getForAllEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='exists'
			{
				$current = grammarAccess.getLoopOperatorAccess().getExistsEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getLoopOperatorAccess().getExistsEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule PositionOperator
rulePositionOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='first'
			{
				$current = grammarAccess.getPositionOperatorAccess().getFirstEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getPositionOperatorAccess().getFirstEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='last'
			{
				$current = grammarAccess.getPositionOperatorAccess().getLastEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getPositionOperatorAccess().getLastEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='at'
			{
				$current = grammarAccess.getPositionOperatorAccess().getAtEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getPositionOperatorAccess().getAtEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule EmptyValue
ruleEmptyValue returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='null'
			{
				$current = grammarAccess.getEmptyValueAccess().getNullValueEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getEmptyValueAccess().getNullValueEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='undefined'
			{
				$current = grammarAccess.getEmptyValueAccess().getEmptyValueEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getEmptyValueAccess().getEmptyValueEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule UnaryOperator
ruleUnaryOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='not'
			{
				$current = grammarAccess.getUnaryOperatorAccess().getNotEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getUnaryOperatorAccess().getNotEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='-'
			{
				$current = grammarAccess.getUnaryOperatorAccess().getMinusEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getUnaryOperatorAccess().getMinusEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule MultiplicativeOperator
ruleMultiplicativeOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='*'
			{
				$current = grammarAccess.getMultiplicativeOperatorAccess().getMulEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMultiplicativeOperatorAccess().getMulEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='/'
			{
				$current = grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule AdditiveOperator
ruleAdditiveOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='+'
			{
				$current = grammarAccess.getAdditiveOperatorAccess().getAddEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAdditiveOperatorAccess().getAddEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='-'
			{
				$current = grammarAccess.getAdditiveOperatorAccess().getSubEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAdditiveOperatorAccess().getSubEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='++'
			{
				$current = grammarAccess.getAdditiveOperatorAccess().getAppendEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getAdditiveOperatorAccess().getAppendEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule RelationalOperator
ruleRelationalOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='='
			{
				$current = grammarAccess.getRelationalOperatorAccess().getEqualEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getRelationalOperatorAccess().getEqualEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='<'
			{
				$current = grammarAccess.getRelationalOperatorAccess().getLessEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getRelationalOperatorAccess().getLessEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='<='
			{
				$current = grammarAccess.getRelationalOperatorAccess().getLessEqualEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getRelationalOperatorAccess().getLessEqualEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='>'
			{
				$current = grammarAccess.getRelationalOperatorAccess().getGreaterEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getRelationalOperatorAccess().getGreaterEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='>='
			{
				$current = grammarAccess.getRelationalOperatorAccess().getGreaterEqualEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getRelationalOperatorAccess().getGreaterEqualEnumLiteralDeclaration_4());
			}
		)
	)
;

// Rule ActionType
ruleActionType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='match'
			{
				$current = grammarAccess.getActionTypeAccess().getMatchEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getActionTypeAccess().getMatchEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='unmatchs'
			{
				$current = grammarAccess.getActionTypeAccess().getUnmatchsEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getActionTypeAccess().getUnmatchsEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='unmatchv'
			{
				$current = grammarAccess.getActionTypeAccess().getUnmatchvEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getActionTypeAccess().getUnmatchvEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='default'
			{
				$current = grammarAccess.getActionTypeAccess().getDefaultEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getActionTypeAccess().getDefaultEnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_BOOLEAN : ('true'|'false');

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_PRIMITIVE_TYPE : ('String'|'Boolean'|'Integer'|'OclAny'|'Resource'|'OclObject');

RULE_PATH_NAME : RULE_ID '!' RULE_ID;

RULE_NAME : RULE_ID '@post'?;

RULE_MODEL_URI : '<' ( options {greedy=false;} : . )*'>';

RULE_OBJ_URI : '@' ('a'..'z'|'A'..'Z'|'0'..'9'|'_'|'/'|'\\'|'.'|':'|'#')*;

fragment RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
